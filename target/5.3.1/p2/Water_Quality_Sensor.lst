
/Users/friedl/Desktop/Projects/Water_Quality_Sensor/target/5.3.1/p2/Water_Quality_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fd000  085fd000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fd018  085fd018  0000d018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fdb30  085fd088  0000db30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   000024c0  023fdb38  085fd090  0000db38  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000074  1007acf8  085ff550  0001acf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000027c  1007ad6c  1007ad6c  0002ad6c  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff5c4  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000009f0  085ff5c8  085ff5c8  0001f5c8  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f5c8  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   000f42b8  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000fc47  00000000  00000000  001142b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00033e6d  00000000  00000000  00123eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000026d8  00000000  00000000  00157d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00009f40  00000000  00000000  0015a444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00020f2c  00000000  00000000  00164384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003666d  00000000  00000000  001852b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000c19b6  00000000  00000000  001bb91d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006ea0  00000000  00000000  0027d2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fd018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fd018:	480e      	ldr	r0, [pc, #56]	; (85fd054 <module_user_pre_init+0x3c>)
 85fd01a:	490f      	ldr	r1, [pc, #60]	; (85fd058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fd01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fd01e:	4288      	cmp	r0, r1
 85fd020:	d005      	beq.n	85fd02e <module_user_pre_init+0x16>
 85fd022:	4a0e      	ldr	r2, [pc, #56]	; (85fd05c <module_user_pre_init+0x44>)
 85fd024:	4282      	cmp	r2, r0
 85fd026:	d002      	beq.n	85fd02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fd028:	4b0d      	ldr	r3, [pc, #52]	; (85fd060 <module_user_pre_init+0x48>)
 85fd02a:	1a12      	subs	r2, r2, r0
 85fd02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fd02e:	480d      	ldr	r0, [pc, #52]	; (85fd064 <module_user_pre_init+0x4c>)
 85fd030:	4a0d      	ldr	r2, [pc, #52]	; (85fd068 <module_user_pre_init+0x50>)
 85fd032:	2100      	movs	r1, #0
 85fd034:	4b0d      	ldr	r3, [pc, #52]	; (85fd06c <module_user_pre_init+0x54>)
 85fd036:	1a12      	subs	r2, r2, r0
 85fd038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fd03a:	480d      	ldr	r0, [pc, #52]	; (85fd070 <module_user_pre_init+0x58>)
 85fd03c:	490d      	ldr	r1, [pc, #52]	; (85fd074 <module_user_pre_init+0x5c>)
 85fd03e:	4288      	cmp	r0, r1
 85fd040:	d005      	beq.n	85fd04e <module_user_pre_init+0x36>
 85fd042:	4a0d      	ldr	r2, [pc, #52]	; (85fd078 <module_user_pre_init+0x60>)
 85fd044:	4282      	cmp	r2, r0
 85fd046:	d002      	beq.n	85fd04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fd048:	4b05      	ldr	r3, [pc, #20]	; (85fd060 <module_user_pre_init+0x48>)
 85fd04a:	1a12      	subs	r2, r2, r0
 85fd04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fd04e:	4801      	ldr	r0, [pc, #4]	; (85fd054 <module_user_pre_init+0x3c>)
 85fd050:	bd08      	pop	{r3, pc}
 85fd052:	bf00      	nop
 85fd054:	1007acf8 	.word	0x1007acf8
 85fd058:	085ff550 	.word	0x085ff550
 85fd05c:	1007ad6c 	.word	0x1007ad6c
 85fd060:	10110d2d 	.word	0x10110d2d
 85fd064:	1007ad6c 	.word	0x1007ad6c
 85fd068:	1007afe8 	.word	0x1007afe8
 85fd06c:	10110ea1 	.word	0x10110ea1
 85fd070:	023fdb30 	.word	0x023fdb30
 85fd074:	085fd088 	.word	0x085fd088
 85fd078:	023ffff8 	.word	0x023ffff8

085fd07c <dynalib_preinit>:
 85fd07c:	085fd019 00000000                       .._.....

Disassembly of section .psram_text:

023fdb38 <__aeabi_drsub>:
 23fdb38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fdb3c:	e002      	b.n	23fdb44 <__adddf3>
 23fdb3e:	bf00      	nop

023fdb40 <__aeabi_dsub>:
 23fdb40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fdb44 <__adddf3>:
 23fdb44:	b530      	push	{r4, r5, lr}
 23fdb46:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fdb4a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fdb4e:	ea94 0f05 	teq	r4, r5
 23fdb52:	bf08      	it	eq
 23fdb54:	ea90 0f02 	teqeq	r0, r2
 23fdb58:	bf1f      	itttt	ne
 23fdb5a:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fdb5e:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fdb62:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fdb66:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fdb6a:	f000 80e2 	beq.w	23fdd32 <__adddf3+0x1ee>
 23fdb6e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fdb72:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fdb76:	bfb8      	it	lt
 23fdb78:	426d      	neglt	r5, r5
 23fdb7a:	dd0c      	ble.n	23fdb96 <__adddf3+0x52>
 23fdb7c:	442c      	add	r4, r5
 23fdb7e:	ea80 0202 	eor.w	r2, r0, r2
 23fdb82:	ea81 0303 	eor.w	r3, r1, r3
 23fdb86:	ea82 0000 	eor.w	r0, r2, r0
 23fdb8a:	ea83 0101 	eor.w	r1, r3, r1
 23fdb8e:	ea80 0202 	eor.w	r2, r0, r2
 23fdb92:	ea81 0303 	eor.w	r3, r1, r3
 23fdb96:	2d36      	cmp	r5, #54	; 0x36
 23fdb98:	bf88      	it	hi
 23fdb9a:	bd30      	pophi	{r4, r5, pc}
 23fdb9c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fdba0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fdba4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fdba8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fdbac:	d002      	beq.n	23fdbb4 <__adddf3+0x70>
 23fdbae:	4240      	negs	r0, r0
 23fdbb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fdbb4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fdbb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fdbbc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fdbc0:	d002      	beq.n	23fdbc8 <__adddf3+0x84>
 23fdbc2:	4252      	negs	r2, r2
 23fdbc4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fdbc8:	ea94 0f05 	teq	r4, r5
 23fdbcc:	f000 80a7 	beq.w	23fdd1e <__adddf3+0x1da>
 23fdbd0:	f1a4 0401 	sub.w	r4, r4, #1
 23fdbd4:	f1d5 0e20 	rsbs	lr, r5, #32
 23fdbd8:	db0d      	blt.n	23fdbf6 <__adddf3+0xb2>
 23fdbda:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fdbde:	fa22 f205 	lsr.w	r2, r2, r5
 23fdbe2:	1880      	adds	r0, r0, r2
 23fdbe4:	f141 0100 	adc.w	r1, r1, #0
 23fdbe8:	fa03 f20e 	lsl.w	r2, r3, lr
 23fdbec:	1880      	adds	r0, r0, r2
 23fdbee:	fa43 f305 	asr.w	r3, r3, r5
 23fdbf2:	4159      	adcs	r1, r3
 23fdbf4:	e00e      	b.n	23fdc14 <__adddf3+0xd0>
 23fdbf6:	f1a5 0520 	sub.w	r5, r5, #32
 23fdbfa:	f10e 0e20 	add.w	lr, lr, #32
 23fdbfe:	2a01      	cmp	r2, #1
 23fdc00:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fdc04:	bf28      	it	cs
 23fdc06:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fdc0a:	fa43 f305 	asr.w	r3, r3, r5
 23fdc0e:	18c0      	adds	r0, r0, r3
 23fdc10:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fdc14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fdc18:	d507      	bpl.n	23fdc2a <__adddf3+0xe6>
 23fdc1a:	f04f 0e00 	mov.w	lr, #0
 23fdc1e:	f1dc 0c00 	rsbs	ip, ip, #0
 23fdc22:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fdc26:	eb6e 0101 	sbc.w	r1, lr, r1
 23fdc2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fdc2e:	d31b      	bcc.n	23fdc68 <__adddf3+0x124>
 23fdc30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fdc34:	d30c      	bcc.n	23fdc50 <__adddf3+0x10c>
 23fdc36:	0849      	lsrs	r1, r1, #1
 23fdc38:	ea5f 0030 	movs.w	r0, r0, rrx
 23fdc3c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fdc40:	f104 0401 	add.w	r4, r4, #1
 23fdc44:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fdc48:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fdc4c:	f080 809a 	bcs.w	23fdd84 <__adddf3+0x240>
 23fdc50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fdc54:	bf08      	it	eq
 23fdc56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fdc5a:	f150 0000 	adcs.w	r0, r0, #0
 23fdc5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fdc62:	ea41 0105 	orr.w	r1, r1, r5
 23fdc66:	bd30      	pop	{r4, r5, pc}
 23fdc68:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fdc6c:	4140      	adcs	r0, r0
 23fdc6e:	eb41 0101 	adc.w	r1, r1, r1
 23fdc72:	3c01      	subs	r4, #1
 23fdc74:	bf28      	it	cs
 23fdc76:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fdc7a:	d2e9      	bcs.n	23fdc50 <__adddf3+0x10c>
 23fdc7c:	f091 0f00 	teq	r1, #0
 23fdc80:	bf04      	itt	eq
 23fdc82:	4601      	moveq	r1, r0
 23fdc84:	2000      	moveq	r0, #0
 23fdc86:	fab1 f381 	clz	r3, r1
 23fdc8a:	bf08      	it	eq
 23fdc8c:	3320      	addeq	r3, #32
 23fdc8e:	f1a3 030b 	sub.w	r3, r3, #11
 23fdc92:	f1b3 0220 	subs.w	r2, r3, #32
 23fdc96:	da0c      	bge.n	23fdcb2 <__adddf3+0x16e>
 23fdc98:	320c      	adds	r2, #12
 23fdc9a:	dd08      	ble.n	23fdcae <__adddf3+0x16a>
 23fdc9c:	f102 0c14 	add.w	ip, r2, #20
 23fdca0:	f1c2 020c 	rsb	r2, r2, #12
 23fdca4:	fa01 f00c 	lsl.w	r0, r1, ip
 23fdca8:	fa21 f102 	lsr.w	r1, r1, r2
 23fdcac:	e00c      	b.n	23fdcc8 <__adddf3+0x184>
 23fdcae:	f102 0214 	add.w	r2, r2, #20
 23fdcb2:	bfd8      	it	le
 23fdcb4:	f1c2 0c20 	rsble	ip, r2, #32
 23fdcb8:	fa01 f102 	lsl.w	r1, r1, r2
 23fdcbc:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fdcc0:	bfdc      	itt	le
 23fdcc2:	ea41 010c 	orrle.w	r1, r1, ip
 23fdcc6:	4090      	lslle	r0, r2
 23fdcc8:	1ae4      	subs	r4, r4, r3
 23fdcca:	bfa2      	ittt	ge
 23fdccc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fdcd0:	4329      	orrge	r1, r5
 23fdcd2:	bd30      	popge	{r4, r5, pc}
 23fdcd4:	ea6f 0404 	mvn.w	r4, r4
 23fdcd8:	3c1f      	subs	r4, #31
 23fdcda:	da1c      	bge.n	23fdd16 <__adddf3+0x1d2>
 23fdcdc:	340c      	adds	r4, #12
 23fdcde:	dc0e      	bgt.n	23fdcfe <__adddf3+0x1ba>
 23fdce0:	f104 0414 	add.w	r4, r4, #20
 23fdce4:	f1c4 0220 	rsb	r2, r4, #32
 23fdce8:	fa20 f004 	lsr.w	r0, r0, r4
 23fdcec:	fa01 f302 	lsl.w	r3, r1, r2
 23fdcf0:	ea40 0003 	orr.w	r0, r0, r3
 23fdcf4:	fa21 f304 	lsr.w	r3, r1, r4
 23fdcf8:	ea45 0103 	orr.w	r1, r5, r3
 23fdcfc:	bd30      	pop	{r4, r5, pc}
 23fdcfe:	f1c4 040c 	rsb	r4, r4, #12
 23fdd02:	f1c4 0220 	rsb	r2, r4, #32
 23fdd06:	fa20 f002 	lsr.w	r0, r0, r2
 23fdd0a:	fa01 f304 	lsl.w	r3, r1, r4
 23fdd0e:	ea40 0003 	orr.w	r0, r0, r3
 23fdd12:	4629      	mov	r1, r5
 23fdd14:	bd30      	pop	{r4, r5, pc}
 23fdd16:	fa21 f004 	lsr.w	r0, r1, r4
 23fdd1a:	4629      	mov	r1, r5
 23fdd1c:	bd30      	pop	{r4, r5, pc}
 23fdd1e:	f094 0f00 	teq	r4, #0
 23fdd22:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fdd26:	bf06      	itte	eq
 23fdd28:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fdd2c:	3401      	addeq	r4, #1
 23fdd2e:	3d01      	subne	r5, #1
 23fdd30:	e74e      	b.n	23fdbd0 <__adddf3+0x8c>
 23fdd32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fdd36:	bf18      	it	ne
 23fdd38:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fdd3c:	d029      	beq.n	23fdd92 <__adddf3+0x24e>
 23fdd3e:	ea94 0f05 	teq	r4, r5
 23fdd42:	bf08      	it	eq
 23fdd44:	ea90 0f02 	teqeq	r0, r2
 23fdd48:	d005      	beq.n	23fdd56 <__adddf3+0x212>
 23fdd4a:	ea54 0c00 	orrs.w	ip, r4, r0
 23fdd4e:	bf04      	itt	eq
 23fdd50:	4619      	moveq	r1, r3
 23fdd52:	4610      	moveq	r0, r2
 23fdd54:	bd30      	pop	{r4, r5, pc}
 23fdd56:	ea91 0f03 	teq	r1, r3
 23fdd5a:	bf1e      	ittt	ne
 23fdd5c:	2100      	movne	r1, #0
 23fdd5e:	2000      	movne	r0, #0
 23fdd60:	bd30      	popne	{r4, r5, pc}
 23fdd62:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fdd66:	d105      	bne.n	23fdd74 <__adddf3+0x230>
 23fdd68:	0040      	lsls	r0, r0, #1
 23fdd6a:	4149      	adcs	r1, r1
 23fdd6c:	bf28      	it	cs
 23fdd6e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fdd72:	bd30      	pop	{r4, r5, pc}
 23fdd74:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fdd78:	bf3c      	itt	cc
 23fdd7a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fdd7e:	bd30      	popcc	{r4, r5, pc}
 23fdd80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fdd84:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fdd88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fdd8c:	f04f 0000 	mov.w	r0, #0
 23fdd90:	bd30      	pop	{r4, r5, pc}
 23fdd92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fdd96:	bf1a      	itte	ne
 23fdd98:	4619      	movne	r1, r3
 23fdd9a:	4610      	movne	r0, r2
 23fdd9c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fdda0:	bf1c      	itt	ne
 23fdda2:	460b      	movne	r3, r1
 23fdda4:	4602      	movne	r2, r0
 23fdda6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fddaa:	bf06      	itte	eq
 23fddac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fddb0:	ea91 0f03 	teqeq	r1, r3
 23fddb4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fddb8:	bd30      	pop	{r4, r5, pc}
 23fddba:	bf00      	nop

023fddbc <__aeabi_ui2d>:
 23fddbc:	f090 0f00 	teq	r0, #0
 23fddc0:	bf04      	itt	eq
 23fddc2:	2100      	moveq	r1, #0
 23fddc4:	4770      	bxeq	lr
 23fddc6:	b530      	push	{r4, r5, lr}
 23fddc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fddcc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fddd0:	f04f 0500 	mov.w	r5, #0
 23fddd4:	f04f 0100 	mov.w	r1, #0
 23fddd8:	e750      	b.n	23fdc7c <__adddf3+0x138>
 23fddda:	bf00      	nop

023fdddc <__aeabi_i2d>:
 23fdddc:	f090 0f00 	teq	r0, #0
 23fdde0:	bf04      	itt	eq
 23fdde2:	2100      	moveq	r1, #0
 23fdde4:	4770      	bxeq	lr
 23fdde6:	b530      	push	{r4, r5, lr}
 23fdde8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fddec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fddf0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fddf4:	bf48      	it	mi
 23fddf6:	4240      	negmi	r0, r0
 23fddf8:	f04f 0100 	mov.w	r1, #0
 23fddfc:	e73e      	b.n	23fdc7c <__adddf3+0x138>
 23fddfe:	bf00      	nop

023fde00 <__aeabi_f2d>:
 23fde00:	0042      	lsls	r2, r0, #1
 23fde02:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fde06:	ea4f 0131 	mov.w	r1, r1, rrx
 23fde0a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fde0e:	bf1f      	itttt	ne
 23fde10:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fde14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fde18:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fde1c:	4770      	bxne	lr
 23fde1e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fde22:	bf08      	it	eq
 23fde24:	4770      	bxeq	lr
 23fde26:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fde2a:	bf04      	itt	eq
 23fde2c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fde30:	4770      	bxeq	lr
 23fde32:	b530      	push	{r4, r5, lr}
 23fde34:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fde38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fde3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fde40:	e71c      	b.n	23fdc7c <__adddf3+0x138>
 23fde42:	bf00      	nop

023fde44 <__aeabi_ul2d>:
 23fde44:	ea50 0201 	orrs.w	r2, r0, r1
 23fde48:	bf08      	it	eq
 23fde4a:	4770      	bxeq	lr
 23fde4c:	b530      	push	{r4, r5, lr}
 23fde4e:	f04f 0500 	mov.w	r5, #0
 23fde52:	e00a      	b.n	23fde6a <__aeabi_l2d+0x16>

023fde54 <__aeabi_l2d>:
 23fde54:	ea50 0201 	orrs.w	r2, r0, r1
 23fde58:	bf08      	it	eq
 23fde5a:	4770      	bxeq	lr
 23fde5c:	b530      	push	{r4, r5, lr}
 23fde5e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fde62:	d502      	bpl.n	23fde6a <__aeabi_l2d+0x16>
 23fde64:	4240      	negs	r0, r0
 23fde66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fde6a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fde6e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fde72:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fde76:	f43f aed8 	beq.w	23fdc2a <__adddf3+0xe6>
 23fde7a:	f04f 0203 	mov.w	r2, #3
 23fde7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fde82:	bf18      	it	ne
 23fde84:	3203      	addne	r2, #3
 23fde86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fde8a:	bf18      	it	ne
 23fde8c:	3203      	addne	r2, #3
 23fde8e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fde92:	f1c2 0320 	rsb	r3, r2, #32
 23fde96:	fa00 fc03 	lsl.w	ip, r0, r3
 23fde9a:	fa20 f002 	lsr.w	r0, r0, r2
 23fde9e:	fa01 fe03 	lsl.w	lr, r1, r3
 23fdea2:	ea40 000e 	orr.w	r0, r0, lr
 23fdea6:	fa21 f102 	lsr.w	r1, r1, r2
 23fdeaa:	4414      	add	r4, r2
 23fdeac:	e6bd      	b.n	23fdc2a <__adddf3+0xe6>
 23fdeae:	bf00      	nop

023fdeb0 <__aeabi_dmul>:
 23fdeb0:	b570      	push	{r4, r5, r6, lr}
 23fdeb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fdeb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fdeba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fdebe:	bf1d      	ittte	ne
 23fdec0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fdec4:	ea94 0f0c 	teqne	r4, ip
 23fdec8:	ea95 0f0c 	teqne	r5, ip
 23fdecc:	f000 f8de 	bleq	23fe08c <__aeabi_dmul+0x1dc>
 23fded0:	442c      	add	r4, r5
 23fded2:	ea81 0603 	eor.w	r6, r1, r3
 23fded6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fdeda:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fdede:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fdee2:	bf18      	it	ne
 23fdee4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fdee8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fdeec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fdef0:	d038      	beq.n	23fdf64 <__aeabi_dmul+0xb4>
 23fdef2:	fba0 ce02 	umull	ip, lr, r0, r2
 23fdef6:	f04f 0500 	mov.w	r5, #0
 23fdefa:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fdefe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fdf02:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fdf06:	f04f 0600 	mov.w	r6, #0
 23fdf0a:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fdf0e:	f09c 0f00 	teq	ip, #0
 23fdf12:	bf18      	it	ne
 23fdf14:	f04e 0e01 	orrne.w	lr, lr, #1
 23fdf18:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fdf1c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fdf20:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fdf24:	d204      	bcs.n	23fdf30 <__aeabi_dmul+0x80>
 23fdf26:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fdf2a:	416d      	adcs	r5, r5
 23fdf2c:	eb46 0606 	adc.w	r6, r6, r6
 23fdf30:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fdf34:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fdf38:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fdf3c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fdf40:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fdf44:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fdf48:	bf88      	it	hi
 23fdf4a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fdf4e:	d81e      	bhi.n	23fdf8e <__aeabi_dmul+0xde>
 23fdf50:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fdf54:	bf08      	it	eq
 23fdf56:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fdf5a:	f150 0000 	adcs.w	r0, r0, #0
 23fdf5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fdf62:	bd70      	pop	{r4, r5, r6, pc}
 23fdf64:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fdf68:	ea46 0101 	orr.w	r1, r6, r1
 23fdf6c:	ea40 0002 	orr.w	r0, r0, r2
 23fdf70:	ea81 0103 	eor.w	r1, r1, r3
 23fdf74:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fdf78:	bfc2      	ittt	gt
 23fdf7a:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fdf7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fdf82:	bd70      	popgt	{r4, r5, r6, pc}
 23fdf84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fdf88:	f04f 0e00 	mov.w	lr, #0
 23fdf8c:	3c01      	subs	r4, #1
 23fdf8e:	f300 80ab 	bgt.w	23fe0e8 <__aeabi_dmul+0x238>
 23fdf92:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fdf96:	bfde      	ittt	le
 23fdf98:	2000      	movle	r0, #0
 23fdf9a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fdf9e:	bd70      	pople	{r4, r5, r6, pc}
 23fdfa0:	f1c4 0400 	rsb	r4, r4, #0
 23fdfa4:	3c20      	subs	r4, #32
 23fdfa6:	da35      	bge.n	23fe014 <__aeabi_dmul+0x164>
 23fdfa8:	340c      	adds	r4, #12
 23fdfaa:	dc1b      	bgt.n	23fdfe4 <__aeabi_dmul+0x134>
 23fdfac:	f104 0414 	add.w	r4, r4, #20
 23fdfb0:	f1c4 0520 	rsb	r5, r4, #32
 23fdfb4:	fa00 f305 	lsl.w	r3, r0, r5
 23fdfb8:	fa20 f004 	lsr.w	r0, r0, r4
 23fdfbc:	fa01 f205 	lsl.w	r2, r1, r5
 23fdfc0:	ea40 0002 	orr.w	r0, r0, r2
 23fdfc4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fdfc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fdfcc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fdfd0:	fa21 f604 	lsr.w	r6, r1, r4
 23fdfd4:	eb42 0106 	adc.w	r1, r2, r6
 23fdfd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fdfdc:	bf08      	it	eq
 23fdfde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fdfe2:	bd70      	pop	{r4, r5, r6, pc}
 23fdfe4:	f1c4 040c 	rsb	r4, r4, #12
 23fdfe8:	f1c4 0520 	rsb	r5, r4, #32
 23fdfec:	fa00 f304 	lsl.w	r3, r0, r4
 23fdff0:	fa20 f005 	lsr.w	r0, r0, r5
 23fdff4:	fa01 f204 	lsl.w	r2, r1, r4
 23fdff8:	ea40 0002 	orr.w	r0, r0, r2
 23fdffc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fe000:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fe004:	f141 0100 	adc.w	r1, r1, #0
 23fe008:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fe00c:	bf08      	it	eq
 23fe00e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fe012:	bd70      	pop	{r4, r5, r6, pc}
 23fe014:	f1c4 0520 	rsb	r5, r4, #32
 23fe018:	fa00 f205 	lsl.w	r2, r0, r5
 23fe01c:	ea4e 0e02 	orr.w	lr, lr, r2
 23fe020:	fa20 f304 	lsr.w	r3, r0, r4
 23fe024:	fa01 f205 	lsl.w	r2, r1, r5
 23fe028:	ea43 0302 	orr.w	r3, r3, r2
 23fe02c:	fa21 f004 	lsr.w	r0, r1, r4
 23fe030:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fe034:	fa21 f204 	lsr.w	r2, r1, r4
 23fe038:	ea20 0002 	bic.w	r0, r0, r2
 23fe03c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fe040:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fe044:	bf08      	it	eq
 23fe046:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fe04a:	bd70      	pop	{r4, r5, r6, pc}
 23fe04c:	f094 0f00 	teq	r4, #0
 23fe050:	d10f      	bne.n	23fe072 <__aeabi_dmul+0x1c2>
 23fe052:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fe056:	0040      	lsls	r0, r0, #1
 23fe058:	eb41 0101 	adc.w	r1, r1, r1
 23fe05c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fe060:	bf08      	it	eq
 23fe062:	3c01      	subeq	r4, #1
 23fe064:	d0f7      	beq.n	23fe056 <__aeabi_dmul+0x1a6>
 23fe066:	ea41 0106 	orr.w	r1, r1, r6
 23fe06a:	f095 0f00 	teq	r5, #0
 23fe06e:	bf18      	it	ne
 23fe070:	4770      	bxne	lr
 23fe072:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fe076:	0052      	lsls	r2, r2, #1
 23fe078:	eb43 0303 	adc.w	r3, r3, r3
 23fe07c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fe080:	bf08      	it	eq
 23fe082:	3d01      	subeq	r5, #1
 23fe084:	d0f7      	beq.n	23fe076 <__aeabi_dmul+0x1c6>
 23fe086:	ea43 0306 	orr.w	r3, r3, r6
 23fe08a:	4770      	bx	lr
 23fe08c:	ea94 0f0c 	teq	r4, ip
 23fe090:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fe094:	bf18      	it	ne
 23fe096:	ea95 0f0c 	teqne	r5, ip
 23fe09a:	d00c      	beq.n	23fe0b6 <__aeabi_dmul+0x206>
 23fe09c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fe0a0:	bf18      	it	ne
 23fe0a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fe0a6:	d1d1      	bne.n	23fe04c <__aeabi_dmul+0x19c>
 23fe0a8:	ea81 0103 	eor.w	r1, r1, r3
 23fe0ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fe0b0:	f04f 0000 	mov.w	r0, #0
 23fe0b4:	bd70      	pop	{r4, r5, r6, pc}
 23fe0b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fe0ba:	bf06      	itte	eq
 23fe0bc:	4610      	moveq	r0, r2
 23fe0be:	4619      	moveq	r1, r3
 23fe0c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fe0c4:	d019      	beq.n	23fe0fa <__aeabi_dmul+0x24a>
 23fe0c6:	ea94 0f0c 	teq	r4, ip
 23fe0ca:	d102      	bne.n	23fe0d2 <__aeabi_dmul+0x222>
 23fe0cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fe0d0:	d113      	bne.n	23fe0fa <__aeabi_dmul+0x24a>
 23fe0d2:	ea95 0f0c 	teq	r5, ip
 23fe0d6:	d105      	bne.n	23fe0e4 <__aeabi_dmul+0x234>
 23fe0d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fe0dc:	bf1c      	itt	ne
 23fe0de:	4610      	movne	r0, r2
 23fe0e0:	4619      	movne	r1, r3
 23fe0e2:	d10a      	bne.n	23fe0fa <__aeabi_dmul+0x24a>
 23fe0e4:	ea81 0103 	eor.w	r1, r1, r3
 23fe0e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fe0ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fe0f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fe0f4:	f04f 0000 	mov.w	r0, #0
 23fe0f8:	bd70      	pop	{r4, r5, r6, pc}
 23fe0fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fe0fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fe102:	bd70      	pop	{r4, r5, r6, pc}

023fe104 <__aeabi_ddiv>:
 23fe104:	b570      	push	{r4, r5, r6, lr}
 23fe106:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fe10a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fe10e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fe112:	bf1d      	ittte	ne
 23fe114:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fe118:	ea94 0f0c 	teqne	r4, ip
 23fe11c:	ea95 0f0c 	teqne	r5, ip
 23fe120:	f000 f8a7 	bleq	23fe272 <__aeabi_ddiv+0x16e>
 23fe124:	eba4 0405 	sub.w	r4, r4, r5
 23fe128:	ea81 0e03 	eor.w	lr, r1, r3
 23fe12c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fe130:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fe134:	f000 8088 	beq.w	23fe248 <__aeabi_ddiv+0x144>
 23fe138:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fe13c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fe140:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fe144:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fe148:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fe14c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fe150:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fe154:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fe158:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fe15c:	429d      	cmp	r5, r3
 23fe15e:	bf08      	it	eq
 23fe160:	4296      	cmpeq	r6, r2
 23fe162:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fe166:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fe16a:	d202      	bcs.n	23fe172 <__aeabi_ddiv+0x6e>
 23fe16c:	085b      	lsrs	r3, r3, #1
 23fe16e:	ea4f 0232 	mov.w	r2, r2, rrx
 23fe172:	1ab6      	subs	r6, r6, r2
 23fe174:	eb65 0503 	sbc.w	r5, r5, r3
 23fe178:	085b      	lsrs	r3, r3, #1
 23fe17a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fe17e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fe182:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fe186:	ebb6 0e02 	subs.w	lr, r6, r2
 23fe18a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fe18e:	bf22      	ittt	cs
 23fe190:	1ab6      	subcs	r6, r6, r2
 23fe192:	4675      	movcs	r5, lr
 23fe194:	ea40 000c 	orrcs.w	r0, r0, ip
 23fe198:	085b      	lsrs	r3, r3, #1
 23fe19a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fe19e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fe1a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fe1a6:	bf22      	ittt	cs
 23fe1a8:	1ab6      	subcs	r6, r6, r2
 23fe1aa:	4675      	movcs	r5, lr
 23fe1ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fe1b0:	085b      	lsrs	r3, r3, #1
 23fe1b2:	ea4f 0232 	mov.w	r2, r2, rrx
 23fe1b6:	ebb6 0e02 	subs.w	lr, r6, r2
 23fe1ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fe1be:	bf22      	ittt	cs
 23fe1c0:	1ab6      	subcs	r6, r6, r2
 23fe1c2:	4675      	movcs	r5, lr
 23fe1c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fe1c8:	085b      	lsrs	r3, r3, #1
 23fe1ca:	ea4f 0232 	mov.w	r2, r2, rrx
 23fe1ce:	ebb6 0e02 	subs.w	lr, r6, r2
 23fe1d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fe1d6:	bf22      	ittt	cs
 23fe1d8:	1ab6      	subcs	r6, r6, r2
 23fe1da:	4675      	movcs	r5, lr
 23fe1dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fe1e0:	ea55 0e06 	orrs.w	lr, r5, r6
 23fe1e4:	d018      	beq.n	23fe218 <__aeabi_ddiv+0x114>
 23fe1e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fe1ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fe1ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fe1f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fe1f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fe1fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fe1fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fe202:	d1c0      	bne.n	23fe186 <__aeabi_ddiv+0x82>
 23fe204:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fe208:	d10b      	bne.n	23fe222 <__aeabi_ddiv+0x11e>
 23fe20a:	ea41 0100 	orr.w	r1, r1, r0
 23fe20e:	f04f 0000 	mov.w	r0, #0
 23fe212:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fe216:	e7b6      	b.n	23fe186 <__aeabi_ddiv+0x82>
 23fe218:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fe21c:	bf04      	itt	eq
 23fe21e:	4301      	orreq	r1, r0
 23fe220:	2000      	moveq	r0, #0
 23fe222:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fe226:	bf88      	it	hi
 23fe228:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fe22c:	f63f aeaf 	bhi.w	23fdf8e <__aeabi_dmul+0xde>
 23fe230:	ebb5 0c03 	subs.w	ip, r5, r3
 23fe234:	bf04      	itt	eq
 23fe236:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fe23a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fe23e:	f150 0000 	adcs.w	r0, r0, #0
 23fe242:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fe246:	bd70      	pop	{r4, r5, r6, pc}
 23fe248:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fe24c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fe250:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fe254:	bfc2      	ittt	gt
 23fe256:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fe25a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fe25e:	bd70      	popgt	{r4, r5, r6, pc}
 23fe260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fe264:	f04f 0e00 	mov.w	lr, #0
 23fe268:	3c01      	subs	r4, #1
 23fe26a:	e690      	b.n	23fdf8e <__aeabi_dmul+0xde>
 23fe26c:	ea45 0e06 	orr.w	lr, r5, r6
 23fe270:	e68d      	b.n	23fdf8e <__aeabi_dmul+0xde>
 23fe272:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fe276:	ea94 0f0c 	teq	r4, ip
 23fe27a:	bf08      	it	eq
 23fe27c:	ea95 0f0c 	teqeq	r5, ip
 23fe280:	f43f af3b 	beq.w	23fe0fa <__aeabi_dmul+0x24a>
 23fe284:	ea94 0f0c 	teq	r4, ip
 23fe288:	d10a      	bne.n	23fe2a0 <__aeabi_ddiv+0x19c>
 23fe28a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fe28e:	f47f af34 	bne.w	23fe0fa <__aeabi_dmul+0x24a>
 23fe292:	ea95 0f0c 	teq	r5, ip
 23fe296:	f47f af25 	bne.w	23fe0e4 <__aeabi_dmul+0x234>
 23fe29a:	4610      	mov	r0, r2
 23fe29c:	4619      	mov	r1, r3
 23fe29e:	e72c      	b.n	23fe0fa <__aeabi_dmul+0x24a>
 23fe2a0:	ea95 0f0c 	teq	r5, ip
 23fe2a4:	d106      	bne.n	23fe2b4 <__aeabi_ddiv+0x1b0>
 23fe2a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fe2aa:	f43f aefd 	beq.w	23fe0a8 <__aeabi_dmul+0x1f8>
 23fe2ae:	4610      	mov	r0, r2
 23fe2b0:	4619      	mov	r1, r3
 23fe2b2:	e722      	b.n	23fe0fa <__aeabi_dmul+0x24a>
 23fe2b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fe2b8:	bf18      	it	ne
 23fe2ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fe2be:	f47f aec5 	bne.w	23fe04c <__aeabi_dmul+0x19c>
 23fe2c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fe2c6:	f47f af0d 	bne.w	23fe0e4 <__aeabi_dmul+0x234>
 23fe2ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fe2ce:	f47f aeeb 	bne.w	23fe0a8 <__aeabi_dmul+0x1f8>
 23fe2d2:	e712      	b.n	23fe0fa <__aeabi_dmul+0x24a>

023fe2d4 <__gedf2>:
 23fe2d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fe2d8:	e006      	b.n	23fe2e8 <__cmpdf2+0x4>
 23fe2da:	bf00      	nop

023fe2dc <__ledf2>:
 23fe2dc:	f04f 0c01 	mov.w	ip, #1
 23fe2e0:	e002      	b.n	23fe2e8 <__cmpdf2+0x4>
 23fe2e2:	bf00      	nop

023fe2e4 <__cmpdf2>:
 23fe2e4:	f04f 0c01 	mov.w	ip, #1
 23fe2e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fe2ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fe2f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fe2f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fe2f8:	bf18      	it	ne
 23fe2fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fe2fe:	d01b      	beq.n	23fe338 <__cmpdf2+0x54>
 23fe300:	b001      	add	sp, #4
 23fe302:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fe306:	bf0c      	ite	eq
 23fe308:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fe30c:	ea91 0f03 	teqne	r1, r3
 23fe310:	bf02      	ittt	eq
 23fe312:	ea90 0f02 	teqeq	r0, r2
 23fe316:	2000      	moveq	r0, #0
 23fe318:	4770      	bxeq	lr
 23fe31a:	f110 0f00 	cmn.w	r0, #0
 23fe31e:	ea91 0f03 	teq	r1, r3
 23fe322:	bf58      	it	pl
 23fe324:	4299      	cmppl	r1, r3
 23fe326:	bf08      	it	eq
 23fe328:	4290      	cmpeq	r0, r2
 23fe32a:	bf2c      	ite	cs
 23fe32c:	17d8      	asrcs	r0, r3, #31
 23fe32e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fe332:	f040 0001 	orr.w	r0, r0, #1
 23fe336:	4770      	bx	lr
 23fe338:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fe33c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fe340:	d102      	bne.n	23fe348 <__cmpdf2+0x64>
 23fe342:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fe346:	d107      	bne.n	23fe358 <__cmpdf2+0x74>
 23fe348:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fe34c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fe350:	d1d6      	bne.n	23fe300 <__cmpdf2+0x1c>
 23fe352:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fe356:	d0d3      	beq.n	23fe300 <__cmpdf2+0x1c>
 23fe358:	f85d 0b04 	ldr.w	r0, [sp], #4
 23fe35c:	4770      	bx	lr
 23fe35e:	bf00      	nop

023fe360 <__aeabi_cdrcmple>:
 23fe360:	4684      	mov	ip, r0
 23fe362:	4610      	mov	r0, r2
 23fe364:	4662      	mov	r2, ip
 23fe366:	468c      	mov	ip, r1
 23fe368:	4619      	mov	r1, r3
 23fe36a:	4663      	mov	r3, ip
 23fe36c:	e000      	b.n	23fe370 <__aeabi_cdcmpeq>
 23fe36e:	bf00      	nop

023fe370 <__aeabi_cdcmpeq>:
 23fe370:	b501      	push	{r0, lr}
 23fe372:	f7ff ffb7 	bl	23fe2e4 <__cmpdf2>
 23fe376:	2800      	cmp	r0, #0
 23fe378:	bf48      	it	mi
 23fe37a:	f110 0f00 	cmnmi.w	r0, #0
 23fe37e:	bd01      	pop	{r0, pc}

023fe380 <__aeabi_dcmpeq>:
 23fe380:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fe384:	f7ff fff4 	bl	23fe370 <__aeabi_cdcmpeq>
 23fe388:	bf0c      	ite	eq
 23fe38a:	2001      	moveq	r0, #1
 23fe38c:	2000      	movne	r0, #0
 23fe38e:	f85d fb08 	ldr.w	pc, [sp], #8
 23fe392:	bf00      	nop

023fe394 <__aeabi_dcmplt>:
 23fe394:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fe398:	f7ff ffea 	bl	23fe370 <__aeabi_cdcmpeq>
 23fe39c:	bf34      	ite	cc
 23fe39e:	2001      	movcc	r0, #1
 23fe3a0:	2000      	movcs	r0, #0
 23fe3a2:	f85d fb08 	ldr.w	pc, [sp], #8
 23fe3a6:	bf00      	nop

023fe3a8 <__aeabi_dcmple>:
 23fe3a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fe3ac:	f7ff ffe0 	bl	23fe370 <__aeabi_cdcmpeq>
 23fe3b0:	bf94      	ite	ls
 23fe3b2:	2001      	movls	r0, #1
 23fe3b4:	2000      	movhi	r0, #0
 23fe3b6:	f85d fb08 	ldr.w	pc, [sp], #8
 23fe3ba:	bf00      	nop

023fe3bc <__aeabi_dcmpge>:
 23fe3bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fe3c0:	f7ff ffce 	bl	23fe360 <__aeabi_cdrcmple>
 23fe3c4:	bf94      	ite	ls
 23fe3c6:	2001      	movls	r0, #1
 23fe3c8:	2000      	movhi	r0, #0
 23fe3ca:	f85d fb08 	ldr.w	pc, [sp], #8
 23fe3ce:	bf00      	nop

023fe3d0 <__aeabi_dcmpgt>:
 23fe3d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fe3d4:	f7ff ffc4 	bl	23fe360 <__aeabi_cdrcmple>
 23fe3d8:	bf34      	ite	cc
 23fe3da:	2001      	movcc	r0, #1
 23fe3dc:	2000      	movcs	r0, #0
 23fe3de:	f85d fb08 	ldr.w	pc, [sp], #8
 23fe3e2:	bf00      	nop

023fe3e4 <__aeabi_dcmpun>:
 23fe3e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fe3e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fe3ec:	d102      	bne.n	23fe3f4 <__aeabi_dcmpun+0x10>
 23fe3ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fe3f2:	d10a      	bne.n	23fe40a <__aeabi_dcmpun+0x26>
 23fe3f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fe3f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fe3fc:	d102      	bne.n	23fe404 <__aeabi_dcmpun+0x20>
 23fe3fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fe402:	d102      	bne.n	23fe40a <__aeabi_dcmpun+0x26>
 23fe404:	f04f 0000 	mov.w	r0, #0
 23fe408:	4770      	bx	lr
 23fe40a:	f04f 0001 	mov.w	r0, #1
 23fe40e:	4770      	bx	lr

023fe410 <__aeabi_d2iz>:
 23fe410:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fe414:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fe418:	d215      	bcs.n	23fe446 <__aeabi_d2iz+0x36>
 23fe41a:	d511      	bpl.n	23fe440 <__aeabi_d2iz+0x30>
 23fe41c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fe420:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fe424:	d912      	bls.n	23fe44c <__aeabi_d2iz+0x3c>
 23fe426:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fe42a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fe42e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fe432:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fe436:	fa23 f002 	lsr.w	r0, r3, r2
 23fe43a:	bf18      	it	ne
 23fe43c:	4240      	negne	r0, r0
 23fe43e:	4770      	bx	lr
 23fe440:	f04f 0000 	mov.w	r0, #0
 23fe444:	4770      	bx	lr
 23fe446:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fe44a:	d105      	bne.n	23fe458 <__aeabi_d2iz+0x48>
 23fe44c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23fe450:	bf08      	it	eq
 23fe452:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23fe456:	4770      	bx	lr
 23fe458:	f04f 0000 	mov.w	r0, #0
 23fe45c:	4770      	bx	lr
 23fe45e:	bf00      	nop

023fe460 <__aeabi_d2uiz>:
 23fe460:	004a      	lsls	r2, r1, #1
 23fe462:	d211      	bcs.n	23fe488 <__aeabi_d2uiz+0x28>
 23fe464:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fe468:	d211      	bcs.n	23fe48e <__aeabi_d2uiz+0x2e>
 23fe46a:	d50d      	bpl.n	23fe488 <__aeabi_d2uiz+0x28>
 23fe46c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fe470:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fe474:	d40e      	bmi.n	23fe494 <__aeabi_d2uiz+0x34>
 23fe476:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fe47a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fe47e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fe482:	fa23 f002 	lsr.w	r0, r3, r2
 23fe486:	4770      	bx	lr
 23fe488:	f04f 0000 	mov.w	r0, #0
 23fe48c:	4770      	bx	lr
 23fe48e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fe492:	d102      	bne.n	23fe49a <__aeabi_d2uiz+0x3a>
 23fe494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe498:	4770      	bx	lr
 23fe49a:	f04f 0000 	mov.w	r0, #0
 23fe49e:	4770      	bx	lr

023fe4a0 <__aeabi_d2f>:
 23fe4a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fe4a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fe4a8:	bf24      	itt	cs
 23fe4aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fe4ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fe4b2:	d90d      	bls.n	23fe4d0 <__aeabi_d2f+0x30>
 23fe4b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fe4b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fe4bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fe4c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fe4c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fe4c8:	bf08      	it	eq
 23fe4ca:	f020 0001 	biceq.w	r0, r0, #1
 23fe4ce:	4770      	bx	lr
 23fe4d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fe4d4:	d121      	bne.n	23fe51a <__aeabi_d2f+0x7a>
 23fe4d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fe4da:	bfbc      	itt	lt
 23fe4dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fe4e0:	4770      	bxlt	lr
 23fe4e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fe4e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fe4ea:	f1c2 0218 	rsb	r2, r2, #24
 23fe4ee:	f1c2 0c20 	rsb	ip, r2, #32
 23fe4f2:	fa10 f30c 	lsls.w	r3, r0, ip
 23fe4f6:	fa20 f002 	lsr.w	r0, r0, r2
 23fe4fa:	bf18      	it	ne
 23fe4fc:	f040 0001 	orrne.w	r0, r0, #1
 23fe500:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fe504:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fe508:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fe50c:	ea40 000c 	orr.w	r0, r0, ip
 23fe510:	fa23 f302 	lsr.w	r3, r3, r2
 23fe514:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fe518:	e7cc      	b.n	23fe4b4 <__aeabi_d2f+0x14>
 23fe51a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fe51e:	d107      	bne.n	23fe530 <__aeabi_d2f+0x90>
 23fe520:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fe524:	bf1e      	ittt	ne
 23fe526:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fe52a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fe52e:	4770      	bxne	lr
 23fe530:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fe534:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fe538:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fe53c:	4770      	bx	lr
 23fe53e:	bf00      	nop

023fe540 <strlen>:
 23fe540:	4603      	mov	r3, r0
 23fe542:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe546:	2a00      	cmp	r2, #0
 23fe548:	d1fb      	bne.n	23fe542 <strlen+0x2>
 23fe54a:	1a18      	subs	r0, r3, r0
 23fe54c:	3801      	subs	r0, #1
 23fe54e:	4770      	bx	lr

023fe550 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fe550:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fe552:	f001 f9dd 	bl	23ff910 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fe556:	2500      	movs	r5, #0
 23fe558:	4e05      	ldr	r6, [pc, #20]	; (23fe570 <module_user_init+0x20>)
 23fe55a:	4c06      	ldr	r4, [pc, #24]	; (23fe574 <module_user_init+0x24>)
 23fe55c:	1ba4      	subs	r4, r4, r6
 23fe55e:	08a4      	lsrs	r4, r4, #2
 23fe560:	42ac      	cmp	r4, r5
 23fe562:	d100      	bne.n	23fe566 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fe564:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fe566:	f856 3b04 	ldr.w	r3, [r6], #4
 23fe56a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fe56c:	3501      	adds	r5, #1
 23fe56e:	e7f7      	b.n	23fe560 <module_user_init+0x10>
 23fe570:	023fffd8 	.word	0x023fffd8
 23fe574:	023ffff8 	.word	0x023ffff8

023fe578 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fe578:	f000 b830 	b.w	23fe5dc <setup>

023fe57c <module_user_loop>:
}

void module_user_loop() {
 23fe57c:	b508      	push	{r3, lr}
    loop();
 23fe57e:	f000 fa05 	bl	23fe98c <loop>
    _post_loop();
}
 23fe582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fe586:	f001 b97b 	b.w	23ff880 <_post_loop>

023fe58a <_Znaj>:
 23fe58a:	f000 bcc3 	b.w	23fef14 <malloc>

023fe58e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fe58e:	f000 bccf 	b.w	23fef30 <free>

023fe592 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fe592:	7800      	ldrb	r0, [r0, #0]
 23fe594:	fab0 f080 	clz	r0, r0
 23fe598:	0940      	lsrs	r0, r0, #5
 23fe59a:	4770      	bx	lr

023fe59c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fe59c:	2301      	movs	r3, #1
 23fe59e:	7003      	strb	r3, [r0, #0]
 23fe5a0:	4770      	bx	lr

023fe5a2 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
 23fe5a2:	b570      	push	{r4, r5, r6, lr}
 23fe5a4:	4605      	mov	r5, r0
 23fe5a6:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
 23fe5a8:	4616      	mov	r6, r2
 23fe5aa:	b942      	cbnz	r2, 23fe5be <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
 23fe5ac:	6803      	ldr	r3, [r0, #0]
 23fe5ae:	b2c9      	uxtb	r1, r1
 23fe5b0:	689b      	ldr	r3, [r3, #8]
 23fe5b2:	4798      	blx	r3
        n += println();
 23fe5b4:	4628      	mov	r0, r5
    }
 23fe5b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
 23fe5ba:	f000 bee4 	b.w	23ff386 <_ZN5Print7printlnEv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 23fe5be:	2900      	cmp	r1, #0
 23fe5c0:	da0a      	bge.n	23fe5d8 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
 23fe5c2:	2a0a      	cmp	r2, #10
 23fe5c4:	d108      	bne.n	23fe5d8 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
 23fe5c6:	212d      	movs	r1, #45	; 0x2d
 23fe5c8:	f000 feda 	bl	23ff380 <_ZN5Print5printEc>
            val = -n;
 23fe5cc:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fe5ce:	4628      	mov	r0, r5
 23fe5d0:	b2f2      	uxtb	r2, r6
 23fe5d2:	f000 feee 	bl	23ff3b2 <_ZN5Print11printNumberEmh>
 23fe5d6:	e7ed      	b.n	23fe5b4 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
 23fe5d8:	4621      	mov	r1, r4
 23fe5da:	e7f8      	b.n	23fe5ce <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>

023fe5dc <setup>:
float volt = 0;
float ntu = 0;
//float turbidity_percentage = 0; 


void setup() {
 23fe5dc:	b508      	push	{r3, lr}
  
 Serial.begin(115200);
 23fe5de:	f001 f8bf 	bl	23ff760 <_Z16_fetch_usbserialv>
 23fe5e2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 23fe5e6:	f001 f8af 	bl	23ff748 <_ZN9USBSerial5beginEl>
 
 pinMode(TurbiditySensorPin,INPUT);         // Declare analog pins as input pins
 23fe5ea:	2100      	movs	r1, #0
 23fe5ec:	2001      	movs	r0, #1
 23fe5ee:	f001 f9ff 	bl	23ff9f0 <pinMode>
 pinMode(TdsSensorPin, INPUT);

}
 23fe5f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 pinMode(TdsSensorPin, INPUT);
 23fe5f6:	2100      	movs	r1, #0
 23fe5f8:	4608      	mov	r0, r1
 23fe5fa:	f001 b9f9 	b.w	23ff9f0 <pinMode>
	...

023fe600 <_Z9Turbidityv>:
  //Particle.publish("EC:" + String(ecValue, 2) + "mS/m", PRIVATE);

  }
}

void Turbidity() {
 23fe600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe602:	f44f 757a 	mov.w	r5, #1000	; 0x3e8

  int sensorValue = 0;
 23fe606:	2400      	movs	r4, #0
  
  for(int i=0; i<1000; i++) {                                               // Take 1000 samples and average 
    sensorValue += (analogRead(TurbiditySensorPin));
 23fe608:	2001      	movs	r0, #1
 23fe60a:	f001 fa02 	bl	23ffa12 <analogRead>
  for(int i=0; i<1000; i++) {                                               // Take 1000 samples and average 
 23fe60e:	3d01      	subs	r5, #1
    sensorValue += (analogRead(TurbiditySensorPin));
 23fe610:	4404      	add	r4, r0
  for(int i=0; i<1000; i++) {                                               // Take 1000 samples and average 
 23fe612:	d1f9      	bne.n	23fe608 <_Z9Turbidityv+0x8>
  }

    sensorValue = sensorValue/1000;
 23fe614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe618:	fb94 f4f3 	sdiv	r4, r4, r3

    
  //sensorValue = analogRead(TurbiditySensorPin);
  Serial.println(sensorValue);
 23fe61c:	f001 f8a0 	bl	23ff760 <_Z16_fetch_usbserialv>
 23fe620:	4621      	mov	r1, r4
 23fe622:	220a      	movs	r2, #10
 23fe624:	f7ff ffbd 	bl	23fe5a2 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
  
  int turbidity = map(sensorValue, 30, 990, 100, 0);                        // sensor calibration, sensor min value, sensor max value.  Map to 0 - 100. 
 23fe628:	2364      	movs	r3, #100	; 0x64
 23fe62a:	f240 32de 	movw	r2, #990	; 0x3de
 23fe62e:	211e      	movs	r1, #30
 23fe630:	4620      	mov	r0, r4
 23fe632:	9500      	str	r5, [sp, #0]
 23fe634:	f000 fca6 	bl	23fef84 <_Z3mapiiiii>
 23fe638:	4604      	mov	r4, r0
  delay(100);
 23fe63a:	2064      	movs	r0, #100	; 0x64
 23fe63c:	f000 fcae 	bl	23fef9c <delay>
  
    if (turbidity < 20) {                                                   // You can determine you own thresholds.
 23fe640:	2c13      	cmp	r4, #19
 23fe642:	dc0d      	bgt.n	23fe660 <_Z9Turbidityv+0x60>
        //Particle.publish("CLEAN: " + String(turbidity), PRIVATE);         // You can also add more if need be e.g. 0-5  = VERY CLEAN, 5-10 = CLEAN etc. 
          Serial.print("CLEAN: ");
 23fe644:	f001 f88c 	bl	23ff760 <_Z16_fetch_usbserialv>
 23fe648:	4910      	ldr	r1, [pc, #64]	; (23fe68c <_Z9Turbidityv+0x8c>)
          Serial.println(turbidity, 2);

        } else  if ((turbidity > 20) && (turbidity < 50)) {                 // You can determine you own thresholds.
            //Particle.publish("MURKY: "+ String(turbidity), PRIVATE);
            Serial.print("MURKY: ");
 23fe64a:	f000 fe95 	bl	23ff378 <_ZN5Print5printEPKc>
            Serial.println(turbidity, 2);
 23fe64e:	f001 f887 	bl	23ff760 <_Z16_fetch_usbserialv>
 23fe652:	2202      	movs	r2, #2
        
        } else if (turbidity > 50) {                                        // You can determine you own thresholds.
            //Particle.publish("DIRTY: "+ String(turbidity), PRIVATE);
            Serial.print("DIRTY: ");
            Serial.println(turbidity);
 23fe654:	4621      	mov	r1, r4
        }
}
 23fe656:	b003      	add	sp, #12
 23fe658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            Serial.println(turbidity);
 23fe65c:	f7ff bfa1 	b.w	23fe5a2 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
        } else  if ((turbidity > 20) && (turbidity < 50)) {                 // You can determine you own thresholds.
 23fe660:	f1a4 0315 	sub.w	r3, r4, #21
 23fe664:	2b1c      	cmp	r3, #28
 23fe666:	d803      	bhi.n	23fe670 <_Z9Turbidityv+0x70>
            Serial.print("MURKY: ");
 23fe668:	f001 f87a 	bl	23ff760 <_Z16_fetch_usbserialv>
 23fe66c:	4908      	ldr	r1, [pc, #32]	; (23fe690 <_Z9Turbidityv+0x90>)
 23fe66e:	e7ec      	b.n	23fe64a <_Z9Turbidityv+0x4a>
        } else if (turbidity > 50) {                                        // You can determine you own thresholds.
 23fe670:	2c32      	cmp	r4, #50	; 0x32
 23fe672:	dd08      	ble.n	23fe686 <_Z9Turbidityv+0x86>
            Serial.print("DIRTY: ");
 23fe674:	f001 f874 	bl	23ff760 <_Z16_fetch_usbserialv>
 23fe678:	4906      	ldr	r1, [pc, #24]	; (23fe694 <_Z9Turbidityv+0x94>)
 23fe67a:	f000 fe7d 	bl	23ff378 <_ZN5Print5printEPKc>
            Serial.println(turbidity);
 23fe67e:	f001 f86f 	bl	23ff760 <_Z16_fetch_usbserialv>
 23fe682:	220a      	movs	r2, #10
 23fe684:	e7e6      	b.n	23fe654 <_Z9Turbidityv+0x54>
}
 23fe686:	b003      	add	sp, #12
 23fe688:	bd30      	pop	{r4, r5, pc}
 23fe68a:	bf00      	nop
 23fe68c:	023ffdac 	.word	0x023ffdac
 23fe690:	023ffdb4 	.word	0x023ffdb4
 23fe694:	023ffdbc 	.word	0x023ffdbc

023fe698 <_Z12getMedianNumPii>:
  Turbidity();                   // the rate limit!  DO NOT USE DELAY() as it will cause
                                 // the EC sensor to function incorrectly.                                                                                                     
}


  int getMedianNum(int bArray[], int iFilterLen) {                // median filtering algorithm - DO NOT CHANGE
 23fe698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int bTab[iFilterLen];
 23fe69a:	008a      	lsls	r2, r1, #2
 23fe69c:	3207      	adds	r2, #7
 23fe69e:	f022 0207 	bic.w	r2, r2, #7
  int getMedianNum(int bArray[], int iFilterLen) {                // median filtering algorithm - DO NOT CHANGE
 23fe6a2:	af00      	add	r7, sp, #0
    int bTab[iFilterLen];
 23fe6a4:	ebad 0d02 	sub.w	sp, sp, r2
 23fe6a8:	466c      	mov	r4, sp
 23fe6aa:	2200      	movs	r2, #0
 23fe6ac:	1e4b      	subs	r3, r1, #1
    for (byte i = 0; i<iFilterLen; i++)
 23fe6ae:	b2d5      	uxtb	r5, r2
 23fe6b0:	428d      	cmp	r5, r1
 23fe6b2:	f102 0201 	add.w	r2, r2, #1
 23fe6b6:	da04      	bge.n	23fe6c2 <_Z12getMedianNumPii+0x2a>
    bTab[i] = bArray[i];
 23fe6b8:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 23fe6bc:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
    for (byte i = 0; i<iFilterLen; i++)
 23fe6c0:	e7f5      	b.n	23fe6ae <_Z12getMedianNumPii+0x16>

  int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++) {
 23fe6c2:	2000      	movs	r0, #0
 23fe6c4:	4298      	cmp	r0, r3
 23fe6c6:	da11      	bge.n	23fe6ec <_Z12getMedianNumPii+0x54>
 23fe6c8:	4622      	mov	r2, r4
      for (i = 0; i < iFilterLen - j - 1; i++) {
 23fe6ca:	2500      	movs	r5, #0
 23fe6cc:	eba3 0e00 	sub.w	lr, r3, r0
 23fe6d0:	4575      	cmp	r5, lr
 23fe6d2:	da09      	bge.n	23fe6e8 <_Z12getMedianNumPii+0x50>

  if (bTab[i] > bTab[i + 1]) {
 23fe6d4:	6816      	ldr	r6, [r2, #0]
 23fe6d6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 23fe6da:	3501      	adds	r5, #1
 23fe6dc:	4566      	cmp	r6, ip
 23fe6de:	dd01      	ble.n	23fe6e4 <_Z12getMedianNumPii+0x4c>
    bTemp = bTab[i];
    bTab[i] = bTab[i + 1];
    bTab[i + 1] = bTemp;
 23fe6e0:	e9c2 c600 	strd	ip, r6, [r2]
 23fe6e4:	3204      	adds	r2, #4
 23fe6e6:	e7f3      	b.n	23fe6d0 <_Z12getMedianNumPii+0x38>
    for (j = 0; j < iFilterLen - 1; j++) {
 23fe6e8:	3001      	adds	r0, #1
 23fe6ea:	e7eb      	b.n	23fe6c4 <_Z12getMedianNumPii+0x2c>
        }  
      }
    }

  if ((iFilterLen & 1) > 0)
 23fe6ec:	07ca      	lsls	r2, r1, #31
 23fe6ee:	d506      	bpl.n	23fe6fe <_Z12getMedianNumPii+0x66>
    bTemp = bTab[(iFilterLen - 1) / 2];
 23fe6f0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 23fe6f4:	105b      	asrs	r3, r3, #1
 23fe6f6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
      else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
      return bTemp;
}
 23fe6fa:	46bd      	mov	sp, r7
 23fe6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
 23fe6fe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23fe702:	1049      	asrs	r1, r1, #1
 23fe704:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 23fe708:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 23fe70c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 23fe710:	4418      	add	r0, r3
 23fe712:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 23fe716:	1040      	asrs	r0, r0, #1
      return bTemp;
 23fe718:	e7ef      	b.n	23fe6fa <_Z12getMedianNumPii+0x62>
 23fe71a:	0000      	movs	r0, r0
 23fe71c:	0000      	movs	r0, r0
	...

023fe720 <_Z3TDSv>:
void TDS() {
 23fe720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe722:	ed2d 8b02 	vpush	{d8}
  static unsigned long analogSampleTimepoint = millis();
 23fe726:	4d84      	ldr	r5, [pc, #528]	; (23fe938 <_Z3TDSv+0x218>)
 23fe728:	e8d5 3f8f 	ldab	r3, [r5]
 23fe72c:	f013 0f01 	tst.w	r3, #1
 23fe730:	4c82      	ldr	r4, [pc, #520]	; (23fe93c <_Z3TDSv+0x21c>)
 23fe732:	d109      	bne.n	23fe748 <_Z3TDSv+0x28>
 23fe734:	4628      	mov	r0, r5
 23fe736:	f7ff ff2c 	bl	23fe592 <__cxa_guard_acquire>
 23fe73a:	b128      	cbz	r0, 23fe748 <_Z3TDSv+0x28>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fe73c:	f000 f94a 	bl	23fe9d4 <HAL_Timer_Get_Milli_Seconds>
 23fe740:	6020      	str	r0, [r4, #0]
 23fe742:	4628      	mov	r0, r5
 23fe744:	f7ff ff2a 	bl	23fe59c <__cxa_guard_release>
 23fe748:	f000 f944 	bl	23fe9d4 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-analogSampleTimepoint > 40U) {                                                   //every 40 milliseconds,read the analog value from the ADC
 23fe74c:	6823      	ldr	r3, [r4, #0]
 23fe74e:	1ac0      	subs	r0, r0, r3
 23fe750:	2828      	cmp	r0, #40	; 0x28
 23fe752:	d912      	bls.n	23fe77a <_Z3TDSv+0x5a>
 23fe754:	f000 f93e 	bl	23fe9d4 <HAL_Timer_Get_Milli_Seconds>
    analogSampleTimepoint = millis();
 23fe758:	6020      	str	r0, [r4, #0]
    analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);                                 //read the analog value and store into the buffer
 23fe75a:	4c79      	ldr	r4, [pc, #484]	; (23fe940 <_Z3TDSv+0x220>)
 23fe75c:	2000      	movs	r0, #0
 23fe75e:	6825      	ldr	r5, [r4, #0]
 23fe760:	f001 f957 	bl	23ffa12 <analogRead>
 23fe764:	4b77      	ldr	r3, [pc, #476]	; (23fe944 <_Z3TDSv+0x224>)
 23fe766:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    analogBufferIndex++;
 23fe76a:	6823      	ldr	r3, [r4, #0]
      if (analogBufferIndex == SCOUNT)
 23fe76c:	2b1d      	cmp	r3, #29
    analogBufferIndex++;
 23fe76e:	f103 0201 	add.w	r2, r3, #1
          analogBufferIndex = 0;
 23fe772:	bf0a      	itet	eq
 23fe774:	2300      	moveq	r3, #0
    analogBufferIndex++;
 23fe776:	6022      	strne	r2, [r4, #0]
          analogBufferIndex = 0;
 23fe778:	6023      	streq	r3, [r4, #0]
  static unsigned long printTimepoint = millis();
 23fe77a:	4d73      	ldr	r5, [pc, #460]	; (23fe948 <_Z3TDSv+0x228>)
 23fe77c:	e8d5 3f8f 	ldab	r3, [r5]
 23fe780:	f013 0f01 	tst.w	r3, #1
 23fe784:	4c71      	ldr	r4, [pc, #452]	; (23fe94c <_Z3TDSv+0x22c>)
 23fe786:	d109      	bne.n	23fe79c <_Z3TDSv+0x7c>
 23fe788:	4628      	mov	r0, r5
 23fe78a:	f7ff ff02 	bl	23fe592 <__cxa_guard_acquire>
 23fe78e:	b128      	cbz	r0, 23fe79c <_Z3TDSv+0x7c>
 23fe790:	f000 f920 	bl	23fe9d4 <HAL_Timer_Get_Milli_Seconds>
 23fe794:	6020      	str	r0, [r4, #0]
 23fe796:	4628      	mov	r0, r5
 23fe798:	f7ff ff00 	bl	23fe59c <__cxa_guard_release>
 23fe79c:	f000 f91a 	bl	23fe9d4 <HAL_Timer_Get_Milli_Seconds>
  if(millis()-printTimepoint > 800U) {
 23fe7a0:	6823      	ldr	r3, [r4, #0]
 23fe7a2:	1ac0      	subs	r0, r0, r3
 23fe7a4:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 23fe7a8:	f240 80ac 	bls.w	23fe904 <_Z3TDSv+0x1e4>
 23fe7ac:	f000 f912 	bl	23fe9d4 <HAL_Timer_Get_Milli_Seconds>
    for(copyIndex = 0; copyIndex < SCOUNT; copyIndex ++)
 23fe7b0:	2300      	movs	r3, #0
 23fe7b2:	221f      	movs	r2, #31
 23fe7b4:	4966      	ldr	r1, [pc, #408]	; (23fe950 <_Z3TDSv+0x230>)
    printTimepoint = millis();
 23fe7b6:	6020      	str	r0, [r4, #0]
    for(copyIndex = 0; copyIndex < SCOUNT; copyIndex ++)
 23fe7b8:	4c62      	ldr	r4, [pc, #392]	; (23fe944 <_Z3TDSv+0x224>)
 23fe7ba:	4866      	ldr	r0, [pc, #408]	; (23fe954 <_Z3TDSv+0x234>)
 23fe7bc:	600b      	str	r3, [r1, #0]
 23fe7be:	3a01      	subs	r2, #1
 23fe7c0:	d005      	beq.n	23fe7ce <_Z3TDSv+0xae>
        analogBufferTemp[copyIndex] = analogBuffer[copyIndex];
 23fe7c2:	f854 3b04 	ldr.w	r3, [r4], #4
 23fe7c6:	f840 3b04 	str.w	r3, [r0], #4
    for(copyIndex = 0; copyIndex < SCOUNT; copyIndex ++)
 23fe7ca:	2301      	movs	r3, #1
 23fe7cc:	e7f7      	b.n	23fe7be <_Z3TDSv+0x9e>
 23fe7ce:	b10b      	cbz	r3, 23fe7d4 <_Z3TDSv+0xb4>
 23fe7d0:	231e      	movs	r3, #30
 23fe7d2:	600b      	str	r3, [r1, #0]
        averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF/ 4095.0;           // read the analog value more stable by the median filtering algorithm, and convert to voltage value
 23fe7d4:	211e      	movs	r1, #30
 23fe7d6:	485f      	ldr	r0, [pc, #380]	; (23fe954 <_Z3TDSv+0x234>)
 23fe7d8:	f7ff ff5e 	bl	23fe698 <_Z12getMedianNumPii>
 23fe7dc:	ee07 0a90 	vmov	s15, r0
 23fe7e0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 23fe958 <_Z3TDSv+0x238>
 23fe7e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23fe7e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 23fe7ec:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 23fe95c <_Z3TDSv+0x23c>
 23fe7f0:	ee87 8a87 	vdiv.f32	s16, s15, s14
 23fe7f4:	4b5a      	ldr	r3, [pc, #360]	; (23fe960 <_Z3TDSv+0x240>)
 23fe7f6:	ed83 8a00 	vstr	s16, [r3]
        float compensationCoefficient = 1.0 + 0.02 * (temperature-25.0);                        // temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
 23fe7fa:	4b5a      	ldr	r3, [pc, #360]	; (23fe964 <_Z3TDSv+0x244>)
 23fe7fc:	6818      	ldr	r0, [r3, #0]
 23fe7fe:	f7ff faed 	bl	23fdddc <__aeabi_i2d>
 23fe802:	2200      	movs	r2, #0
 23fe804:	4b58      	ldr	r3, [pc, #352]	; (23fe968 <_Z3TDSv+0x248>)
 23fe806:	f7ff f99b 	bl	23fdb40 <__aeabi_dsub>
 23fe80a:	a341      	add	r3, pc, #260	; (adr r3, 23fe910 <_Z3TDSv+0x1f0>)
 23fe80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe810:	f7ff fb4e 	bl	23fdeb0 <__aeabi_dmul>
 23fe814:	2200      	movs	r2, #0
 23fe816:	4b55      	ldr	r3, [pc, #340]	; (23fe96c <_Z3TDSv+0x24c>)
 23fe818:	f7ff f994 	bl	23fdb44 <__adddf3>
 23fe81c:	f7ff fe40 	bl	23fe4a0 <__aeabi_d2f>
  tdsValue = (133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds value
 23fe820:	ee07 0a90 	vmov	s15, r0
 23fe824:	eec8 7a27 	vdiv.f32	s15, s16, s15
 23fe828:	ee17 0a90 	vmov	r0, s15
 23fe82c:	f7ff fae8 	bl	23fde00 <__aeabi_f2d>
 23fe830:	a339      	add	r3, pc, #228	; (adr r3, 23fe918 <_Z3TDSv+0x1f8>)
 23fe832:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe836:	4604      	mov	r4, r0
 23fe838:	460d      	mov	r5, r1
 23fe83a:	f7ff fb39 	bl	23fdeb0 <__aeabi_dmul>
 23fe83e:	4622      	mov	r2, r4
 23fe840:	462b      	mov	r3, r5
 23fe842:	f7ff fb35 	bl	23fdeb0 <__aeabi_dmul>
 23fe846:	4622      	mov	r2, r4
 23fe848:	462b      	mov	r3, r5
 23fe84a:	f7ff fb31 	bl	23fdeb0 <__aeabi_dmul>
 23fe84e:	a334      	add	r3, pc, #208	; (adr r3, 23fe920 <_Z3TDSv+0x200>)
 23fe850:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe854:	4606      	mov	r6, r0
 23fe856:	460f      	mov	r7, r1
 23fe858:	4620      	mov	r0, r4
 23fe85a:	4629      	mov	r1, r5
 23fe85c:	f7ff fb28 	bl	23fdeb0 <__aeabi_dmul>
 23fe860:	4622      	mov	r2, r4
 23fe862:	462b      	mov	r3, r5
 23fe864:	f7ff fb24 	bl	23fdeb0 <__aeabi_dmul>
 23fe868:	4602      	mov	r2, r0
 23fe86a:	460b      	mov	r3, r1
 23fe86c:	4630      	mov	r0, r6
 23fe86e:	4639      	mov	r1, r7
 23fe870:	f7ff f966 	bl	23fdb40 <__aeabi_dsub>
 23fe874:	a32c      	add	r3, pc, #176	; (adr r3, 23fe928 <_Z3TDSv+0x208>)
 23fe876:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe87a:	4606      	mov	r6, r0
 23fe87c:	460f      	mov	r7, r1
 23fe87e:	4620      	mov	r0, r4
 23fe880:	4629      	mov	r1, r5
 23fe882:	f7ff fb15 	bl	23fdeb0 <__aeabi_dmul>
 23fe886:	4602      	mov	r2, r0
 23fe888:	460b      	mov	r3, r1
 23fe88a:	4630      	mov	r0, r6
 23fe88c:	4639      	mov	r1, r7
 23fe88e:	f7ff f959 	bl	23fdb44 <__adddf3>
 23fe892:	2200      	movs	r2, #0
 23fe894:	4b36      	ldr	r3, [pc, #216]	; (23fe970 <_Z3TDSv+0x250>)
 23fe896:	f7ff fb0b 	bl	23fdeb0 <__aeabi_dmul>
 23fe89a:	f7ff fe01 	bl	23fe4a0 <__aeabi_d2f>
 23fe89e:	4d35      	ldr	r5, [pc, #212]	; (23fe974 <_Z3TDSv+0x254>)
  ecValue = tdsValue/6.41;
 23fe8a0:	4c35      	ldr	r4, [pc, #212]	; (23fe978 <_Z3TDSv+0x258>)
  tdsValue = (133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds value
 23fe8a2:	6028      	str	r0, [r5, #0]
  ecValue = tdsValue/6.41;
 23fe8a4:	f7ff faac 	bl	23fde00 <__aeabi_f2d>
 23fe8a8:	a321      	add	r3, pc, #132	; (adr r3, 23fe930 <_Z3TDSv+0x210>)
 23fe8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe8ae:	f7ff fc29 	bl	23fe104 <__aeabi_ddiv>
 23fe8b2:	f7ff fdf5 	bl	23fe4a0 <__aeabi_d2f>
 23fe8b6:	6020      	str	r0, [r4, #0]
  Serial.print("TDS Value:");
 23fe8b8:	f000 ff52 	bl	23ff760 <_Z16_fetch_usbserialv>
 23fe8bc:	492f      	ldr	r1, [pc, #188]	; (23fe97c <_Z3TDSv+0x25c>)
 23fe8be:	f000 fd5b 	bl	23ff378 <_ZN5Print5printEPKc>
  Serial.print(tdsValue, 2);
 23fe8c2:	f000 ff4d 	bl	23ff760 <_Z16_fetch_usbserialv>
 23fe8c6:	ed95 0a00 	vldr	s0, [r5]
 23fe8ca:	2102      	movs	r1, #2
 23fe8cc:	f000 fe58 	bl	23ff580 <_ZN5Print5printEfi>
  Serial.println("ppm");
 23fe8d0:	f000 ff46 	bl	23ff760 <_Z16_fetch_usbserialv>
 23fe8d4:	492a      	ldr	r1, [pc, #168]	; (23fe980 <_Z3TDSv+0x260>)
 23fe8d6:	f000 fd62 	bl	23ff39e <_ZN5Print7printlnEPKc>
  Serial.print("EC Value:");
 23fe8da:	f000 ff41 	bl	23ff760 <_Z16_fetch_usbserialv>
 23fe8de:	4929      	ldr	r1, [pc, #164]	; (23fe984 <_Z3TDSv+0x264>)
 23fe8e0:	f000 fd4a 	bl	23ff378 <_ZN5Print5printEPKc>
  Serial.print(ecValue, 2);
 23fe8e4:	f000 ff3c 	bl	23ff760 <_Z16_fetch_usbserialv>
 23fe8e8:	2102      	movs	r1, #2
 23fe8ea:	ed94 0a00 	vldr	s0, [r4]
 23fe8ee:	f000 fe47 	bl	23ff580 <_ZN5Print5printEfi>
  Serial.println("mS/m");
 23fe8f2:	f000 ff35 	bl	23ff760 <_Z16_fetch_usbserialv>
}
 23fe8f6:	ecbd 8b02 	vpop	{d8}
 23fe8fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Serial.println("mS/m");
 23fe8fe:	4922      	ldr	r1, [pc, #136]	; (23fe988 <_Z3TDSv+0x268>)
 23fe900:	f000 bd4d 	b.w	23ff39e <_ZN5Print7printlnEPKc>
}
 23fe904:	ecbd 8b02 	vpop	{d8}
 23fe908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fe90a:	bf00      	nop
 23fe90c:	f3af 8000 	nop.w
 23fe910:	47ae147b 	.word	0x47ae147b
 23fe914:	3f947ae1 	.word	0x3f947ae1
 23fe918:	a3d70a3d 	.word	0xa3d70a3d
 23fe91c:	4060ad70 	.word	0x4060ad70
 23fe920:	1eb851ec 	.word	0x1eb851ec
 23fe924:	406ffb85 	.word	0x406ffb85
 23fe928:	b851eb85 	.word	0xb851eb85
 23fe92c:	408acb1e 	.word	0x408acb1e
 23fe930:	0a3d70a4 	.word	0x0a3d70a4
 23fe934:	4019a3d7 	.word	0x4019a3d7
 23fe938:	1007ad70 	.word	0x1007ad70
 23fe93c:	1007ad78 	.word	0x1007ad78
 23fe940:	1007adf4 	.word	0x1007adf4
 23fe944:	1007ad7c 	.word	0x1007ad7c
 23fe948:	1007ad6c 	.word	0x1007ad6c
 23fe94c:	1007ad74 	.word	0x1007ad74
 23fe950:	1007ae74 	.word	0x1007ae74
 23fe954:	1007adf8 	.word	0x1007adf8
 23fe958:	40533333 	.word	0x40533333
 23fe95c:	457ff000 	.word	0x457ff000
 23fe960:	1007ae70 	.word	0x1007ae70
 23fe964:	1007acfc 	.word	0x1007acfc
 23fe968:	40390000 	.word	0x40390000
 23fe96c:	3ff00000 	.word	0x3ff00000
 23fe970:	3fe00000 	.word	0x3fe00000
 23fe974:	1007ae7c 	.word	0x1007ae7c
 23fe978:	1007ae78 	.word	0x1007ae78
 23fe97c:	023ffdc4 	.word	0x023ffdc4
 23fe980:	023ffdcf 	.word	0x023ffdcf
 23fe984:	023ffdd3 	.word	0x023ffdd3
 23fe988:	023ffddd 	.word	0x023ffddd

023fe98c <loop>:
void loop() {
 23fe98c:	b508      	push	{r3, lr}
  TDS();                         // If using Particle Publish using timers not to exceed 
 23fe98e:	f7ff fec7 	bl	23fe720 <_Z3TDSv>
}
 23fe992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Turbidity();                   // the rate limit!  DO NOT USE DELAY() as it will cause
 23fe996:	f7ff be33 	b.w	23fe600 <_Z9Turbidityv>
	...

023fe99c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fe99c:	b509      	push	{r0, r3, lr}
 23fe99e:	4804      	ldr	r0, [pc, #16]	; (23fe9b0 <os_mutex_recursive_create+0x14>)
 23fe9a0:	6800      	ldr	r0, [r0, #0]
 23fe9a2:	4b04      	ldr	r3, [pc, #16]	; (23fe9b4 <os_mutex_recursive_create+0x18>)
 23fe9a4:	4403      	add	r3, r0
 23fe9a6:	681b      	ldr	r3, [r3, #0]
 23fe9a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe9aa:	9302      	str	r3, [sp, #8]
 23fe9ac:	bd09      	pop	{r0, r3, pc}
 23fe9ae:	0000      	.short	0x0000
 23fe9b0:	1007acf8 	.word	0x1007acf8
 23fe9b4:	00000030 	.word	0x00000030

023fe9b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fe9b8:	b509      	push	{r0, r3, lr}
 23fe9ba:	4804      	ldr	r0, [pc, #16]	; (23fe9cc <HAL_RNG_GetRandomNumber+0x14>)
 23fe9bc:	6800      	ldr	r0, [r0, #0]
 23fe9be:	4b04      	ldr	r3, [pc, #16]	; (23fe9d0 <HAL_RNG_GetRandomNumber+0x18>)
 23fe9c0:	4403      	add	r3, r0
 23fe9c2:	681b      	ldr	r3, [r3, #0]
 23fe9c4:	685b      	ldr	r3, [r3, #4]
 23fe9c6:	9302      	str	r3, [sp, #8]
 23fe9c8:	bd09      	pop	{r0, r3, pc}
 23fe9ca:	0000      	.short	0x0000
 23fe9cc:	1007acf8 	.word	0x1007acf8
 23fe9d0:	00000000 	.word	0x00000000

023fe9d4 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fe9d4:	b509      	push	{r0, r3, lr}
 23fe9d6:	4804      	ldr	r0, [pc, #16]	; (23fe9e8 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fe9d8:	6800      	ldr	r0, [r0, #0]
 23fe9da:	4b04      	ldr	r3, [pc, #16]	; (23fe9ec <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fe9dc:	4403      	add	r3, r0
 23fe9de:	681b      	ldr	r3, [r3, #0]
 23fe9e0:	695b      	ldr	r3, [r3, #20]
 23fe9e2:	9302      	str	r3, [sp, #8]
 23fe9e4:	bd09      	pop	{r0, r3, pc}
 23fe9e6:	0000      	.short	0x0000
 23fe9e8:	1007acf8 	.word	0x1007acf8
 23fe9ec:	00000000 	.word	0x00000000

023fe9f0 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fe9f0:	b509      	push	{r0, r3, lr}
 23fe9f2:	4804      	ldr	r0, [pc, #16]	; (23fea04 <hal_pin_validate_function+0x14>)
 23fe9f4:	6800      	ldr	r0, [r0, #0]
 23fe9f6:	4b04      	ldr	r3, [pc, #16]	; (23fea08 <hal_pin_validate_function+0x18>)
 23fe9f8:	4403      	add	r3, r0
 23fe9fa:	681b      	ldr	r3, [r3, #0]
 23fe9fc:	685b      	ldr	r3, [r3, #4]
 23fe9fe:	9302      	str	r3, [sp, #8]
 23fea00:	bd09      	pop	{r0, r3, pc}
 23fea02:	0000      	.short	0x0000
 23fea04:	1007acf8 	.word	0x1007acf8
 23fea08:	00000014 	.word	0x00000014

023fea0c <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fea0c:	b509      	push	{r0, r3, lr}
 23fea0e:	4804      	ldr	r0, [pc, #16]	; (23fea20 <hal_gpio_mode+0x14>)
 23fea10:	6800      	ldr	r0, [r0, #0]
 23fea12:	4b04      	ldr	r3, [pc, #16]	; (23fea24 <hal_gpio_mode+0x18>)
 23fea14:	4403      	add	r3, r0
 23fea16:	681b      	ldr	r3, [r3, #0]
 23fea18:	689b      	ldr	r3, [r3, #8]
 23fea1a:	9302      	str	r3, [sp, #8]
 23fea1c:	bd09      	pop	{r0, r3, pc}
 23fea1e:	0000      	.short	0x0000
 23fea20:	1007acf8 	.word	0x1007acf8
 23fea24:	00000014 	.word	0x00000014

023fea28 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23fea28:	b509      	push	{r0, r3, lr}
 23fea2a:	4804      	ldr	r0, [pc, #16]	; (23fea3c <hal_adc_read+0x14>)
 23fea2c:	6800      	ldr	r0, [r0, #0]
 23fea2e:	4b04      	ldr	r3, [pc, #16]	; (23fea40 <hal_adc_read+0x18>)
 23fea30:	4403      	add	r3, r0
 23fea32:	681b      	ldr	r3, [r3, #0]
 23fea34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fea36:	9302      	str	r3, [sp, #8]
 23fea38:	bd09      	pop	{r0, r3, pc}
 23fea3a:	0000      	.short	0x0000
 23fea3c:	1007acf8 	.word	0x1007acf8
 23fea40:	00000014 	.word	0x00000014

023fea44 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fea44:	b509      	push	{r0, r3, lr}
 23fea46:	4804      	ldr	r0, [pc, #16]	; (23fea58 <hal_i2c_write+0x14>)
 23fea48:	6800      	ldr	r0, [r0, #0]
 23fea4a:	4b04      	ldr	r3, [pc, #16]	; (23fea5c <hal_i2c_write+0x18>)
 23fea4c:	4403      	add	r3, r0
 23fea4e:	681b      	ldr	r3, [r3, #0]
 23fea50:	6a1b      	ldr	r3, [r3, #32]
 23fea52:	9302      	str	r3, [sp, #8]
 23fea54:	bd09      	pop	{r0, r3, pc}
 23fea56:	0000      	.short	0x0000
 23fea58:	1007acf8 	.word	0x1007acf8
 23fea5c:	00000010 	.word	0x00000010

023fea60 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fea60:	b509      	push	{r0, r3, lr}
 23fea62:	4804      	ldr	r0, [pc, #16]	; (23fea74 <hal_i2c_available+0x14>)
 23fea64:	6800      	ldr	r0, [r0, #0]
 23fea66:	4b04      	ldr	r3, [pc, #16]	; (23fea78 <hal_i2c_available+0x18>)
 23fea68:	4403      	add	r3, r0
 23fea6a:	681b      	ldr	r3, [r3, #0]
 23fea6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fea6e:	9302      	str	r3, [sp, #8]
 23fea70:	bd09      	pop	{r0, r3, pc}
 23fea72:	0000      	.short	0x0000
 23fea74:	1007acf8 	.word	0x1007acf8
 23fea78:	00000010 	.word	0x00000010

023fea7c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fea7c:	b509      	push	{r0, r3, lr}
 23fea7e:	4804      	ldr	r0, [pc, #16]	; (23fea90 <hal_i2c_read+0x14>)
 23fea80:	6800      	ldr	r0, [r0, #0]
 23fea82:	4b04      	ldr	r3, [pc, #16]	; (23fea94 <hal_i2c_read+0x18>)
 23fea84:	4403      	add	r3, r0
 23fea86:	681b      	ldr	r3, [r3, #0]
 23fea88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fea8a:	9302      	str	r3, [sp, #8]
 23fea8c:	bd09      	pop	{r0, r3, pc}
 23fea8e:	0000      	.short	0x0000
 23fea90:	1007acf8 	.word	0x1007acf8
 23fea94:	00000010 	.word	0x00000010

023fea98 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fea98:	b509      	push	{r0, r3, lr}
 23fea9a:	4804      	ldr	r0, [pc, #16]	; (23feaac <hal_i2c_peek+0x14>)
 23fea9c:	6800      	ldr	r0, [r0, #0]
 23fea9e:	4b04      	ldr	r3, [pc, #16]	; (23feab0 <hal_i2c_peek+0x18>)
 23feaa0:	4403      	add	r3, r0
 23feaa2:	681b      	ldr	r3, [r3, #0]
 23feaa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23feaa6:	9302      	str	r3, [sp, #8]
 23feaa8:	bd09      	pop	{r0, r3, pc}
 23feaaa:	0000      	.short	0x0000
 23feaac:	1007acf8 	.word	0x1007acf8
 23feab0:	00000010 	.word	0x00000010

023feab4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23feab4:	b509      	push	{r0, r3, lr}
 23feab6:	4804      	ldr	r0, [pc, #16]	; (23feac8 <hal_i2c_flush+0x14>)
 23feab8:	6800      	ldr	r0, [r0, #0]
 23feaba:	4b04      	ldr	r3, [pc, #16]	; (23feacc <hal_i2c_flush+0x18>)
 23feabc:	4403      	add	r3, r0
 23feabe:	681b      	ldr	r3, [r3, #0]
 23feac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23feac2:	9302      	str	r3, [sp, #8]
 23feac4:	bd09      	pop	{r0, r3, pc}
 23feac6:	0000      	.short	0x0000
 23feac8:	1007acf8 	.word	0x1007acf8
 23feacc:	00000010 	.word	0x00000010

023fead0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fead0:	b509      	push	{r0, r3, lr}
 23fead2:	4804      	ldr	r0, [pc, #16]	; (23feae4 <hal_i2c_is_enabled+0x14>)
 23fead4:	6800      	ldr	r0, [r0, #0]
 23fead6:	4b04      	ldr	r3, [pc, #16]	; (23feae8 <hal_i2c_is_enabled+0x18>)
 23fead8:	4403      	add	r3, r0
 23feada:	681b      	ldr	r3, [r3, #0]
 23feadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23feade:	9302      	str	r3, [sp, #8]
 23feae0:	bd09      	pop	{r0, r3, pc}
 23feae2:	0000      	.short	0x0000
 23feae4:	1007acf8 	.word	0x1007acf8
 23feae8:	00000010 	.word	0x00000010

023feaec <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23feaec:	b509      	push	{r0, r3, lr}
 23feaee:	4804      	ldr	r0, [pc, #16]	; (23feb00 <hal_i2c_init+0x14>)
 23feaf0:	6800      	ldr	r0, [r0, #0]
 23feaf2:	4b04      	ldr	r3, [pc, #16]	; (23feb04 <hal_i2c_init+0x18>)
 23feaf4:	4403      	add	r3, r0
 23feaf6:	681b      	ldr	r3, [r3, #0]
 23feaf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23feafa:	9302      	str	r3, [sp, #8]
 23feafc:	bd09      	pop	{r0, r3, pc}
 23feafe:	0000      	.short	0x0000
 23feb00:	1007acf8 	.word	0x1007acf8
 23feb04:	00000010 	.word	0x00000010

023feb08 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23feb08:	b509      	push	{r0, r3, lr}
 23feb0a:	4804      	ldr	r0, [pc, #16]	; (23feb1c <inet_inet_ntop+0x14>)
 23feb0c:	6800      	ldr	r0, [r0, #0]
 23feb0e:	4b04      	ldr	r3, [pc, #16]	; (23feb20 <inet_inet_ntop+0x18>)
 23feb10:	4403      	add	r3, r0
 23feb12:	681b      	ldr	r3, [r3, #0]
 23feb14:	695b      	ldr	r3, [r3, #20]
 23feb16:	9302      	str	r3, [sp, #8]
 23feb18:	bd09      	pop	{r0, r3, pc}
 23feb1a:	0000      	.short	0x0000
 23feb1c:	1007acf8 	.word	0x1007acf8
 23feb20:	0000004c 	.word	0x0000004c

023feb24 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23feb24:	b509      	push	{r0, r3, lr}
 23feb26:	4804      	ldr	r0, [pc, #16]	; (23feb38 <netdb_freeaddrinfo+0x14>)
 23feb28:	6800      	ldr	r0, [r0, #0]
 23feb2a:	4b04      	ldr	r3, [pc, #16]	; (23feb3c <netdb_freeaddrinfo+0x18>)
 23feb2c:	4403      	add	r3, r0
 23feb2e:	681b      	ldr	r3, [r3, #0]
 23feb30:	689b      	ldr	r3, [r3, #8]
 23feb32:	9302      	str	r3, [sp, #8]
 23feb34:	bd09      	pop	{r0, r3, pc}
 23feb36:	0000      	.short	0x0000
 23feb38:	1007acf8 	.word	0x1007acf8
 23feb3c:	00000050 	.word	0x00000050

023feb40 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23feb40:	b509      	push	{r0, r3, lr}
 23feb42:	4804      	ldr	r0, [pc, #16]	; (23feb54 <netdb_getaddrinfo+0x14>)
 23feb44:	6800      	ldr	r0, [r0, #0]
 23feb46:	4b04      	ldr	r3, [pc, #16]	; (23feb58 <netdb_getaddrinfo+0x18>)
 23feb48:	4403      	add	r3, r0
 23feb4a:	681b      	ldr	r3, [r3, #0]
 23feb4c:	68db      	ldr	r3, [r3, #12]
 23feb4e:	9302      	str	r3, [sp, #8]
 23feb50:	bd09      	pop	{r0, r3, pc}
 23feb52:	0000      	.short	0x0000
 23feb54:	1007acf8 	.word	0x1007acf8
 23feb58:	00000050 	.word	0x00000050

023feb5c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23feb5c:	b509      	push	{r0, r3, lr}
 23feb5e:	4804      	ldr	r0, [pc, #16]	; (23feb70 <hal_spi_init+0x14>)
 23feb60:	6800      	ldr	r0, [r0, #0]
 23feb62:	4b04      	ldr	r3, [pc, #16]	; (23feb74 <hal_spi_init+0x18>)
 23feb64:	4403      	add	r3, r0
 23feb66:	681b      	ldr	r3, [r3, #0]
 23feb68:	69db      	ldr	r3, [r3, #28]
 23feb6a:	9302      	str	r3, [sp, #8]
 23feb6c:	bd09      	pop	{r0, r3, pc}
 23feb6e:	0000      	.short	0x0000
 23feb70:	1007acf8 	.word	0x1007acf8
 23feb74:	00000018 	.word	0x00000018

023feb78 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23feb78:	b509      	push	{r0, r3, lr}
 23feb7a:	4804      	ldr	r0, [pc, #16]	; (23feb8c <hal_spi_is_enabled+0x14>)
 23feb7c:	6800      	ldr	r0, [r0, #0]
 23feb7e:	4b04      	ldr	r3, [pc, #16]	; (23feb90 <hal_spi_is_enabled+0x18>)
 23feb80:	4403      	add	r3, r0
 23feb82:	681b      	ldr	r3, [r3, #0]
 23feb84:	6a1b      	ldr	r3, [r3, #32]
 23feb86:	9302      	str	r3, [sp, #8]
 23feb88:	bd09      	pop	{r0, r3, pc}
 23feb8a:	0000      	.short	0x0000
 23feb8c:	1007acf8 	.word	0x1007acf8
 23feb90:	00000018 	.word	0x00000018

023feb94 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23feb94:	b509      	push	{r0, r3, lr}
 23feb96:	4804      	ldr	r0, [pc, #16]	; (23feba8 <hal_usart_write+0x14>)
 23feb98:	6800      	ldr	r0, [r0, #0]
 23feb9a:	4b04      	ldr	r3, [pc, #16]	; (23febac <hal_usart_write+0x18>)
 23feb9c:	4403      	add	r3, r0
 23feb9e:	681b      	ldr	r3, [r3, #0]
 23feba0:	68db      	ldr	r3, [r3, #12]
 23feba2:	9302      	str	r3, [sp, #8]
 23feba4:	bd09      	pop	{r0, r3, pc}
 23feba6:	0000      	.short	0x0000
 23feba8:	1007acf8 	.word	0x1007acf8
 23febac:	00000024 	.word	0x00000024

023febb0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23febb0:	b509      	push	{r0, r3, lr}
 23febb2:	4804      	ldr	r0, [pc, #16]	; (23febc4 <hal_usart_available+0x14>)
 23febb4:	6800      	ldr	r0, [r0, #0]
 23febb6:	4b04      	ldr	r3, [pc, #16]	; (23febc8 <hal_usart_available+0x18>)
 23febb8:	4403      	add	r3, r0
 23febba:	681b      	ldr	r3, [r3, #0]
 23febbc:	691b      	ldr	r3, [r3, #16]
 23febbe:	9302      	str	r3, [sp, #8]
 23febc0:	bd09      	pop	{r0, r3, pc}
 23febc2:	0000      	.short	0x0000
 23febc4:	1007acf8 	.word	0x1007acf8
 23febc8:	00000024 	.word	0x00000024

023febcc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23febcc:	b509      	push	{r0, r3, lr}
 23febce:	4804      	ldr	r0, [pc, #16]	; (23febe0 <hal_usart_read+0x14>)
 23febd0:	6800      	ldr	r0, [r0, #0]
 23febd2:	4b04      	ldr	r3, [pc, #16]	; (23febe4 <hal_usart_read+0x18>)
 23febd4:	4403      	add	r3, r0
 23febd6:	681b      	ldr	r3, [r3, #0]
 23febd8:	695b      	ldr	r3, [r3, #20]
 23febda:	9302      	str	r3, [sp, #8]
 23febdc:	bd09      	pop	{r0, r3, pc}
 23febde:	0000      	.short	0x0000
 23febe0:	1007acf8 	.word	0x1007acf8
 23febe4:	00000024 	.word	0x00000024

023febe8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23febe8:	b509      	push	{r0, r3, lr}
 23febea:	4804      	ldr	r0, [pc, #16]	; (23febfc <hal_usart_peek+0x14>)
 23febec:	6800      	ldr	r0, [r0, #0]
 23febee:	4b04      	ldr	r3, [pc, #16]	; (23fec00 <hal_usart_peek+0x18>)
 23febf0:	4403      	add	r3, r0
 23febf2:	681b      	ldr	r3, [r3, #0]
 23febf4:	699b      	ldr	r3, [r3, #24]
 23febf6:	9302      	str	r3, [sp, #8]
 23febf8:	bd09      	pop	{r0, r3, pc}
 23febfa:	0000      	.short	0x0000
 23febfc:	1007acf8 	.word	0x1007acf8
 23fec00:	00000024 	.word	0x00000024

023fec04 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fec04:	b509      	push	{r0, r3, lr}
 23fec06:	4804      	ldr	r0, [pc, #16]	; (23fec18 <hal_usart_flush+0x14>)
 23fec08:	6800      	ldr	r0, [r0, #0]
 23fec0a:	4b04      	ldr	r3, [pc, #16]	; (23fec1c <hal_usart_flush+0x18>)
 23fec0c:	4403      	add	r3, r0
 23fec0e:	681b      	ldr	r3, [r3, #0]
 23fec10:	69db      	ldr	r3, [r3, #28]
 23fec12:	9302      	str	r3, [sp, #8]
 23fec14:	bd09      	pop	{r0, r3, pc}
 23fec16:	0000      	.short	0x0000
 23fec18:	1007acf8 	.word	0x1007acf8
 23fec1c:	00000024 	.word	0x00000024

023fec20 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fec20:	b509      	push	{r0, r3, lr}
 23fec22:	4804      	ldr	r0, [pc, #16]	; (23fec34 <hal_usart_is_enabled+0x14>)
 23fec24:	6800      	ldr	r0, [r0, #0]
 23fec26:	4b04      	ldr	r3, [pc, #16]	; (23fec38 <hal_usart_is_enabled+0x18>)
 23fec28:	4403      	add	r3, r0
 23fec2a:	681b      	ldr	r3, [r3, #0]
 23fec2c:	6a1b      	ldr	r3, [r3, #32]
 23fec2e:	9302      	str	r3, [sp, #8]
 23fec30:	bd09      	pop	{r0, r3, pc}
 23fec32:	0000      	.short	0x0000
 23fec34:	1007acf8 	.word	0x1007acf8
 23fec38:	00000024 	.word	0x00000024

023fec3c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fec3c:	b509      	push	{r0, r3, lr}
 23fec3e:	4804      	ldr	r0, [pc, #16]	; (23fec50 <hal_usart_available_data_for_write+0x14>)
 23fec40:	6800      	ldr	r0, [r0, #0]
 23fec42:	4b04      	ldr	r3, [pc, #16]	; (23fec54 <hal_usart_available_data_for_write+0x18>)
 23fec44:	4403      	add	r3, r0
 23fec46:	681b      	ldr	r3, [r3, #0]
 23fec48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fec4a:	9302      	str	r3, [sp, #8]
 23fec4c:	bd09      	pop	{r0, r3, pc}
 23fec4e:	0000      	.short	0x0000
 23fec50:	1007acf8 	.word	0x1007acf8
 23fec54:	00000024 	.word	0x00000024

023fec58 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fec58:	b509      	push	{r0, r3, lr}
 23fec5a:	4804      	ldr	r0, [pc, #16]	; (23fec6c <hal_usart_init_ex+0x14>)
 23fec5c:	6800      	ldr	r0, [r0, #0]
 23fec5e:	4b04      	ldr	r3, [pc, #16]	; (23fec70 <hal_usart_init_ex+0x18>)
 23fec60:	4403      	add	r3, r0
 23fec62:	681b      	ldr	r3, [r3, #0]
 23fec64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fec66:	9302      	str	r3, [sp, #8]
 23fec68:	bd09      	pop	{r0, r3, pc}
 23fec6a:	0000      	.short	0x0000
 23fec6c:	1007acf8 	.word	0x1007acf8
 23fec70:	00000024 	.word	0x00000024

023fec74 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fec74:	b509      	push	{r0, r3, lr}
 23fec76:	4804      	ldr	r0, [pc, #16]	; (23fec88 <HAL_USB_USART_Init+0x14>)
 23fec78:	6800      	ldr	r0, [r0, #0]
 23fec7a:	4b04      	ldr	r3, [pc, #16]	; (23fec8c <HAL_USB_USART_Init+0x18>)
 23fec7c:	4403      	add	r3, r0
 23fec7e:	681b      	ldr	r3, [r3, #0]
 23fec80:	681b      	ldr	r3, [r3, #0]
 23fec82:	9302      	str	r3, [sp, #8]
 23fec84:	bd09      	pop	{r0, r3, pc}
 23fec86:	0000      	.short	0x0000
 23fec88:	1007acf8 	.word	0x1007acf8
 23fec8c:	00000034 	.word	0x00000034

023fec90 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fec90:	b509      	push	{r0, r3, lr}
 23fec92:	4804      	ldr	r0, [pc, #16]	; (23feca4 <HAL_USB_USART_Begin+0x14>)
 23fec94:	6800      	ldr	r0, [r0, #0]
 23fec96:	4b04      	ldr	r3, [pc, #16]	; (23feca8 <HAL_USB_USART_Begin+0x18>)
 23fec98:	4403      	add	r3, r0
 23fec9a:	681b      	ldr	r3, [r3, #0]
 23fec9c:	685b      	ldr	r3, [r3, #4]
 23fec9e:	9302      	str	r3, [sp, #8]
 23feca0:	bd09      	pop	{r0, r3, pc}
 23feca2:	0000      	.short	0x0000
 23feca4:	1007acf8 	.word	0x1007acf8
 23feca8:	00000034 	.word	0x00000034

023fecac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fecac:	b509      	push	{r0, r3, lr}
 23fecae:	4804      	ldr	r0, [pc, #16]	; (23fecc0 <HAL_USB_USART_Available_Data+0x14>)
 23fecb0:	6800      	ldr	r0, [r0, #0]
 23fecb2:	4b04      	ldr	r3, [pc, #16]	; (23fecc4 <HAL_USB_USART_Available_Data+0x18>)
 23fecb4:	4403      	add	r3, r0
 23fecb6:	681b      	ldr	r3, [r3, #0]
 23fecb8:	691b      	ldr	r3, [r3, #16]
 23fecba:	9302      	str	r3, [sp, #8]
 23fecbc:	bd09      	pop	{r0, r3, pc}
 23fecbe:	0000      	.short	0x0000
 23fecc0:	1007acf8 	.word	0x1007acf8
 23fecc4:	00000034 	.word	0x00000034

023fecc8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fecc8:	b509      	push	{r0, r3, lr}
 23fecca:	4804      	ldr	r0, [pc, #16]	; (23fecdc <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23feccc:	6800      	ldr	r0, [r0, #0]
 23fecce:	4b04      	ldr	r3, [pc, #16]	; (23fece0 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fecd0:	4403      	add	r3, r0
 23fecd2:	681b      	ldr	r3, [r3, #0]
 23fecd4:	695b      	ldr	r3, [r3, #20]
 23fecd6:	9302      	str	r3, [sp, #8]
 23fecd8:	bd09      	pop	{r0, r3, pc}
 23fecda:	0000      	.short	0x0000
 23fecdc:	1007acf8 	.word	0x1007acf8
 23fece0:	00000034 	.word	0x00000034

023fece4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fece4:	b509      	push	{r0, r3, lr}
 23fece6:	4804      	ldr	r0, [pc, #16]	; (23fecf8 <HAL_USB_USART_Receive_Data+0x14>)
 23fece8:	6800      	ldr	r0, [r0, #0]
 23fecea:	4b04      	ldr	r3, [pc, #16]	; (23fecfc <HAL_USB_USART_Receive_Data+0x18>)
 23fecec:	4403      	add	r3, r0
 23fecee:	681b      	ldr	r3, [r3, #0]
 23fecf0:	699b      	ldr	r3, [r3, #24]
 23fecf2:	9302      	str	r3, [sp, #8]
 23fecf4:	bd09      	pop	{r0, r3, pc}
 23fecf6:	0000      	.short	0x0000
 23fecf8:	1007acf8 	.word	0x1007acf8
 23fecfc:	00000034 	.word	0x00000034

023fed00 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fed00:	b509      	push	{r0, r3, lr}
 23fed02:	4804      	ldr	r0, [pc, #16]	; (23fed14 <HAL_USB_USART_Send_Data+0x14>)
 23fed04:	6800      	ldr	r0, [r0, #0]
 23fed06:	4b04      	ldr	r3, [pc, #16]	; (23fed18 <HAL_USB_USART_Send_Data+0x18>)
 23fed08:	4403      	add	r3, r0
 23fed0a:	681b      	ldr	r3, [r3, #0]
 23fed0c:	69db      	ldr	r3, [r3, #28]
 23fed0e:	9302      	str	r3, [sp, #8]
 23fed10:	bd09      	pop	{r0, r3, pc}
 23fed12:	0000      	.short	0x0000
 23fed14:	1007acf8 	.word	0x1007acf8
 23fed18:	00000034 	.word	0x00000034

023fed1c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fed1c:	b509      	push	{r0, r3, lr}
 23fed1e:	4804      	ldr	r0, [pc, #16]	; (23fed30 <HAL_USB_USART_Flush_Data+0x14>)
 23fed20:	6800      	ldr	r0, [r0, #0]
 23fed22:	4b04      	ldr	r3, [pc, #16]	; (23fed34 <HAL_USB_USART_Flush_Data+0x18>)
 23fed24:	4403      	add	r3, r0
 23fed26:	681b      	ldr	r3, [r3, #0]
 23fed28:	6a1b      	ldr	r3, [r3, #32]
 23fed2a:	9302      	str	r3, [sp, #8]
 23fed2c:	bd09      	pop	{r0, r3, pc}
 23fed2e:	0000      	.short	0x0000
 23fed30:	1007acf8 	.word	0x1007acf8
 23fed34:	00000034 	.word	0x00000034

023fed38 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fed38:	b509      	push	{r0, r3, lr}
 23fed3a:	4804      	ldr	r0, [pc, #16]	; (23fed4c <set_system_mode+0x14>)
 23fed3c:	6800      	ldr	r0, [r0, #0]
 23fed3e:	4b04      	ldr	r3, [pc, #16]	; (23fed50 <set_system_mode+0x18>)
 23fed40:	4403      	add	r3, r0
 23fed42:	681b      	ldr	r3, [r3, #0]
 23fed44:	685b      	ldr	r3, [r3, #4]
 23fed46:	9302      	str	r3, [sp, #8]
 23fed48:	bd09      	pop	{r0, r3, pc}
 23fed4a:	0000      	.short	0x0000
 23fed4c:	1007acf8 	.word	0x1007acf8
 23fed50:	00000008 	.word	0x00000008

023fed54 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fed54:	b509      	push	{r0, r3, lr}
 23fed56:	4804      	ldr	r0, [pc, #16]	; (23fed68 <system_delay_ms+0x14>)
 23fed58:	6800      	ldr	r0, [r0, #0]
 23fed5a:	4b04      	ldr	r3, [pc, #16]	; (23fed6c <system_delay_ms+0x18>)
 23fed5c:	4403      	add	r3, r0
 23fed5e:	681b      	ldr	r3, [r3, #0]
 23fed60:	695b      	ldr	r3, [r3, #20]
 23fed62:	9302      	str	r3, [sp, #8]
 23fed64:	bd09      	pop	{r0, r3, pc}
 23fed66:	0000      	.short	0x0000
 23fed68:	1007acf8 	.word	0x1007acf8
 23fed6c:	00000008 	.word	0x00000008

023fed70 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fed70:	b509      	push	{r0, r3, lr}
 23fed72:	4804      	ldr	r0, [pc, #16]	; (23fed84 <system_ctrl_set_app_request_handler+0x14>)
 23fed74:	6800      	ldr	r0, [r0, #0]
 23fed76:	4b04      	ldr	r3, [pc, #16]	; (23fed88 <system_ctrl_set_app_request_handler+0x18>)
 23fed78:	4403      	add	r3, r0
 23fed7a:	681b      	ldr	r3, [r3, #0]
 23fed7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fed80:	9302      	str	r3, [sp, #8]
 23fed82:	bd09      	pop	{r0, r3, pc}
 23fed84:	1007acf8 	.word	0x1007acf8
 23fed88:	00000008 	.word	0x00000008

023fed8c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fed8c:	b509      	push	{r0, r3, lr}
 23fed8e:	4804      	ldr	r0, [pc, #16]	; (23feda0 <system_ctrl_set_result+0x14>)
 23fed90:	6800      	ldr	r0, [r0, #0]
 23fed92:	4b04      	ldr	r3, [pc, #16]	; (23feda4 <system_ctrl_set_result+0x18>)
 23fed94:	4403      	add	r3, r0
 23fed96:	681b      	ldr	r3, [r3, #0]
 23fed98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fed9c:	9302      	str	r3, [sp, #8]
 23fed9e:	bd09      	pop	{r0, r3, pc}
 23feda0:	1007acf8 	.word	0x1007acf8
 23feda4:	00000008 	.word	0x00000008

023feda8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23feda8:	b509      	push	{r0, r3, lr}
 23fedaa:	4804      	ldr	r0, [pc, #16]	; (23fedbc <spark_set_random_seed_from_cloud_handler+0x14>)
 23fedac:	6800      	ldr	r0, [r0, #0]
 23fedae:	4b04      	ldr	r3, [pc, #16]	; (23fedc0 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fedb0:	4403      	add	r3, r0
 23fedb2:	681b      	ldr	r3, [r3, #0]
 23fedb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fedb6:	9302      	str	r3, [sp, #8]
 23fedb8:	bd09      	pop	{r0, r3, pc}
 23fedba:	0000      	.short	0x0000
 23fedbc:	1007acf8 	.word	0x1007acf8
 23fedc0:	0000002c 	.word	0x0000002c

023fedc4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fedc4:	b509      	push	{r0, r3, lr}
 23fedc6:	4804      	ldr	r0, [pc, #16]	; (23fedd8 <network_connect+0x14>)
 23fedc8:	6800      	ldr	r0, [r0, #0]
 23fedca:	4b04      	ldr	r3, [pc, #16]	; (23feddc <network_connect+0x18>)
 23fedcc:	4403      	add	r3, r0
 23fedce:	681b      	ldr	r3, [r3, #0]
 23fedd0:	685b      	ldr	r3, [r3, #4]
 23fedd2:	9302      	str	r3, [sp, #8]
 23fedd4:	bd09      	pop	{r0, r3, pc}
 23fedd6:	0000      	.short	0x0000
 23fedd8:	1007acf8 	.word	0x1007acf8
 23feddc:	00000028 	.word	0x00000028

023fede0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fede0:	b509      	push	{r0, r3, lr}
 23fede2:	4804      	ldr	r0, [pc, #16]	; (23fedf4 <network_connecting+0x14>)
 23fede4:	6800      	ldr	r0, [r0, #0]
 23fede6:	4b04      	ldr	r3, [pc, #16]	; (23fedf8 <network_connecting+0x18>)
 23fede8:	4403      	add	r3, r0
 23fedea:	681b      	ldr	r3, [r3, #0]
 23fedec:	689b      	ldr	r3, [r3, #8]
 23fedee:	9302      	str	r3, [sp, #8]
 23fedf0:	bd09      	pop	{r0, r3, pc}
 23fedf2:	0000      	.short	0x0000
 23fedf4:	1007acf8 	.word	0x1007acf8
 23fedf8:	00000028 	.word	0x00000028

023fedfc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fedfc:	b509      	push	{r0, r3, lr}
 23fedfe:	4804      	ldr	r0, [pc, #16]	; (23fee10 <network_disconnect+0x14>)
 23fee00:	6800      	ldr	r0, [r0, #0]
 23fee02:	4b04      	ldr	r3, [pc, #16]	; (23fee14 <network_disconnect+0x18>)
 23fee04:	4403      	add	r3, r0
 23fee06:	681b      	ldr	r3, [r3, #0]
 23fee08:	68db      	ldr	r3, [r3, #12]
 23fee0a:	9302      	str	r3, [sp, #8]
 23fee0c:	bd09      	pop	{r0, r3, pc}
 23fee0e:	0000      	.short	0x0000
 23fee10:	1007acf8 	.word	0x1007acf8
 23fee14:	00000028 	.word	0x00000028

023fee18 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fee18:	b509      	push	{r0, r3, lr}
 23fee1a:	4804      	ldr	r0, [pc, #16]	; (23fee2c <network_ready+0x14>)
 23fee1c:	6800      	ldr	r0, [r0, #0]
 23fee1e:	4b04      	ldr	r3, [pc, #16]	; (23fee30 <network_ready+0x18>)
 23fee20:	4403      	add	r3, r0
 23fee22:	681b      	ldr	r3, [r3, #0]
 23fee24:	691b      	ldr	r3, [r3, #16]
 23fee26:	9302      	str	r3, [sp, #8]
 23fee28:	bd09      	pop	{r0, r3, pc}
 23fee2a:	0000      	.short	0x0000
 23fee2c:	1007acf8 	.word	0x1007acf8
 23fee30:	00000028 	.word	0x00000028

023fee34 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fee34:	b509      	push	{r0, r3, lr}
 23fee36:	4804      	ldr	r0, [pc, #16]	; (23fee48 <network_on+0x14>)
 23fee38:	6800      	ldr	r0, [r0, #0]
 23fee3a:	4b04      	ldr	r3, [pc, #16]	; (23fee4c <network_on+0x18>)
 23fee3c:	4403      	add	r3, r0
 23fee3e:	681b      	ldr	r3, [r3, #0]
 23fee40:	695b      	ldr	r3, [r3, #20]
 23fee42:	9302      	str	r3, [sp, #8]
 23fee44:	bd09      	pop	{r0, r3, pc}
 23fee46:	0000      	.short	0x0000
 23fee48:	1007acf8 	.word	0x1007acf8
 23fee4c:	00000028 	.word	0x00000028

023fee50 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fee50:	b509      	push	{r0, r3, lr}
 23fee52:	4804      	ldr	r0, [pc, #16]	; (23fee64 <network_off+0x14>)
 23fee54:	6800      	ldr	r0, [r0, #0]
 23fee56:	4b04      	ldr	r3, [pc, #16]	; (23fee68 <network_off+0x18>)
 23fee58:	4403      	add	r3, r0
 23fee5a:	681b      	ldr	r3, [r3, #0]
 23fee5c:	699b      	ldr	r3, [r3, #24]
 23fee5e:	9302      	str	r3, [sp, #8]
 23fee60:	bd09      	pop	{r0, r3, pc}
 23fee62:	0000      	.short	0x0000
 23fee64:	1007acf8 	.word	0x1007acf8
 23fee68:	00000028 	.word	0x00000028

023fee6c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fee6c:	b509      	push	{r0, r3, lr}
 23fee6e:	4804      	ldr	r0, [pc, #16]	; (23fee80 <network_listen+0x14>)
 23fee70:	6800      	ldr	r0, [r0, #0]
 23fee72:	4b04      	ldr	r3, [pc, #16]	; (23fee84 <network_listen+0x18>)
 23fee74:	4403      	add	r3, r0
 23fee76:	681b      	ldr	r3, [r3, #0]
 23fee78:	69db      	ldr	r3, [r3, #28]
 23fee7a:	9302      	str	r3, [sp, #8]
 23fee7c:	bd09      	pop	{r0, r3, pc}
 23fee7e:	0000      	.short	0x0000
 23fee80:	1007acf8 	.word	0x1007acf8
 23fee84:	00000028 	.word	0x00000028

023fee88 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fee88:	b509      	push	{r0, r3, lr}
 23fee8a:	4804      	ldr	r0, [pc, #16]	; (23fee9c <network_listening+0x14>)
 23fee8c:	6800      	ldr	r0, [r0, #0]
 23fee8e:	4b04      	ldr	r3, [pc, #16]	; (23feea0 <network_listening+0x18>)
 23fee90:	4403      	add	r3, r0
 23fee92:	681b      	ldr	r3, [r3, #0]
 23fee94:	6a1b      	ldr	r3, [r3, #32]
 23fee96:	9302      	str	r3, [sp, #8]
 23fee98:	bd09      	pop	{r0, r3, pc}
 23fee9a:	0000      	.short	0x0000
 23fee9c:	1007acf8 	.word	0x1007acf8
 23feea0:	00000028 	.word	0x00000028

023feea4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23feea4:	b509      	push	{r0, r3, lr}
 23feea6:	4804      	ldr	r0, [pc, #16]	; (23feeb8 <network_set_listen_timeout+0x14>)
 23feea8:	6800      	ldr	r0, [r0, #0]
 23feeaa:	4b04      	ldr	r3, [pc, #16]	; (23feebc <network_set_listen_timeout+0x18>)
 23feeac:	4403      	add	r3, r0
 23feeae:	681b      	ldr	r3, [r3, #0]
 23feeb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23feeb2:	9302      	str	r3, [sp, #8]
 23feeb4:	bd09      	pop	{r0, r3, pc}
 23feeb6:	0000      	.short	0x0000
 23feeb8:	1007acf8 	.word	0x1007acf8
 23feebc:	00000028 	.word	0x00000028

023feec0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23feec0:	b509      	push	{r0, r3, lr}
 23feec2:	4804      	ldr	r0, [pc, #16]	; (23feed4 <network_get_listen_timeout+0x14>)
 23feec4:	6800      	ldr	r0, [r0, #0]
 23feec6:	4b04      	ldr	r3, [pc, #16]	; (23feed8 <network_get_listen_timeout+0x18>)
 23feec8:	4403      	add	r3, r0
 23feeca:	681b      	ldr	r3, [r3, #0]
 23feecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23feece:	9302      	str	r3, [sp, #8]
 23feed0:	bd09      	pop	{r0, r3, pc}
 23feed2:	0000      	.short	0x0000
 23feed4:	1007acf8 	.word	0x1007acf8
 23feed8:	00000028 	.word	0x00000028

023feedc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23feedc:	b509      	push	{r0, r3, lr}
 23feede:	4804      	ldr	r0, [pc, #16]	; (23feef0 <network_is_on+0x14>)
 23feee0:	6800      	ldr	r0, [r0, #0]
 23feee2:	4b04      	ldr	r3, [pc, #16]	; (23feef4 <network_is_on+0x18>)
 23feee4:	4403      	add	r3, r0
 23feee6:	681b      	ldr	r3, [r3, #0]
 23feee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23feeea:	9302      	str	r3, [sp, #8]
 23feeec:	bd09      	pop	{r0, r3, pc}
 23feeee:	0000      	.short	0x0000
 23feef0:	1007acf8 	.word	0x1007acf8
 23feef4:	00000028 	.word	0x00000028

023feef8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23feef8:	b509      	push	{r0, r3, lr}
 23feefa:	4804      	ldr	r0, [pc, #16]	; (23fef0c <network_is_off+0x14>)
 23feefc:	6800      	ldr	r0, [r0, #0]
 23feefe:	4b04      	ldr	r3, [pc, #16]	; (23fef10 <network_is_off+0x18>)
 23fef00:	4403      	add	r3, r0
 23fef02:	681b      	ldr	r3, [r3, #0]
 23fef04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fef06:	9302      	str	r3, [sp, #8]
 23fef08:	bd09      	pop	{r0, r3, pc}
 23fef0a:	0000      	.short	0x0000
 23fef0c:	1007acf8 	.word	0x1007acf8
 23fef10:	00000028 	.word	0x00000028

023fef14 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fef14:	b509      	push	{r0, r3, lr}
 23fef16:	4804      	ldr	r0, [pc, #16]	; (23fef28 <malloc+0x14>)
 23fef18:	6800      	ldr	r0, [r0, #0]
 23fef1a:	4b04      	ldr	r3, [pc, #16]	; (23fef2c <malloc+0x18>)
 23fef1c:	4403      	add	r3, r0
 23fef1e:	681b      	ldr	r3, [r3, #0]
 23fef20:	681b      	ldr	r3, [r3, #0]
 23fef22:	9302      	str	r3, [sp, #8]
 23fef24:	bd09      	pop	{r0, r3, pc}
 23fef26:	0000      	.short	0x0000
 23fef28:	1007acf8 	.word	0x1007acf8
 23fef2c:	00000004 	.word	0x00000004

023fef30 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fef30:	b509      	push	{r0, r3, lr}
 23fef32:	4804      	ldr	r0, [pc, #16]	; (23fef44 <free+0x14>)
 23fef34:	6800      	ldr	r0, [r0, #0]
 23fef36:	4b04      	ldr	r3, [pc, #16]	; (23fef48 <free+0x18>)
 23fef38:	4403      	add	r3, r0
 23fef3a:	681b      	ldr	r3, [r3, #0]
 23fef3c:	685b      	ldr	r3, [r3, #4]
 23fef3e:	9302      	str	r3, [sp, #8]
 23fef40:	bd09      	pop	{r0, r3, pc}
 23fef42:	0000      	.short	0x0000
 23fef44:	1007acf8 	.word	0x1007acf8
 23fef48:	00000004 	.word	0x00000004

023fef4c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fef4c:	b509      	push	{r0, r3, lr}
 23fef4e:	4804      	ldr	r0, [pc, #16]	; (23fef60 <__assert_func+0x14>)
 23fef50:	6800      	ldr	r0, [r0, #0]
 23fef52:	4b04      	ldr	r3, [pc, #16]	; (23fef64 <__assert_func+0x18>)
 23fef54:	4403      	add	r3, r0
 23fef56:	681b      	ldr	r3, [r3, #0]
 23fef58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fef5a:	9302      	str	r3, [sp, #8]
 23fef5c:	bd09      	pop	{r0, r3, pc}
 23fef5e:	0000      	.short	0x0000
 23fef60:	1007acf8 	.word	0x1007acf8
 23fef64:	00000004 	.word	0x00000004

023fef68 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fef68:	b509      	push	{r0, r3, lr}
 23fef6a:	4804      	ldr	r0, [pc, #16]	; (23fef7c <newlib_impure_ptr_callback+0x14>)
 23fef6c:	6800      	ldr	r0, [r0, #0]
 23fef6e:	4b04      	ldr	r3, [pc, #16]	; (23fef80 <newlib_impure_ptr_callback+0x18>)
 23fef70:	4403      	add	r3, r0
 23fef72:	681b      	ldr	r3, [r3, #0]
 23fef74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fef76:	9302      	str	r3, [sp, #8]
 23fef78:	bd09      	pop	{r0, r3, pc}
 23fef7a:	0000      	.short	0x0000
 23fef7c:	1007acf8 	.word	0x1007acf8
 23fef80:	00000004 	.word	0x00000004

023fef84 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 23fef84:	428a      	cmp	r2, r1
{
 23fef86:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
 23fef88:	d007      	beq.n	23fef9a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 23fef8a:	1a44      	subs	r4, r0, r1
 23fef8c:	9802      	ldr	r0, [sp, #8]
 23fef8e:	1ac0      	subs	r0, r0, r3
 23fef90:	4344      	muls	r4, r0
 23fef92:	1a50      	subs	r0, r2, r1
 23fef94:	fb94 f0f0 	sdiv	r0, r4, r0
 23fef98:	4418      	add	r0, r3
}
 23fef9a:	bd10      	pop	{r4, pc}

023fef9c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fef9c:	2100      	movs	r1, #0
 23fef9e:	f7ff bed9 	b.w	23fed54 <system_delay_ms>
	...

023fefa4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fefa4:	2300      	movs	r3, #0
 23fefa6:	4802      	ldr	r0, [pc, #8]	; (23fefb0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fefa8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fefaa:	f7ff bcf7 	b.w	23fe99c <os_mutex_recursive_create>
 23fefae:	bf00      	nop
 23fefb0:	1007ae80 	.word	0x1007ae80

023fefb4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fefb4:	2200      	movs	r2, #0
 23fefb6:	6840      	ldr	r0, [r0, #4]
 23fefb8:	4611      	mov	r1, r2
 23fefba:	f7ff bf65 	b.w	23fee88 <network_listening>

023fefbe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fefbe:	2200      	movs	r2, #0
 23fefc0:	6840      	ldr	r0, [r0, #4]
 23fefc2:	4611      	mov	r1, r2
 23fefc4:	f7ff bf7c 	b.w	23feec0 <network_get_listen_timeout>

023fefc8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fefc8:	2200      	movs	r2, #0
 23fefca:	6840      	ldr	r0, [r0, #4]
 23fefcc:	f7ff bf6a 	b.w	23feea4 <network_set_listen_timeout>

023fefd0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fefd0:	2200      	movs	r2, #0
 23fefd2:	6840      	ldr	r0, [r0, #4]
 23fefd4:	f081 0101 	eor.w	r1, r1, #1
 23fefd8:	f7ff bf48 	b.w	23fee6c <network_listen>

023fefdc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fefdc:	2300      	movs	r3, #0
 23fefde:	6840      	ldr	r0, [r0, #4]
 23fefe0:	461a      	mov	r2, r3
 23fefe2:	4619      	mov	r1, r3
 23fefe4:	f7ff bf34 	b.w	23fee50 <network_off>

023fefe8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fefe8:	2300      	movs	r3, #0
 23fefea:	6840      	ldr	r0, [r0, #4]
 23fefec:	461a      	mov	r2, r3
 23fefee:	4619      	mov	r1, r3
 23feff0:	f7ff bf20 	b.w	23fee34 <network_on>

023feff4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23feff4:	2200      	movs	r2, #0
 23feff6:	6840      	ldr	r0, [r0, #4]
 23feff8:	4611      	mov	r1, r2
 23feffa:	f7ff bf0d 	b.w	23fee18 <network_ready>

023feffe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23feffe:	2200      	movs	r2, #0
 23ff000:	6840      	ldr	r0, [r0, #4]
 23ff002:	4611      	mov	r1, r2
 23ff004:	f7ff beec 	b.w	23fede0 <network_connecting>

023ff008 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff008:	2200      	movs	r2, #0
 23ff00a:	2102      	movs	r1, #2
 23ff00c:	6840      	ldr	r0, [r0, #4]
 23ff00e:	f7ff bef5 	b.w	23fedfc <network_disconnect>

023ff012 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff012:	2300      	movs	r3, #0
 23ff014:	6840      	ldr	r0, [r0, #4]
 23ff016:	461a      	mov	r2, r3
 23ff018:	f7ff bed4 	b.w	23fedc4 <network_connect>

023ff01c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23ff01c:	2203      	movs	r2, #3
 23ff01e:	4b02      	ldr	r3, [pc, #8]	; (23ff028 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23ff020:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23ff022:	4a02      	ldr	r2, [pc, #8]	; (23ff02c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23ff024:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23ff026:	4770      	bx	lr
 23ff028:	1007ae84 	.word	0x1007ae84
 23ff02c:	023ffdec 	.word	0x023ffdec

023ff030 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23ff030:	4770      	bx	lr

023ff032 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23ff032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff034:	4606      	mov	r6, r0
 23ff036:	4615      	mov	r5, r2
 23ff038:	460c      	mov	r4, r1
 23ff03a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23ff03c:	42bc      	cmp	r4, r7
 23ff03e:	d006      	beq.n	23ff04e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23ff040:	6833      	ldr	r3, [r6, #0]
 23ff042:	4630      	mov	r0, r6
 23ff044:	689b      	ldr	r3, [r3, #8]
 23ff046:	f814 1b01 	ldrb.w	r1, [r4], #1
 23ff04a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23ff04c:	e7f6      	b.n	23ff03c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23ff04e:	4628      	mov	r0, r5
 23ff050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff052 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23ff052:	2200      	movs	r2, #0
 23ff054:	7c00      	ldrb	r0, [r0, #16]
 23ff056:	f7ff bcf5 	b.w	23fea44 <hal_i2c_write>

023ff05a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23ff05a:	2100      	movs	r1, #0
 23ff05c:	7c00      	ldrb	r0, [r0, #16]
 23ff05e:	f7ff bcff 	b.w	23fea60 <hal_i2c_available>

023ff062 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23ff062:	2100      	movs	r1, #0
 23ff064:	7c00      	ldrb	r0, [r0, #16]
 23ff066:	f7ff bd09 	b.w	23fea7c <hal_i2c_read>

023ff06a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23ff06a:	2100      	movs	r1, #0
 23ff06c:	7c00      	ldrb	r0, [r0, #16]
 23ff06e:	f7ff bd13 	b.w	23fea98 <hal_i2c_peek>

023ff072 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23ff072:	2100      	movs	r1, #0
 23ff074:	7c00      	ldrb	r0, [r0, #16]
 23ff076:	f7ff bd1d 	b.w	23feab4 <hal_i2c_flush>

023ff07a <_ZN7TwoWireD0Ev>:
 23ff07a:	b510      	push	{r4, lr}
 23ff07c:	4604      	mov	r4, r0
 23ff07e:	2114      	movs	r1, #20
 23ff080:	f7ff fa85 	bl	23fe58e <_ZdlPvj>
 23ff084:	4620      	mov	r0, r4
 23ff086:	bd10      	pop	{r4, pc}

023ff088 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23ff088:	b538      	push	{r3, r4, r5, lr}
 23ff08a:	4604      	mov	r4, r0
 23ff08c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23ff08e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff092:	2200      	movs	r2, #0
 23ff094:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff098:	4b09      	ldr	r3, [pc, #36]	; (23ff0c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23ff09a:	4608      	mov	r0, r1
  _i2c = i2c;
 23ff09c:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23ff09e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23ff0a0:	4629      	mov	r1, r5
 23ff0a2:	f7ff fd23 	bl	23feaec <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23ff0a6:	30bf      	adds	r0, #191	; 0xbf
 23ff0a8:	d108      	bne.n	23ff0bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23ff0aa:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23ff0ac:	07db      	lsls	r3, r3, #31
 23ff0ae:	d505      	bpl.n	23ff0bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23ff0b0:	6868      	ldr	r0, [r5, #4]
 23ff0b2:	f7ff ff3d 	bl	23fef30 <free>
    free(conf.tx_buffer);
 23ff0b6:	68e8      	ldr	r0, [r5, #12]
 23ff0b8:	f7ff ff3a 	bl	23fef30 <free>
}
 23ff0bc:	4620      	mov	r0, r4
 23ff0be:	bd38      	pop	{r3, r4, r5, pc}
 23ff0c0:	023ffe28 	.word	0x023ffe28

023ff0c4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23ff0c4:	4770      	bx	lr

023ff0c6 <_ZN9IPAddressD0Ev>:
 23ff0c6:	b510      	push	{r4, lr}
 23ff0c8:	4604      	mov	r4, r0
 23ff0ca:	2118      	movs	r1, #24
 23ff0cc:	f7ff fa5f 	bl	23fe58e <_ZdlPvj>
 23ff0d0:	4620      	mov	r0, r4
 23ff0d2:	bd10      	pop	{r4, pc}

023ff0d4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23ff0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23ff0d6:	7d03      	ldrb	r3, [r0, #20]
{
 23ff0d8:	460e      	mov	r6, r1
	if (address.v==6) {
 23ff0da:	2b06      	cmp	r3, #6
 23ff0dc:	f04f 0400 	mov.w	r4, #0
{
 23ff0e0:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff0e2:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23ff0e6:	d012      	beq.n	23ff10e <_ZNK9IPAddress7printToER5Print+0x3a>
 23ff0e8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23ff0ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23ff0f0:	220a      	movs	r2, #10
 23ff0f2:	4630      	mov	r0, r6
 23ff0f4:	f000 f95d 	bl	23ff3b2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23ff0f8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23ff0fa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23ff0fc:	d019      	beq.n	23ff132 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23ff0fe:	2c00      	cmp	r4, #0
 23ff100:	d0f4      	beq.n	23ff0ec <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23ff102:	212e      	movs	r1, #46	; 0x2e
 23ff104:	4630      	mov	r0, r6
 23ff106:	f000 f93b 	bl	23ff380 <_ZN5Print5printEc>
 23ff10a:	4404      	add	r4, r0
 23ff10c:	e7ee      	b.n	23ff0ec <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff10e:	232f      	movs	r3, #47	; 0x2f
 23ff110:	466a      	mov	r2, sp
 23ff112:	4639      	mov	r1, r7
 23ff114:	200a      	movs	r0, #10
		buf[0] = 0;
 23ff116:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff11a:	f7ff fcf5 	bl	23feb08 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23ff11e:	4668      	mov	r0, sp
 23ff120:	f7ff fa0e 	bl	23fe540 <strlen>
 23ff124:	6833      	ldr	r3, [r6, #0]
 23ff126:	4602      	mov	r2, r0
 23ff128:	4669      	mov	r1, sp
 23ff12a:	4630      	mov	r0, r6
 23ff12c:	68db      	ldr	r3, [r3, #12]
 23ff12e:	4798      	blx	r3
 23ff130:	4604      	mov	r4, r0
    }
    return n;
}
 23ff132:	4620      	mov	r0, r4
 23ff134:	b00d      	add	sp, #52	; 0x34
 23ff136:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff138 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23ff138:	b510      	push	{r4, lr}
 23ff13a:	4604      	mov	r4, r0
 23ff13c:	4b04      	ldr	r3, [pc, #16]	; (23ff150 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23ff13e:	2211      	movs	r2, #17
 23ff140:	2100      	movs	r1, #0
 23ff142:	f840 3b04 	str.w	r3, [r0], #4
 23ff146:	f000 fd8a 	bl	23ffc5e <memset>
}
 23ff14a:	4620      	mov	r0, r4
 23ff14c:	bd10      	pop	{r4, pc}
 23ff14e:	bf00      	nop
 23ff150:	023ffe50 	.word	0x023ffe50

023ff154 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23ff154:	4603      	mov	r3, r0
 23ff156:	4a07      	ldr	r2, [pc, #28]	; (23ff174 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23ff158:	b510      	push	{r4, lr}
 23ff15a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23ff15e:	f101 0210 	add.w	r2, r1, #16
 23ff162:	f851 4b04 	ldr.w	r4, [r1], #4
 23ff166:	4291      	cmp	r1, r2
 23ff168:	f843 4b04 	str.w	r4, [r3], #4
 23ff16c:	d1f9      	bne.n	23ff162 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23ff16e:	780a      	ldrb	r2, [r1, #0]
 23ff170:	701a      	strb	r2, [r3, #0]
}
 23ff172:	bd10      	pop	{r4, pc}
 23ff174:	023ffe50 	.word	0x023ffe50

023ff178 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23ff178:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23ff17a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23ff17e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23ff182:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23ff186:	2304      	movs	r3, #4
 23ff188:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23ff18c:	6041      	str	r1, [r0, #4]
 23ff18e:	7503      	strb	r3, [r0, #20]
}
 23ff190:	bd10      	pop	{r4, pc}
	...

023ff194 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23ff194:	b507      	push	{r0, r1, r2, lr}
 23ff196:	4b06      	ldr	r3, [pc, #24]	; (23ff1b0 <_ZN9IPAddressC1EPKh+0x1c>)
 23ff198:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23ff19a:	78cb      	ldrb	r3, [r1, #3]
 23ff19c:	9300      	str	r3, [sp, #0]
 23ff19e:	788b      	ldrb	r3, [r1, #2]
 23ff1a0:	784a      	ldrb	r2, [r1, #1]
 23ff1a2:	7809      	ldrb	r1, [r1, #0]
 23ff1a4:	f7ff ffe8 	bl	23ff178 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23ff1a8:	b003      	add	sp, #12
 23ff1aa:	f85d fb04 	ldr.w	pc, [sp], #4
 23ff1ae:	bf00      	nop
 23ff1b0:	023ffe50 	.word	0x023ffe50

023ff1b4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23ff1b4:	4b01      	ldr	r3, [pc, #4]	; (23ff1bc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23ff1b6:	4a02      	ldr	r2, [pc, #8]	; (23ff1c0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23ff1b8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23ff1ba:	4770      	bx	lr
 23ff1bc:	1007ae8c 	.word	0x1007ae8c
 23ff1c0:	023ffe5c 	.word	0x023ffe5c

023ff1c4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23ff1c4:	2300      	movs	r3, #0
 23ff1c6:	6840      	ldr	r0, [r0, #4]
 23ff1c8:	461a      	mov	r2, r3
 23ff1ca:	f7ff bdfb 	b.w	23fedc4 <network_connect>

023ff1ce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23ff1ce:	2200      	movs	r2, #0
 23ff1d0:	2102      	movs	r1, #2
 23ff1d2:	6840      	ldr	r0, [r0, #4]
 23ff1d4:	f7ff be12 	b.w	23fedfc <network_disconnect>

023ff1d8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23ff1d8:	2200      	movs	r2, #0
 23ff1da:	6840      	ldr	r0, [r0, #4]
 23ff1dc:	4611      	mov	r1, r2
 23ff1de:	f7ff bdff 	b.w	23fede0 <network_connecting>

023ff1e2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23ff1e2:	2200      	movs	r2, #0
 23ff1e4:	6840      	ldr	r0, [r0, #4]
 23ff1e6:	4611      	mov	r1, r2
 23ff1e8:	f7ff be16 	b.w	23fee18 <network_ready>

023ff1ec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23ff1ec:	2300      	movs	r3, #0
 23ff1ee:	6840      	ldr	r0, [r0, #4]
 23ff1f0:	461a      	mov	r2, r3
 23ff1f2:	4619      	mov	r1, r3
 23ff1f4:	f7ff be1e 	b.w	23fee34 <network_on>

023ff1f8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23ff1f8:	2300      	movs	r3, #0
 23ff1fa:	6840      	ldr	r0, [r0, #4]
 23ff1fc:	461a      	mov	r2, r3
 23ff1fe:	4619      	mov	r1, r3
 23ff200:	f7ff be26 	b.w	23fee50 <network_off>

023ff204 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23ff204:	2100      	movs	r1, #0
 23ff206:	6840      	ldr	r0, [r0, #4]
 23ff208:	f7ff be68 	b.w	23feedc <network_is_on>

023ff20c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23ff20c:	2100      	movs	r1, #0
 23ff20e:	6840      	ldr	r0, [r0, #4]
 23ff210:	f7ff be72 	b.w	23feef8 <network_is_off>

023ff214 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23ff214:	2200      	movs	r2, #0
 23ff216:	6840      	ldr	r0, [r0, #4]
 23ff218:	f081 0101 	eor.w	r1, r1, #1
 23ff21c:	f7ff be26 	b.w	23fee6c <network_listen>

023ff220 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23ff220:	2200      	movs	r2, #0
 23ff222:	6840      	ldr	r0, [r0, #4]
 23ff224:	f7ff be3e 	b.w	23feea4 <network_set_listen_timeout>

023ff228 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23ff228:	2200      	movs	r2, #0
 23ff22a:	6840      	ldr	r0, [r0, #4]
 23ff22c:	4611      	mov	r1, r2
 23ff22e:	f7ff be47 	b.w	23feec0 <network_get_listen_timeout>

023ff232 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23ff232:	2200      	movs	r2, #0
 23ff234:	6840      	ldr	r0, [r0, #4]
 23ff236:	4611      	mov	r1, r2
 23ff238:	f7ff be26 	b.w	23fee88 <network_listening>

023ff23c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23ff23c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ff240:	b095      	sub	sp, #84	; 0x54
 23ff242:	4614      	mov	r4, r2
 23ff244:	460d      	mov	r5, r1
 23ff246:	4607      	mov	r7, r0
    IPAddress addr;
 23ff248:	f7ff ff76 	bl	23ff138 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23ff24c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23ff24e:	221c      	movs	r2, #28
 23ff250:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23ff252:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23ff254:	f000 fd03 	bl	23ffc5e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23ff258:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff25a:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23ff25c:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff25e:	2100      	movs	r1, #0
 23ff260:	466b      	mov	r3, sp
 23ff262:	aa0c      	add	r2, sp, #48	; 0x30
 23ff264:	f7ff fc6c 	bl	23feb40 <netdb_getaddrinfo>
    if (!r) {
 23ff268:	4604      	mov	r4, r0
 23ff26a:	2800      	cmp	r0, #0
 23ff26c:	d14b      	bne.n	23ff306 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff26e:	4602      	mov	r2, r0
 23ff270:	2101      	movs	r1, #1
 23ff272:	6868      	ldr	r0, [r5, #4]
 23ff274:	f7ff fdd0 	bl	23fee18 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff278:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff27a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff27c:	4622      	mov	r2, r4
 23ff27e:	6868      	ldr	r0, [r5, #4]
 23ff280:	f7ff fdca 	bl	23fee18 <network_ready>
        bool ok = false;
 23ff284:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff286:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff288:	9e00      	ldr	r6, [sp, #0]
 23ff28a:	2e00      	cmp	r6, #0
 23ff28c:	d03b      	beq.n	23ff306 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23ff28e:	2900      	cmp	r1, #0
 23ff290:	d139      	bne.n	23ff306 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23ff292:	6873      	ldr	r3, [r6, #4]
 23ff294:	2b02      	cmp	r3, #2
 23ff296:	d003      	beq.n	23ff2a0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23ff298:	2b0a      	cmp	r3, #10
 23ff29a:	d011      	beq.n	23ff2c0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff29c:	69f6      	ldr	r6, [r6, #28]
 23ff29e:	e7f4      	b.n	23ff28a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23ff2a0:	f1b8 0f00 	cmp.w	r8, #0
 23ff2a4:	d0fa      	beq.n	23ff29c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23ff2a6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23ff2a8:	a806      	add	r0, sp, #24
 23ff2aa:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23ff2ac:	1d3c      	adds	r4, r7, #4
 23ff2ae:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23ff2b0:	f7ff ff70 	bl	23ff194 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23ff2b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff2b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff2b8:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff2ba:	4641      	mov	r1, r8
 23ff2bc:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23ff2be:	e7ed      	b.n	23ff29c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23ff2c0:	f1b9 0f00 	cmp.w	r9, #0
 23ff2c4:	d0ea      	beq.n	23ff29c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23ff2c6:	2210      	movs	r2, #16
 23ff2c8:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23ff2ca:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23ff2cc:	f000 fcc7 	bl	23ffc5e <memset>
                    a.v = 6;
 23ff2d0:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff2d2:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff2d4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff2d8:	f104 0308 	add.w	r3, r4, #8
 23ff2dc:	3418      	adds	r4, #24
 23ff2de:	462a      	mov	r2, r5
 23ff2e0:	6818      	ldr	r0, [r3, #0]
 23ff2e2:	6859      	ldr	r1, [r3, #4]
 23ff2e4:	3308      	adds	r3, #8
 23ff2e6:	c203      	stmia	r2!, {r0, r1}
 23ff2e8:	42a3      	cmp	r3, r4
 23ff2ea:	4615      	mov	r5, r2
 23ff2ec:	d1f7      	bne.n	23ff2de <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff2ee:	a901      	add	r1, sp, #4
 23ff2f0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff2f2:	1d3c      	adds	r4, r7, #4
 23ff2f4:	ad07      	add	r5, sp, #28
 23ff2f6:	f7ff ff2d 	bl	23ff154 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff2fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff2fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff2fe:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff300:	4649      	mov	r1, r9
 23ff302:	7023      	strb	r3, [r4, #0]
                    break;
 23ff304:	e7ca      	b.n	23ff29c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff306:	9800      	ldr	r0, [sp, #0]
 23ff308:	f7ff fc0c 	bl	23feb24 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff30c:	4638      	mov	r0, r7
 23ff30e:	b015      	add	sp, #84	; 0x54
 23ff310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff314 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff314:	4b02      	ldr	r3, [pc, #8]	; (23ff320 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff316:	4a03      	ldr	r2, [pc, #12]	; (23ff324 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff318:	601a      	str	r2, [r3, #0]
 23ff31a:	2200      	movs	r2, #0
 23ff31c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff31e:	4770      	bx	lr
 23ff320:	1007ae90 	.word	0x1007ae90
 23ff324:	023ffe68 	.word	0x023ffe68

023ff328 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23ff328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff32a:	4606      	mov	r6, r0
 23ff32c:	460d      	mov	r5, r1
  size_t n = 0;
 23ff32e:	2400      	movs	r4, #0
 23ff330:	188f      	adds	r7, r1, r2
  while (size--) {
 23ff332:	42bd      	cmp	r5, r7
 23ff334:	d00c      	beq.n	23ff350 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23ff336:	6833      	ldr	r3, [r6, #0]
 23ff338:	4630      	mov	r0, r6
 23ff33a:	689b      	ldr	r3, [r3, #8]
 23ff33c:	f815 1b01 	ldrb.w	r1, [r5], #1
 23ff340:	4798      	blx	r3
     if (chunk>=0)
 23ff342:	1e03      	subs	r3, r0, #0
 23ff344:	db01      	blt.n	23ff34a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23ff346:	441c      	add	r4, r3
  while (size--) {
 23ff348:	e7f3      	b.n	23ff332 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23ff34a:	2c00      	cmp	r4, #0
 23ff34c:	bf08      	it	eq
 23ff34e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23ff350:	4620      	mov	r0, r4
 23ff352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff354 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23ff354:	b513      	push	{r0, r1, r4, lr}
 23ff356:	4604      	mov	r4, r0
    }
 23ff358:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23ff35a:	b159      	cbz	r1, 23ff374 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23ff35c:	9101      	str	r1, [sp, #4]
 23ff35e:	f7ff f8ef 	bl	23fe540 <strlen>
 23ff362:	4602      	mov	r2, r0
 23ff364:	4620      	mov	r0, r4
 23ff366:	6823      	ldr	r3, [r4, #0]
 23ff368:	9901      	ldr	r1, [sp, #4]
 23ff36a:	68db      	ldr	r3, [r3, #12]
    }
 23ff36c:	b002      	add	sp, #8
 23ff36e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23ff372:	4718      	bx	r3
    }
 23ff374:	b002      	add	sp, #8
 23ff376:	bd10      	pop	{r4, pc}

023ff378 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23ff378:	b508      	push	{r3, lr}
  return write(str);
 23ff37a:	f7ff ffeb 	bl	23ff354 <_ZN5Print5writeEPKc>
}
 23ff37e:	bd08      	pop	{r3, pc}

023ff380 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23ff380:	6803      	ldr	r3, [r0, #0]
 23ff382:	689b      	ldr	r3, [r3, #8]
 23ff384:	4718      	bx	r3

023ff386 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23ff386:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23ff388:	210d      	movs	r1, #13
{
 23ff38a:	4605      	mov	r5, r0
  size_t n = print('\r');
 23ff38c:	f7ff fff8 	bl	23ff380 <_ZN5Print5printEc>
  n += print('\n');
 23ff390:	210a      	movs	r1, #10
  size_t n = print('\r');
 23ff392:	4604      	mov	r4, r0
  n += print('\n');
 23ff394:	4628      	mov	r0, r5
 23ff396:	f7ff fff3 	bl	23ff380 <_ZN5Print5printEc>
  return n;
}
 23ff39a:	4420      	add	r0, r4
 23ff39c:	bd38      	pop	{r3, r4, r5, pc}

023ff39e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23ff39e:	b538      	push	{r3, r4, r5, lr}
 23ff3a0:	4605      	mov	r5, r0
  return write(str);
 23ff3a2:	f7ff ffd7 	bl	23ff354 <_ZN5Print5writeEPKc>
 23ff3a6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23ff3a8:	4628      	mov	r0, r5
 23ff3aa:	f7ff ffec 	bl	23ff386 <_ZN5Print7printlnEv>
  return n;
}
 23ff3ae:	4420      	add	r0, r4
 23ff3b0:	bd38      	pop	{r3, r4, r5, pc}

023ff3b2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23ff3b2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23ff3b4:	2a01      	cmp	r2, #1
 23ff3b6:	bf98      	it	ls
 23ff3b8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23ff3ba:	b530      	push	{r4, r5, lr}
 23ff3bc:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23ff3be:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23ff3c2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23ff3c4:	460d      	mov	r5, r1
 23ff3c6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23ff3ca:	fb01 5312 	mls	r3, r1, r2, r5
 23ff3ce:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff3d2:	2b09      	cmp	r3, #9
 23ff3d4:	bf94      	ite	ls
 23ff3d6:	3330      	addls	r3, #48	; 0x30
 23ff3d8:	3337      	addhi	r3, #55	; 0x37
 23ff3da:	b2db      	uxtb	r3, r3
  } while(n);
 23ff3dc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff3de:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23ff3e2:	d9ef      	bls.n	23ff3c4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23ff3e4:	4621      	mov	r1, r4
 23ff3e6:	f7ff ffb5 	bl	23ff354 <_ZN5Print5writeEPKc>
}
 23ff3ea:	b00b      	add	sp, #44	; 0x2c
 23ff3ec:	bd30      	pop	{r4, r5, pc}
	...

023ff3f0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 23ff3f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff3f4:	ec55 4b10 	vmov	r4, r5, d0
 23ff3f8:	4606      	mov	r6, r0
 23ff3fa:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
 23ff3fc:	ee10 2a10 	vmov	r2, s0
 23ff400:	462b      	mov	r3, r5
 23ff402:	ee10 0a10 	vmov	r0, s0
 23ff406:	4629      	mov	r1, r5
 23ff408:	f7fe ffec 	bl	23fe3e4 <__aeabi_dcmpun>
 23ff40c:	b140      	cbz	r0, 23ff420 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
 23ff40e:	4953      	ldr	r1, [pc, #332]	; (23ff55c <_ZN5Print10printFloatEdh+0x16c>)
 23ff410:	4630      	mov	r0, r6
 23ff412:	f7ff ff9f 	bl	23ff354 <_ZN5Print5writeEPKc>
 23ff416:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 23ff418:	4650      	mov	r0, sl
 23ff41a:	b003      	add	sp, #12
 23ff41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 23ff420:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 23ff424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23ff428:	4620      	mov	r0, r4
 23ff42a:	4649      	mov	r1, r9
 23ff42c:	4b4c      	ldr	r3, [pc, #304]	; (23ff560 <_ZN5Print10printFloatEdh+0x170>)
 23ff42e:	f7fe ffd9 	bl	23fe3e4 <__aeabi_dcmpun>
 23ff432:	b948      	cbnz	r0, 23ff448 <_ZN5Print10printFloatEdh+0x58>
 23ff434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23ff438:	4620      	mov	r0, r4
 23ff43a:	4649      	mov	r1, r9
 23ff43c:	4b48      	ldr	r3, [pc, #288]	; (23ff560 <_ZN5Print10printFloatEdh+0x170>)
 23ff43e:	f7fe ffb3 	bl	23fe3a8 <__aeabi_dcmple>
 23ff442:	b908      	cbnz	r0, 23ff448 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
 23ff444:	4947      	ldr	r1, [pc, #284]	; (23ff564 <_ZN5Print10printFloatEdh+0x174>)
 23ff446:	e7e3      	b.n	23ff410 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 23ff448:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23ff44c:	4620      	mov	r0, r4
 23ff44e:	4629      	mov	r1, r5
 23ff450:	4b45      	ldr	r3, [pc, #276]	; (23ff568 <_ZN5Print10printFloatEdh+0x178>)
 23ff452:	f7fe ffbd 	bl	23fe3d0 <__aeabi_dcmpgt>
 23ff456:	b108      	cbz	r0, 23ff45c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
 23ff458:	4944      	ldr	r1, [pc, #272]	; (23ff56c <_ZN5Print10printFloatEdh+0x17c>)
 23ff45a:	e7d9      	b.n	23ff410 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 23ff45c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23ff460:	4620      	mov	r0, r4
 23ff462:	4629      	mov	r1, r5
 23ff464:	4b42      	ldr	r3, [pc, #264]	; (23ff570 <_ZN5Print10printFloatEdh+0x180>)
 23ff466:	f7fe ff95 	bl	23fe394 <__aeabi_dcmplt>
 23ff46a:	2800      	cmp	r0, #0
 23ff46c:	d1f4      	bne.n	23ff458 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
 23ff46e:	2200      	movs	r2, #0
 23ff470:	2300      	movs	r3, #0
 23ff472:	4620      	mov	r0, r4
 23ff474:	4629      	mov	r1, r5
 23ff476:	f7fe ff8d 	bl	23fe394 <__aeabi_dcmplt>
 23ff47a:	b1d0      	cbz	r0, 23ff4b2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
 23ff47c:	212d      	movs	r1, #45	; 0x2d
 23ff47e:	4630      	mov	r0, r6
 23ff480:	f7ff ff7e 	bl	23ff380 <_ZN5Print5printEc>
     number = -number;
 23ff484:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
 23ff488:	4682      	mov	sl, r0
     number = -number;
 23ff48a:	461d      	mov	r5, r3
  size_t n = 0;
 23ff48c:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 23ff490:	2000      	movs	r0, #0
    rounding /= 10.0;
 23ff492:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 23ff496:	4937      	ldr	r1, [pc, #220]	; (23ff574 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
 23ff498:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 23ff57c <_ZN5Print10printFloatEdh+0x18c>
  for (uint8_t i=0; i<digits; ++i)
 23ff49c:	fa5f f38b 	uxtb.w	r3, fp
 23ff4a0:	429f      	cmp	r7, r3
 23ff4a2:	d908      	bls.n	23ff4b6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
 23ff4a4:	4642      	mov	r2, r8
 23ff4a6:	464b      	mov	r3, r9
 23ff4a8:	f7fe fe2c 	bl	23fe104 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 23ff4ac:	f10b 0b01 	add.w	fp, fp, #1
 23ff4b0:	e7f4      	b.n	23ff49c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
 23ff4b2:	4682      	mov	sl, r0
 23ff4b4:	e7ea      	b.n	23ff48c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
 23ff4b6:	4622      	mov	r2, r4
 23ff4b8:	462b      	mov	r3, r5
 23ff4ba:	f7fe fb43 	bl	23fdb44 <__adddf3>
 23ff4be:	460d      	mov	r5, r1
 23ff4c0:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
 23ff4c2:	f7fe ffcd 	bl	23fe460 <__aeabi_d2uiz>
 23ff4c6:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
 23ff4c8:	f7fe fc78 	bl	23fddbc <__aeabi_ui2d>
 23ff4cc:	4602      	mov	r2, r0
 23ff4ce:	460b      	mov	r3, r1
 23ff4d0:	4620      	mov	r0, r4
 23ff4d2:	4629      	mov	r1, r5
 23ff4d4:	f7fe fb34 	bl	23fdb40 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23ff4d8:	220a      	movs	r2, #10
 23ff4da:	4604      	mov	r4, r0
 23ff4dc:	460d      	mov	r5, r1
 23ff4de:	4630      	mov	r0, r6
 23ff4e0:	4641      	mov	r1, r8
 23ff4e2:	f7ff ff66 	bl	23ff3b2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 23ff4e6:	4482      	add	sl, r0
  if (digits > 0) {
 23ff4e8:	2f00      	cmp	r7, #0
 23ff4ea:	d095      	beq.n	23ff418 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
 23ff4ec:	4630      	mov	r0, r6
 23ff4ee:	4922      	ldr	r1, [pc, #136]	; (23ff578 <_ZN5Print10printFloatEdh+0x188>)
 23ff4f0:	f7ff ff30 	bl	23ff354 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 23ff4f4:	f04f 0800 	mov.w	r8, #0
 23ff4f8:	f8df 9080 	ldr.w	r9, [pc, #128]	; 23ff57c <_ZN5Print10printFloatEdh+0x18c>
    n += print(".");
 23ff4fc:	4482      	add	sl, r0
  while (digits-- > 0)
 23ff4fe:	2f00      	cmp	r7, #0
 23ff500:	d08a      	beq.n	23ff418 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
 23ff502:	4642      	mov	r2, r8
 23ff504:	464b      	mov	r3, r9
 23ff506:	4620      	mov	r0, r4
 23ff508:	4629      	mov	r1, r5
 23ff50a:	f7fe fcd1 	bl	23fdeb0 <__aeabi_dmul>
 23ff50e:	4604      	mov	r4, r0
 23ff510:	460d      	mov	r5, r1
    int toPrint = int(remainder);
 23ff512:	f7fe ff7d 	bl	23fe410 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 23ff516:	f1b0 0b00 	subs.w	fp, r0, #0
 23ff51a:	da1c      	bge.n	23ff556 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
 23ff51c:	212d      	movs	r1, #45	; 0x2d
 23ff51e:	4630      	mov	r0, r6
 23ff520:	f7ff ff2e 	bl	23ff380 <_ZN5Print5printEc>
 23ff524:	4603      	mov	r3, r0
            val = -n;
 23ff526:	f1cb 0100 	rsb	r1, fp, #0
        return printNumber(val, base) + t;
 23ff52a:	220a      	movs	r2, #10
 23ff52c:	4630      	mov	r0, r6
 23ff52e:	9301      	str	r3, [sp, #4]
 23ff530:	f7ff ff3f 	bl	23ff3b2 <_ZN5Print11printNumberEmh>
 23ff534:	9b01      	ldr	r3, [sp, #4]
 23ff536:	3f01      	subs	r7, #1
 23ff538:	4418      	add	r0, r3
    n += print(toPrint);
 23ff53a:	4482      	add	sl, r0
    remainder -= toPrint;
 23ff53c:	4658      	mov	r0, fp
 23ff53e:	f7fe fc4d 	bl	23fdddc <__aeabi_i2d>
 23ff542:	4602      	mov	r2, r0
 23ff544:	460b      	mov	r3, r1
 23ff546:	4620      	mov	r0, r4
 23ff548:	4629      	mov	r1, r5
 23ff54a:	f7fe faf9 	bl	23fdb40 <__aeabi_dsub>
 23ff54e:	b2ff      	uxtb	r7, r7
 23ff550:	4604      	mov	r4, r0
 23ff552:	460d      	mov	r5, r1
  while (digits-- > 0)
 23ff554:	e7d3      	b.n	23ff4fe <_ZN5Print10printFloatEdh+0x10e>
            val = n;
 23ff556:	4659      	mov	r1, fp
        size_t t = 0;
 23ff558:	2300      	movs	r3, #0
 23ff55a:	e7e6      	b.n	23ff52a <_ZN5Print10printFloatEdh+0x13a>
 23ff55c:	023ffe9c 	.word	0x023ffe9c
 23ff560:	7fefffff 	.word	0x7fefffff
 23ff564:	023ffea0 	.word	0x023ffea0
 23ff568:	41efffff 	.word	0x41efffff
 23ff56c:	023ffea4 	.word	0x023ffea4
 23ff570:	c1efffff 	.word	0xc1efffff
 23ff574:	3fe00000 	.word	0x3fe00000
 23ff578:	023ffea8 	.word	0x023ffea8
 23ff57c:	40240000 	.word	0x40240000

023ff580 <_ZN5Print5printEfi>:
{
 23ff580:	b538      	push	{r3, r4, r5, lr}
 23ff582:	4604      	mov	r4, r0
 23ff584:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
 23ff588:	b2cd      	uxtb	r5, r1
 23ff58a:	f7fe fc39 	bl	23fde00 <__aeabi_f2d>
 23ff58e:	ec41 0b10 	vmov	d0, r0, r1
 23ff592:	4629      	mov	r1, r5
 23ff594:	4620      	mov	r0, r4
}
 23ff596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
 23ff59a:	f7ff bf29 	b.w	23ff3f0 <_ZN5Print10printFloatEdh>
	...

023ff5a0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23ff5a0:	2200      	movs	r2, #0
 23ff5a2:	4b01      	ldr	r3, [pc, #4]	; (23ff5a8 <_GLOBAL__sub_I_RGB+0x8>)
 23ff5a4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23ff5a6:	4770      	bx	lr
 23ff5a8:	1007ae98 	.word	0x1007ae98

023ff5ac <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23ff5ac:	b510      	push	{r4, lr}
 23ff5ae:	4604      	mov	r4, r0
 23ff5b0:	4608      	mov	r0, r1
{
    _spi = spi;
 23ff5b2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23ff5b4:	f7ff fad2 	bl	23feb5c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff5b8:	2300      	movs	r3, #0
}
 23ff5ba:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff5bc:	6063      	str	r3, [r4, #4]
}
 23ff5be:	bd10      	pop	{r4, pc}

023ff5c0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff5c0:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23ff5c2:	2000      	movs	r0, #0
 23ff5c4:	4b04      	ldr	r3, [pc, #16]	; (23ff5d8 <_GLOBAL__sub_I_System+0x18>)
 23ff5c6:	601a      	str	r2, [r3, #0]
 23ff5c8:	4b04      	ldr	r3, [pc, #16]	; (23ff5dc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff5ca:	4a05      	ldr	r2, [pc, #20]	; (23ff5e0 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff5cc:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff5d0:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff5d2:	f7ff bbb1 	b.w	23fed38 <set_system_mode>
 23ff5d6:	bf00      	nop
 23ff5d8:	1007aeb4 	.word	0x1007aeb4
 23ff5dc:	1007aea8 	.word	0x1007aea8
 23ff5e0:	ffff0000 	.word	0xffff0000

023ff5e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff5e4:	4b02      	ldr	r3, [pc, #8]	; (23ff5f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff5e6:	681a      	ldr	r2, [r3, #0]
 23ff5e8:	4b02      	ldr	r3, [pc, #8]	; (23ff5f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff5ea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff5ec:	4770      	bx	lr
 23ff5ee:	bf00      	nop
 23ff5f0:	1007ad00 	.word	0x1007ad00
 23ff5f4:	1007aeb8 	.word	0x1007aeb8

023ff5f8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff5f8:	4770      	bx	lr

023ff5fa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff5fa:	7441      	strb	r1, [r0, #17]
}
 23ff5fc:	4770      	bx	lr

023ff5fe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff5fe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff600:	7c00      	ldrb	r0, [r0, #16]
 23ff602:	f7ff fb1b 	bl	23fec3c <hal_usart_available_data_for_write>
}
 23ff606:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff60a:	bd08      	pop	{r3, pc}

023ff60c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff60c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff60e:	7c00      	ldrb	r0, [r0, #16]
 23ff610:	f7ff face 	bl	23febb0 <hal_usart_available>
}
 23ff614:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff618:	bd08      	pop	{r3, pc}

023ff61a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff61a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff61c:	7c00      	ldrb	r0, [r0, #16]
 23ff61e:	f7ff fae3 	bl	23febe8 <hal_usart_peek>
}
 23ff622:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff626:	bd08      	pop	{r3, pc}

023ff628 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff628:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff62a:	7c00      	ldrb	r0, [r0, #16]
 23ff62c:	f7ff face 	bl	23febcc <hal_usart_read>
}
 23ff630:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff634:	bd08      	pop	{r3, pc}

023ff636 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff636:	7c00      	ldrb	r0, [r0, #16]
 23ff638:	f7ff bae4 	b.w	23fec04 <hal_usart_flush>

023ff63c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff63c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff63e:	7c45      	ldrb	r5, [r0, #17]
{
 23ff640:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff642:	b12d      	cbz	r5, 23ff650 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff644:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff646:	b003      	add	sp, #12
 23ff648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff64c:	f7ff baa2 	b.w	23feb94 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff650:	7c00      	ldrb	r0, [r0, #16]
 23ff652:	9101      	str	r1, [sp, #4]
 23ff654:	f7ff faf2 	bl	23fec3c <hal_usart_available_data_for_write>
 23ff658:	2800      	cmp	r0, #0
 23ff65a:	9901      	ldr	r1, [sp, #4]
 23ff65c:	dcf2      	bgt.n	23ff644 <_ZN11USARTSerial5writeEh+0x8>
}
 23ff65e:	4628      	mov	r0, r5
 23ff660:	b003      	add	sp, #12
 23ff662:	bd30      	pop	{r4, r5, pc}

023ff664 <_ZN11USARTSerialD0Ev>:
 23ff664:	b510      	push	{r4, lr}
 23ff666:	4604      	mov	r4, r0
 23ff668:	2114      	movs	r1, #20
 23ff66a:	f7fe ff90 	bl	23fe58e <_ZdlPvj>
 23ff66e:	4620      	mov	r0, r4
 23ff670:	bd10      	pop	{r4, pc}
	...

023ff674 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff674:	b510      	push	{r4, lr}
 23ff676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff67a:	4604      	mov	r4, r0
 23ff67c:	4608      	mov	r0, r1
 23ff67e:	4611      	mov	r1, r2
 23ff680:	2200      	movs	r2, #0
 23ff682:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff686:	4b04      	ldr	r3, [pc, #16]	; (23ff698 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff688:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff68a:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff68c:	2301      	movs	r3, #1
 23ff68e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff690:	f7ff fae2 	bl	23fec58 <hal_usart_init_ex>
}
 23ff694:	4620      	mov	r0, r4
 23ff696:	bd10      	pop	{r4, pc}
 23ff698:	023ffed0 	.word	0x023ffed0

023ff69c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff69c:	7c00      	ldrb	r0, [r0, #16]
 23ff69e:	f7ff babf 	b.w	23fec20 <hal_usart_is_enabled>

023ff6a2 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff6a2:	7441      	strb	r1, [r0, #17]
}
 23ff6a4:	4770      	bx	lr

023ff6a6 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff6a6:	4770      	bx	lr

023ff6a8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff6a8:	4770      	bx	lr

023ff6aa <_ZN9USBSerial4readEv>:
{
 23ff6aa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff6ac:	2100      	movs	r1, #0
 23ff6ae:	7c00      	ldrb	r0, [r0, #16]
 23ff6b0:	f7ff fb18 	bl	23fece4 <HAL_USB_USART_Receive_Data>
}
 23ff6b4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff6b8:	bd08      	pop	{r3, pc}

023ff6ba <_ZN9USBSerial4peekEv>:
{
 23ff6ba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff6bc:	2101      	movs	r1, #1
 23ff6be:	7c00      	ldrb	r0, [r0, #16]
 23ff6c0:	f7ff fb10 	bl	23fece4 <HAL_USB_USART_Receive_Data>
}
 23ff6c4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff6c8:	bd08      	pop	{r3, pc}

023ff6ca <_ZN9USBSerial17availableForWriteEv>:
{
 23ff6ca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff6cc:	7c00      	ldrb	r0, [r0, #16]
 23ff6ce:	f7ff fafb 	bl	23fecc8 <HAL_USB_USART_Available_Data_For_Write>
}
 23ff6d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff6d6:	bd08      	pop	{r3, pc}

023ff6d8 <_ZN9USBSerial9availableEv>:
{
 23ff6d8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff6da:	7c00      	ldrb	r0, [r0, #16]
 23ff6dc:	f7ff fae6 	bl	23fecac <HAL_USB_USART_Available_Data>
}
 23ff6e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff6e4:	bd08      	pop	{r3, pc}

023ff6e6 <_ZN9USBSerial5writeEh>:
{
 23ff6e6:	b513      	push	{r0, r1, r4, lr}
 23ff6e8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff6ea:	7c00      	ldrb	r0, [r0, #16]
{
 23ff6ec:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff6ee:	f7ff faeb 	bl	23fecc8 <HAL_USB_USART_Available_Data_For_Write>
 23ff6f2:	2800      	cmp	r0, #0
 23ff6f4:	9901      	ldr	r1, [sp, #4]
 23ff6f6:	dc01      	bgt.n	23ff6fc <_ZN9USBSerial5writeEh+0x16>
 23ff6f8:	7c60      	ldrb	r0, [r4, #17]
 23ff6fa:	b120      	cbz	r0, 23ff706 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff6fc:	7c20      	ldrb	r0, [r4, #16]
 23ff6fe:	f7ff faff 	bl	23fed00 <HAL_USB_USART_Send_Data>
 23ff702:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff706:	b002      	add	sp, #8
 23ff708:	bd10      	pop	{r4, pc}

023ff70a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff70a:	7c00      	ldrb	r0, [r0, #16]
 23ff70c:	f7ff bb06 	b.w	23fed1c <HAL_USB_USART_Flush_Data>

023ff710 <_ZN9USBSerialD0Ev>:
 23ff710:	b510      	push	{r4, lr}
 23ff712:	4604      	mov	r4, r0
 23ff714:	2114      	movs	r1, #20
 23ff716:	f7fe ff3a 	bl	23fe58e <_ZdlPvj>
 23ff71a:	4620      	mov	r0, r4
 23ff71c:	bd10      	pop	{r4, pc}
	...

023ff720 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff720:	b510      	push	{r4, lr}
 23ff722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff726:	4604      	mov	r4, r0
 23ff728:	4608      	mov	r0, r1
 23ff72a:	2100      	movs	r1, #0
 23ff72c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff730:	4b04      	ldr	r3, [pc, #16]	; (23ff744 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff732:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff734:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff736:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff738:	4611      	mov	r1, r2
  _blocking = true;
 23ff73a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff73c:	f7ff fa9a 	bl	23fec74 <HAL_USB_USART_Init>
}
 23ff740:	4620      	mov	r0, r4
 23ff742:	bd10      	pop	{r4, pc}
 23ff744:	023fff00 	.word	0x023fff00

023ff748 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23ff748:	2200      	movs	r2, #0
 23ff74a:	7c00      	ldrb	r0, [r0, #16]
 23ff74c:	f7ff baa0 	b.w	23fec90 <HAL_USB_USART_Begin>

023ff750 <_Z19acquireSerialBufferv>:
{
 23ff750:	b510      	push	{r4, lr}
 23ff752:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff754:	2214      	movs	r2, #20
 23ff756:	2100      	movs	r1, #0
 23ff758:	f000 fa81 	bl	23ffc5e <memset>
}
 23ff75c:	4620      	mov	r0, r4
 23ff75e:	bd10      	pop	{r4, pc}

023ff760 <_Z16_fetch_usbserialv>:
{
 23ff760:	b510      	push	{r4, lr}
 23ff762:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff764:	a803      	add	r0, sp, #12
 23ff766:	f7ff fff3 	bl	23ff750 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff76a:	4c0c      	ldr	r4, [pc, #48]	; (23ff79c <_Z16_fetch_usbserialv+0x3c>)
 23ff76c:	e8d4 1f8f 	ldab	r1, [r4]
 23ff770:	f011 0101 	ands.w	r1, r1, #1
 23ff774:	d10f      	bne.n	23ff796 <_Z16_fetch_usbserialv+0x36>
 23ff776:	4620      	mov	r0, r4
 23ff778:	9101      	str	r1, [sp, #4]
 23ff77a:	f7fe ff0a 	bl	23fe592 <__cxa_guard_acquire>
 23ff77e:	9901      	ldr	r1, [sp, #4]
 23ff780:	b148      	cbz	r0, 23ff796 <_Z16_fetch_usbserialv+0x36>
 23ff782:	aa03      	add	r2, sp, #12
 23ff784:	4806      	ldr	r0, [pc, #24]	; (23ff7a0 <_Z16_fetch_usbserialv+0x40>)
 23ff786:	f7ff ffcb 	bl	23ff720 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff78a:	4620      	mov	r0, r4
 23ff78c:	f7fe ff06 	bl	23fe59c <__cxa_guard_release>
 23ff790:	4804      	ldr	r0, [pc, #16]	; (23ff7a4 <_Z16_fetch_usbserialv+0x44>)
 23ff792:	f000 fa51 	bl	23ffc38 <atexit>
	return _usbserial;
}
 23ff796:	4802      	ldr	r0, [pc, #8]	; (23ff7a0 <_Z16_fetch_usbserialv+0x40>)
 23ff798:	b008      	add	sp, #32
 23ff79a:	bd10      	pop	{r4, pc}
 23ff79c:	1007aebc 	.word	0x1007aebc
 23ff7a0:	1007aec0 	.word	0x1007aec0
 23ff7a4:	023ff6a7 	.word	0x023ff6a7

023ff7a8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff7a8:	2200      	movs	r2, #0
 23ff7aa:	6840      	ldr	r0, [r0, #4]
 23ff7ac:	4611      	mov	r1, r2
 23ff7ae:	f7ff bb33 	b.w	23fee18 <network_ready>

023ff7b2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff7b2:	2200      	movs	r2, #0
 23ff7b4:	6840      	ldr	r0, [r0, #4]
 23ff7b6:	4611      	mov	r1, r2
 23ff7b8:	f7ff bb66 	b.w	23fee88 <network_listening>

023ff7bc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff7bc:	2200      	movs	r2, #0
 23ff7be:	6840      	ldr	r0, [r0, #4]
 23ff7c0:	4611      	mov	r1, r2
 23ff7c2:	f7ff bb7d 	b.w	23feec0 <network_get_listen_timeout>

023ff7c6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff7c6:	2200      	movs	r2, #0
 23ff7c8:	6840      	ldr	r0, [r0, #4]
 23ff7ca:	f7ff bb6b 	b.w	23feea4 <network_set_listen_timeout>

023ff7ce <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff7ce:	2200      	movs	r2, #0
 23ff7d0:	6840      	ldr	r0, [r0, #4]
 23ff7d2:	f081 0101 	eor.w	r1, r1, #1
 23ff7d6:	f7ff bb49 	b.w	23fee6c <network_listen>

023ff7da <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff7da:	2300      	movs	r3, #0
 23ff7dc:	6840      	ldr	r0, [r0, #4]
 23ff7de:	461a      	mov	r2, r3
 23ff7e0:	4619      	mov	r1, r3
 23ff7e2:	f7ff bb35 	b.w	23fee50 <network_off>

023ff7e6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff7e6:	2300      	movs	r3, #0
 23ff7e8:	6840      	ldr	r0, [r0, #4]
 23ff7ea:	461a      	mov	r2, r3
 23ff7ec:	4619      	mov	r1, r3
 23ff7ee:	f7ff bb21 	b.w	23fee34 <network_on>

023ff7f2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff7f2:	2200      	movs	r2, #0
 23ff7f4:	6840      	ldr	r0, [r0, #4]
 23ff7f6:	4611      	mov	r1, r2
 23ff7f8:	f7ff baf2 	b.w	23fede0 <network_connecting>

023ff7fc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff7fc:	2200      	movs	r2, #0
 23ff7fe:	2102      	movs	r1, #2
 23ff800:	6840      	ldr	r0, [r0, #4]
 23ff802:	f7ff bafb 	b.w	23fedfc <network_disconnect>

023ff806 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff806:	2300      	movs	r3, #0
 23ff808:	6840      	ldr	r0, [r0, #4]
 23ff80a:	461a      	mov	r2, r3
 23ff80c:	f7ff bada 	b.w	23fedc4 <network_connect>

023ff810 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff810:	2204      	movs	r2, #4
 23ff812:	4b02      	ldr	r3, [pc, #8]	; (23ff81c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff814:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff816:	4a02      	ldr	r2, [pc, #8]	; (23ff820 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff818:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff81a:	4770      	bx	lr
 23ff81c:	1007aed4 	.word	0x1007aed4
 23ff820:	023fff30 	.word	0x023fff30

023ff824 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff824:	4b01      	ldr	r3, [pc, #4]	; (23ff82c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff826:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff828:	4770      	bx	lr
 23ff82a:	bf00      	nop
 23ff82c:	1007ad04 	.word	0x1007ad04

023ff830 <serialEventRun>:
{
 23ff830:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff832:	4b0f      	ldr	r3, [pc, #60]	; (23ff870 <serialEventRun+0x40>)
 23ff834:	b143      	cbz	r3, 23ff848 <serialEventRun+0x18>
 23ff836:	f7ff ff93 	bl	23ff760 <_Z16_fetch_usbserialv>
 23ff83a:	6803      	ldr	r3, [r0, #0]
 23ff83c:	691b      	ldr	r3, [r3, #16]
 23ff83e:	4798      	blx	r3
 23ff840:	2800      	cmp	r0, #0
 23ff842:	dd01      	ble.n	23ff848 <serialEventRun+0x18>
        serialEvent();
 23ff844:	e000      	b.n	23ff848 <serialEventRun+0x18>
 23ff846:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff848:	4b0a      	ldr	r3, [pc, #40]	; (23ff874 <serialEventRun+0x44>)
 23ff84a:	b143      	cbz	r3, 23ff85e <serialEventRun+0x2e>
 23ff84c:	f000 f962 	bl	23ffb14 <_Z22__fetch_global_Serial1v>
 23ff850:	6803      	ldr	r3, [r0, #0]
 23ff852:	691b      	ldr	r3, [r3, #16]
 23ff854:	4798      	blx	r3
 23ff856:	2800      	cmp	r0, #0
 23ff858:	dd01      	ble.n	23ff85e <serialEventRun+0x2e>
        serialEvent1();
 23ff85a:	e000      	b.n	23ff85e <serialEventRun+0x2e>
 23ff85c:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff85e:	4b06      	ldr	r3, [pc, #24]	; (23ff878 <serialEventRun+0x48>)
 23ff860:	b10b      	cbz	r3, 23ff866 <serialEventRun+0x36>
 23ff862:	f000 f99d 	bl	23ffba0 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff866:	4b05      	ldr	r3, [pc, #20]	; (23ff87c <serialEventRun+0x4c>)
 23ff868:	b10b      	cbz	r3, 23ff86e <serialEventRun+0x3e>
 23ff86a:	f000 f9cf 	bl	23ffc0c <_Z15serialEventRun3v>
}
 23ff86e:	bd08      	pop	{r3, pc}
	...

023ff880 <_post_loop>:
{
 23ff880:	b508      	push	{r3, lr}
	serialEventRun();
 23ff882:	f7ff ffd5 	bl	23ff830 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff886:	f7ff f8a5 	bl	23fe9d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff88a:	4b01      	ldr	r3, [pc, #4]	; (23ff890 <_post_loop+0x10>)
 23ff88c:	6018      	str	r0, [r3, #0]
}
 23ff88e:	bd08      	pop	{r3, pc}
 23ff890:	1007aef0 	.word	0x1007aef0

023ff894 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff894:	4805      	ldr	r0, [pc, #20]	; (23ff8ac <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff896:	4a06      	ldr	r2, [pc, #24]	; (23ff8b0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff898:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff89a:	1a12      	subs	r2, r2, r0
 23ff89c:	4905      	ldr	r1, [pc, #20]	; (23ff8b4 <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff89e:	f000 f9d1 	bl	23ffc44 <memcpy>
    __backup_sram_signature = signature;
 23ff8a2:	4b05      	ldr	r3, [pc, #20]	; (23ff8b8 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff8a4:	4a05      	ldr	r2, [pc, #20]	; (23ff8bc <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff8a6:	601a      	str	r2, [r3, #0]
}
 23ff8a8:	bd08      	pop	{r3, pc}
 23ff8aa:	bf00      	nop
 23ff8ac:	1007b400 	.word	0x1007b400
 23ff8b0:	1007b404 	.word	0x1007b404
 23ff8b4:	085ff5c4 	.word	0x085ff5c4
 23ff8b8:	1007b400 	.word	0x1007b400
 23ff8bc:	9a271c1e 	.word	0x9a271c1e

023ff8c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff8c0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff8c2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff8c4:	461a      	mov	r2, r3
 23ff8c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff8ca:	9300      	str	r3, [sp, #0]
 23ff8cc:	f7ff fa5e 	bl	23fed8c <system_ctrl_set_result>
}
 23ff8d0:	b003      	add	sp, #12
 23ff8d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff8d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff8d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff8da:	8843      	ldrh	r3, [r0, #2]
 23ff8dc:	2b0a      	cmp	r3, #10
 23ff8de:	d008      	beq.n	23ff8f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff8e0:	2b50      	cmp	r3, #80	; 0x50
 23ff8e2:	d10b      	bne.n	23ff8fc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff8e4:	4b09      	ldr	r3, [pc, #36]	; (23ff90c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff8e6:	681b      	ldr	r3, [r3, #0]
 23ff8e8:	b14b      	cbz	r3, 23ff8fe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff8ea:	b003      	add	sp, #12
 23ff8ec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff8f0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff8f2:	f7ff ffe5 	bl	23ff8c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff8f6:	b003      	add	sp, #12
 23ff8f8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff8fc:	2300      	movs	r3, #0
 23ff8fe:	461a      	mov	r2, r3
 23ff900:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff904:	9300      	str	r3, [sp, #0]
 23ff906:	f7ff fa41 	bl	23fed8c <system_ctrl_set_result>
}
 23ff90a:	e7f4      	b.n	23ff8f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff90c:	1007aee0 	.word	0x1007aee0

023ff910 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff910:	2100      	movs	r1, #0
{
 23ff912:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff914:	4811      	ldr	r0, [pc, #68]	; (23ff95c <module_user_init_hook+0x4c>)
 23ff916:	f7ff fb27 	bl	23fef68 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff91a:	4b11      	ldr	r3, [pc, #68]	; (23ff960 <module_user_init_hook+0x50>)
 23ff91c:	681a      	ldr	r2, [r3, #0]
 23ff91e:	4b11      	ldr	r3, [pc, #68]	; (23ff964 <module_user_init_hook+0x54>)
 23ff920:	429a      	cmp	r2, r3
 23ff922:	bf0c      	ite	eq
 23ff924:	2201      	moveq	r2, #1
 23ff926:	2200      	movne	r2, #0
 23ff928:	4b0f      	ldr	r3, [pc, #60]	; (23ff968 <module_user_init_hook+0x58>)
 23ff92a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff92c:	d001      	beq.n	23ff932 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff92e:	f7ff ffb1 	bl	23ff894 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff932:	f7ff f841 	bl	23fe9b8 <HAL_RNG_GetRandomNumber>
 23ff936:	4604      	mov	r4, r0
    srand(seed);
 23ff938:	f000 f99a 	bl	23ffc70 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff93c:	4b0b      	ldr	r3, [pc, #44]	; (23ff96c <module_user_init_hook+0x5c>)
 23ff93e:	b113      	cbz	r3, 23ff946 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff940:	4620      	mov	r0, r4
 23ff942:	e000      	b.n	23ff946 <module_user_init_hook+0x36>
 23ff944:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff946:	2100      	movs	r1, #0
 23ff948:	4808      	ldr	r0, [pc, #32]	; (23ff96c <module_user_init_hook+0x5c>)
 23ff94a:	f7ff fa2d 	bl	23feda8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff952:	2100      	movs	r1, #0
 23ff954:	4806      	ldr	r0, [pc, #24]	; (23ff970 <module_user_init_hook+0x60>)
 23ff956:	f7ff ba0b 	b.w	23fed70 <system_ctrl_set_app_request_handler>
 23ff95a:	bf00      	nop
 23ff95c:	023ff825 	.word	0x023ff825
 23ff960:	1007b400 	.word	0x1007b400
 23ff964:	9a271c1e 	.word	0x9a271c1e
 23ff968:	1007aedc 	.word	0x1007aedc
 23ff96c:	00000000 	.word	0x00000000
 23ff970:	023ff8d9 	.word	0x023ff8d9

023ff974 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff974:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff976:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff978:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff97a:	d902      	bls.n	23ff982 <pinAvailable+0xe>
    return false;
 23ff97c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff97e:	b003      	add	sp, #12
 23ff980:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff982:	f1a0 030f 	sub.w	r3, r0, #15
 23ff986:	2b02      	cmp	r3, #2
 23ff988:	d90b      	bls.n	23ff9a2 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff98a:	2801      	cmp	r0, #1
 23ff98c:	d821      	bhi.n	23ff9d2 <pinAvailable+0x5e>
 23ff98e:	f000 f86d 	bl	23ffa6c <_Z19__fetch_global_Wirev>
 23ff992:	2100      	movs	r1, #0
 23ff994:	7c00      	ldrb	r0, [r0, #16]
 23ff996:	f7ff f89b 	bl	23fead0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff99a:	f080 0001 	eor.w	r0, r0, #1
 23ff99e:	b2c0      	uxtb	r0, r0
 23ff9a0:	e7ed      	b.n	23ff97e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff9a2:	4d11      	ldr	r5, [pc, #68]	; (23ff9e8 <pinAvailable+0x74>)
 23ff9a4:	e8d5 1f8f 	ldab	r1, [r5]
 23ff9a8:	f011 0101 	ands.w	r1, r1, #1
 23ff9ac:	d10b      	bne.n	23ff9c6 <pinAvailable+0x52>
 23ff9ae:	4628      	mov	r0, r5
 23ff9b0:	9101      	str	r1, [sp, #4]
 23ff9b2:	f7fe fdee 	bl	23fe592 <__cxa_guard_acquire>
 23ff9b6:	9901      	ldr	r1, [sp, #4]
 23ff9b8:	b128      	cbz	r0, 23ff9c6 <pinAvailable+0x52>
 23ff9ba:	480c      	ldr	r0, [pc, #48]	; (23ff9ec <pinAvailable+0x78>)
 23ff9bc:	f7ff fdf6 	bl	23ff5ac <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff9c0:	4628      	mov	r0, r5
 23ff9c2:	f7fe fdeb 	bl	23fe59c <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff9c6:	4b09      	ldr	r3, [pc, #36]	; (23ff9ec <pinAvailable+0x78>)
 23ff9c8:	7818      	ldrb	r0, [r3, #0]
 23ff9ca:	f7ff f8d5 	bl	23feb78 <hal_spi_is_enabled>
 23ff9ce:	2800      	cmp	r0, #0
 23ff9d0:	d1d4      	bne.n	23ff97c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff9d2:	3c08      	subs	r4, #8
 23ff9d4:	2c01      	cmp	r4, #1
 23ff9d6:	d805      	bhi.n	23ff9e4 <pinAvailable+0x70>
 23ff9d8:	f000 f89c 	bl	23ffb14 <_Z22__fetch_global_Serial1v>
 23ff9dc:	7c00      	ldrb	r0, [r0, #16]
 23ff9de:	f7ff f91f 	bl	23fec20 <hal_usart_is_enabled>
 23ff9e2:	e7da      	b.n	23ff99a <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff9e4:	2001      	movs	r0, #1
 23ff9e6:	e7ca      	b.n	23ff97e <pinAvailable+0xa>
 23ff9e8:	1007aee4 	.word	0x1007aee4
 23ff9ec:	1007aee8 	.word	0x1007aee8

023ff9f0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff9f0:	281b      	cmp	r0, #27
{
 23ff9f2:	b538      	push	{r3, r4, r5, lr}
 23ff9f4:	4604      	mov	r4, r0
 23ff9f6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff9f8:	d80a      	bhi.n	23ffa10 <pinMode+0x20>
 23ff9fa:	29ff      	cmp	r1, #255	; 0xff
 23ff9fc:	d008      	beq.n	23ffa10 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff9fe:	f7ff ffb9 	bl	23ff974 <pinAvailable>
 23ffa02:	b128      	cbz	r0, 23ffa10 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ffa04:	4629      	mov	r1, r5
 23ffa06:	4620      	mov	r0, r4
}
 23ffa08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ffa0c:	f7fe bffe 	b.w	23fea0c <hal_gpio_mode>
}
 23ffa10:	bd38      	pop	{r3, r4, r5, pc}

023ffa12 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23ffa12:	b510      	push	{r4, lr}
 23ffa14:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23ffa16:	f7ff ffad 	bl	23ff974 <pinAvailable>
 23ffa1a:	b150      	cbz	r0, 23ffa32 <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23ffa1c:	2103      	movs	r1, #3
 23ffa1e:	4620      	mov	r0, r4
 23ffa20:	f7fe ffe6 	bl	23fe9f0 <hal_pin_validate_function>
 23ffa24:	2803      	cmp	r0, #3
 23ffa26:	d104      	bne.n	23ffa32 <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23ffa28:	4620      	mov	r0, r4
}
 23ffa2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23ffa2e:	f7fe bffb 	b.w	23fea28 <hal_adc_read>
}
 23ffa32:	2000      	movs	r0, #0
 23ffa34:	bd10      	pop	{r4, pc}

023ffa36 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa36:	4770      	bx	lr

023ffa38 <_Z17acquireWireBufferv>:
{
 23ffa38:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ffa3a:	4b0a      	ldr	r3, [pc, #40]	; (23ffa64 <_Z17acquireWireBufferv+0x2c>)
{
 23ffa3c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ffa3e:	6003      	str	r3, [r0, #0]
 23ffa40:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa42:	4909      	ldr	r1, [pc, #36]	; (23ffa68 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ffa44:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa46:	2020      	movs	r0, #32
 23ffa48:	f000 f8f4 	bl	23ffc34 <_ZnajRKSt9nothrow_t>
	};
 23ffa4c:	2520      	movs	r5, #32
 23ffa4e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa50:	4905      	ldr	r1, [pc, #20]	; (23ffa68 <_Z17acquireWireBufferv+0x30>)
 23ffa52:	4628      	mov	r0, r5
	};
 23ffa54:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa56:	f000 f8ed 	bl	23ffc34 <_ZnajRKSt9nothrow_t>
	};
 23ffa5a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ffa5e:	4620      	mov	r0, r4
 23ffa60:	bd38      	pop	{r3, r4, r5, pc}
 23ffa62:	bf00      	nop
 23ffa64:	00010018 	.word	0x00010018
 23ffa68:	023fff64 	.word	0x023fff64

023ffa6c <_Z19__fetch_global_Wirev>:
{
 23ffa6c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa6e:	4d0e      	ldr	r5, [pc, #56]	; (23ffaa8 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ffa70:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa72:	e8d5 1f8f 	ldab	r1, [r5]
 23ffa76:	f011 0401 	ands.w	r4, r1, #1
 23ffa7a:	d111      	bne.n	23ffaa0 <_Z19__fetch_global_Wirev+0x34>
 23ffa7c:	4628      	mov	r0, r5
 23ffa7e:	f7fe fd88 	bl	23fe592 <__cxa_guard_acquire>
 23ffa82:	b168      	cbz	r0, 23ffaa0 <_Z19__fetch_global_Wirev+0x34>
 23ffa84:	4668      	mov	r0, sp
 23ffa86:	f7ff ffd7 	bl	23ffa38 <_Z17acquireWireBufferv>
 23ffa8a:	466a      	mov	r2, sp
 23ffa8c:	4621      	mov	r1, r4
 23ffa8e:	4807      	ldr	r0, [pc, #28]	; (23ffaac <_Z19__fetch_global_Wirev+0x40>)
 23ffa90:	f7ff fafa 	bl	23ff088 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ffa94:	4628      	mov	r0, r5
 23ffa96:	f7fe fd81 	bl	23fe59c <__cxa_guard_release>
 23ffa9a:	4805      	ldr	r0, [pc, #20]	; (23ffab0 <_Z19__fetch_global_Wirev+0x44>)
 23ffa9c:	f000 f8cc 	bl	23ffc38 <atexit>
	return wire;
}
 23ffaa0:	4802      	ldr	r0, [pc, #8]	; (23ffaac <_Z19__fetch_global_Wirev+0x40>)
 23ffaa2:	b007      	add	sp, #28
 23ffaa4:	bd30      	pop	{r4, r5, pc}
 23ffaa6:	bf00      	nop
 23ffaa8:	1007aef4 	.word	0x1007aef4
 23ffaac:	1007aef8 	.word	0x1007aef8
 23ffab0:	023ffa37 	.word	0x023ffa37

023ffab4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffab4:	4770      	bx	lr
	...

023ffab8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffab8:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ffaba:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffabc:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ffabe:	462a      	mov	r2, r5
 23ffac0:	2100      	movs	r1, #0
 23ffac2:	f000 f8cc 	bl	23ffc5e <memset>
 23ffac6:	8025      	strh	r5, [r4, #0]
 23ffac8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffaca:	4907      	ldr	r1, [pc, #28]	; (23ffae8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ffacc:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fface:	8125      	strh	r5, [r4, #8]
 23ffad0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffad2:	f000 f8af 	bl	23ffc34 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffad6:	4904      	ldr	r1, [pc, #16]	; (23ffae8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ffad8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffada:	4628      	mov	r0, r5
 23ffadc:	f000 f8aa 	bl	23ffc34 <_ZnajRKSt9nothrow_t>
    };
 23ffae0:	60e0      	str	r0, [r4, #12]
}
 23ffae2:	4620      	mov	r0, r4
 23ffae4:	bd38      	pop	{r3, r4, r5, pc}
 23ffae6:	bf00      	nop
 23ffae8:	023fff64 	.word	0x023fff64

023ffaec <__tcf_2>:
 23ffaec:	4770      	bx	lr

023ffaee <__tcf_1>:
 23ffaee:	4770      	bx	lr

023ffaf0 <_Z20acquireSerial1Bufferv>:
{
 23ffaf0:	b510      	push	{r4, lr}
 23ffaf2:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ffaf4:	f7ff ffe0 	bl	23ffab8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ffaf8:	4620      	mov	r0, r4
 23ffafa:	bd10      	pop	{r4, pc}

023ffafc <_Z20acquireSerial2Bufferv>:
 23ffafc:	b510      	push	{r4, lr}
 23ffafe:	4604      	mov	r4, r0
 23ffb00:	f7ff ffda 	bl	23ffab8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffb04:	4620      	mov	r0, r4
 23ffb06:	bd10      	pop	{r4, pc}

023ffb08 <_Z20acquireSerial3Bufferv>:
 23ffb08:	b510      	push	{r4, lr}
 23ffb0a:	4604      	mov	r4, r0
 23ffb0c:	f7ff ffd4 	bl	23ffab8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffb10:	4620      	mov	r0, r4
 23ffb12:	bd10      	pop	{r4, pc}

023ffb14 <_Z22__fetch_global_Serial1v>:
{
 23ffb14:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffb16:	4d0e      	ldr	r5, [pc, #56]	; (23ffb50 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ffb18:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffb1a:	e8d5 1f8f 	ldab	r1, [r5]
 23ffb1e:	f011 0401 	ands.w	r4, r1, #1
 23ffb22:	d111      	bne.n	23ffb48 <_Z22__fetch_global_Serial1v+0x34>
 23ffb24:	4628      	mov	r0, r5
 23ffb26:	f7fe fd34 	bl	23fe592 <__cxa_guard_acquire>
 23ffb2a:	b168      	cbz	r0, 23ffb48 <_Z22__fetch_global_Serial1v+0x34>
 23ffb2c:	a801      	add	r0, sp, #4
 23ffb2e:	f7ff ffdf 	bl	23ffaf0 <_Z20acquireSerial1Bufferv>
 23ffb32:	4621      	mov	r1, r4
 23ffb34:	aa01      	add	r2, sp, #4
 23ffb36:	4807      	ldr	r0, [pc, #28]	; (23ffb54 <_Z22__fetch_global_Serial1v+0x40>)
 23ffb38:	f7ff fd9c 	bl	23ff674 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb3c:	4628      	mov	r0, r5
 23ffb3e:	f7fe fd2d 	bl	23fe59c <__cxa_guard_release>
 23ffb42:	4805      	ldr	r0, [pc, #20]	; (23ffb58 <_Z22__fetch_global_Serial1v+0x44>)
 23ffb44:	f000 f878 	bl	23ffc38 <atexit>
    return serial1;
}
 23ffb48:	4802      	ldr	r0, [pc, #8]	; (23ffb54 <_Z22__fetch_global_Serial1v+0x40>)
 23ffb4a:	b007      	add	sp, #28
 23ffb4c:	bd30      	pop	{r4, r5, pc}
 23ffb4e:	bf00      	nop
 23ffb50:	1007af0c 	.word	0x1007af0c
 23ffb54:	1007af18 	.word	0x1007af18
 23ffb58:	023ffab5 	.word	0x023ffab5

023ffb5c <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ffb5c:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffb5e:	4c0d      	ldr	r4, [pc, #52]	; (23ffb94 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ffb60:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffb62:	e8d4 3f8f 	ldab	r3, [r4]
 23ffb66:	07db      	lsls	r3, r3, #31
 23ffb68:	d411      	bmi.n	23ffb8e <_Z22__fetch_global_Serial2v+0x32>
 23ffb6a:	4620      	mov	r0, r4
 23ffb6c:	f7fe fd11 	bl	23fe592 <__cxa_guard_acquire>
 23ffb70:	b168      	cbz	r0, 23ffb8e <_Z22__fetch_global_Serial2v+0x32>
 23ffb72:	a801      	add	r0, sp, #4
 23ffb74:	f7ff ffc2 	bl	23ffafc <_Z20acquireSerial2Bufferv>
 23ffb78:	2101      	movs	r1, #1
 23ffb7a:	aa01      	add	r2, sp, #4
 23ffb7c:	4806      	ldr	r0, [pc, #24]	; (23ffb98 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffb7e:	f7ff fd79 	bl	23ff674 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb82:	4620      	mov	r0, r4
 23ffb84:	f7fe fd0a 	bl	23fe59c <__cxa_guard_release>
 23ffb88:	4804      	ldr	r0, [pc, #16]	; (23ffb9c <_Z22__fetch_global_Serial2v+0x40>)
 23ffb8a:	f000 f855 	bl	23ffc38 <atexit>
	return serial2;
}
 23ffb8e:	4802      	ldr	r0, [pc, #8]	; (23ffb98 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffb90:	b006      	add	sp, #24
 23ffb92:	bd10      	pop	{r4, pc}
 23ffb94:	1007af10 	.word	0x1007af10
 23ffb98:	1007af2c 	.word	0x1007af2c
 23ffb9c:	023ffaef 	.word	0x023ffaef

023ffba0 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ffba0:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ffba2:	f7ff ffdb 	bl	23ffb5c <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffba6:	4b07      	ldr	r3, [pc, #28]	; (23ffbc4 <_Z15serialEventRun2v+0x24>)
 23ffba8:	4604      	mov	r4, r0
 23ffbaa:	b153      	cbz	r3, 23ffbc2 <_Z15serialEventRun2v+0x22>
 23ffbac:	f7ff fd76 	bl	23ff69c <_ZN11USARTSerial9isEnabledEv>
 23ffbb0:	b138      	cbz	r0, 23ffbc2 <_Z15serialEventRun2v+0x22>
 23ffbb2:	6823      	ldr	r3, [r4, #0]
 23ffbb4:	4620      	mov	r0, r4
 23ffbb6:	691b      	ldr	r3, [r3, #16]
 23ffbb8:	4798      	blx	r3
 23ffbba:	2800      	cmp	r0, #0
 23ffbbc:	dd01      	ble.n	23ffbc2 <_Z15serialEventRun2v+0x22>
        handler();
 23ffbbe:	e000      	b.n	23ffbc2 <_Z15serialEventRun2v+0x22>
 23ffbc0:	bf00      	nop
}
 23ffbc2:	bd10      	pop	{r4, pc}
 23ffbc4:	00000000 	.word	0x00000000

023ffbc8 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ffbc8:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffbca:	4c0d      	ldr	r4, [pc, #52]	; (23ffc00 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ffbcc:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffbce:	e8d4 3f8f 	ldab	r3, [r4]
 23ffbd2:	07db      	lsls	r3, r3, #31
 23ffbd4:	d411      	bmi.n	23ffbfa <_Z22__fetch_global_Serial3v+0x32>
 23ffbd6:	4620      	mov	r0, r4
 23ffbd8:	f7fe fcdb 	bl	23fe592 <__cxa_guard_acquire>
 23ffbdc:	b168      	cbz	r0, 23ffbfa <_Z22__fetch_global_Serial3v+0x32>
 23ffbde:	a801      	add	r0, sp, #4
 23ffbe0:	f7ff ff92 	bl	23ffb08 <_Z20acquireSerial3Bufferv>
 23ffbe4:	2102      	movs	r1, #2
 23ffbe6:	aa01      	add	r2, sp, #4
 23ffbe8:	4806      	ldr	r0, [pc, #24]	; (23ffc04 <_Z22__fetch_global_Serial3v+0x3c>)
 23ffbea:	f7ff fd43 	bl	23ff674 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffbee:	4620      	mov	r0, r4
 23ffbf0:	f7fe fcd4 	bl	23fe59c <__cxa_guard_release>
 23ffbf4:	4804      	ldr	r0, [pc, #16]	; (23ffc08 <_Z22__fetch_global_Serial3v+0x40>)
 23ffbf6:	f000 f81f 	bl	23ffc38 <atexit>
	return serial3;
}
 23ffbfa:	4802      	ldr	r0, [pc, #8]	; (23ffc04 <_Z22__fetch_global_Serial3v+0x3c>)
 23ffbfc:	b006      	add	sp, #24
 23ffbfe:	bd10      	pop	{r4, pc}
 23ffc00:	1007af14 	.word	0x1007af14
 23ffc04:	1007af40 	.word	0x1007af40
 23ffc08:	023ffaed 	.word	0x023ffaed

023ffc0c <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ffc0c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ffc0e:	f7ff ffdb 	bl	23ffbc8 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffc12:	4b07      	ldr	r3, [pc, #28]	; (23ffc30 <_Z15serialEventRun3v+0x24>)
 23ffc14:	4604      	mov	r4, r0
 23ffc16:	b153      	cbz	r3, 23ffc2e <_Z15serialEventRun3v+0x22>
 23ffc18:	f7ff fd40 	bl	23ff69c <_ZN11USARTSerial9isEnabledEv>
 23ffc1c:	b138      	cbz	r0, 23ffc2e <_Z15serialEventRun3v+0x22>
 23ffc1e:	6823      	ldr	r3, [r4, #0]
 23ffc20:	4620      	mov	r0, r4
 23ffc22:	691b      	ldr	r3, [r3, #16]
 23ffc24:	4798      	blx	r3
 23ffc26:	2800      	cmp	r0, #0
 23ffc28:	dd01      	ble.n	23ffc2e <_Z15serialEventRun3v+0x22>
        handler();
 23ffc2a:	e000      	b.n	23ffc2e <_Z15serialEventRun3v+0x22>
 23ffc2c:	bf00      	nop
}
 23ffc2e:	bd10      	pop	{r4, pc}
 23ffc30:	00000000 	.word	0x00000000

023ffc34 <_ZnajRKSt9nothrow_t>:
 23ffc34:	f7fe bca9 	b.w	23fe58a <_Znaj>

023ffc38 <atexit>:
 23ffc38:	2300      	movs	r3, #0
 23ffc3a:	4601      	mov	r1, r0
 23ffc3c:	461a      	mov	r2, r3
 23ffc3e:	4618      	mov	r0, r3
 23ffc40:	f000 b844 	b.w	23ffccc <__register_exitproc>

023ffc44 <memcpy>:
 23ffc44:	440a      	add	r2, r1
 23ffc46:	1e43      	subs	r3, r0, #1
 23ffc48:	4291      	cmp	r1, r2
 23ffc4a:	d100      	bne.n	23ffc4e <memcpy+0xa>
 23ffc4c:	4770      	bx	lr
 23ffc4e:	b510      	push	{r4, lr}
 23ffc50:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ffc54:	4291      	cmp	r1, r2
 23ffc56:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ffc5a:	d1f9      	bne.n	23ffc50 <memcpy+0xc>
 23ffc5c:	bd10      	pop	{r4, pc}

023ffc5e <memset>:
 23ffc5e:	4402      	add	r2, r0
 23ffc60:	4603      	mov	r3, r0
 23ffc62:	4293      	cmp	r3, r2
 23ffc64:	d100      	bne.n	23ffc68 <memset+0xa>
 23ffc66:	4770      	bx	lr
 23ffc68:	f803 1b01 	strb.w	r1, [r3], #1
 23ffc6c:	e7f9      	b.n	23ffc62 <memset+0x4>
	...

023ffc70 <srand>:
 23ffc70:	b538      	push	{r3, r4, r5, lr}
 23ffc72:	4b10      	ldr	r3, [pc, #64]	; (23ffcb4 <srand+0x44>)
 23ffc74:	4604      	mov	r4, r0
 23ffc76:	681d      	ldr	r5, [r3, #0]
 23ffc78:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffc7a:	b9b3      	cbnz	r3, 23ffcaa <srand+0x3a>
 23ffc7c:	2018      	movs	r0, #24
 23ffc7e:	f7ff f949 	bl	23fef14 <malloc>
 23ffc82:	4602      	mov	r2, r0
 23ffc84:	63a8      	str	r0, [r5, #56]	; 0x38
 23ffc86:	b920      	cbnz	r0, 23ffc92 <srand+0x22>
 23ffc88:	4b0b      	ldr	r3, [pc, #44]	; (23ffcb8 <srand+0x48>)
 23ffc8a:	2142      	movs	r1, #66	; 0x42
 23ffc8c:	480b      	ldr	r0, [pc, #44]	; (23ffcbc <srand+0x4c>)
 23ffc8e:	f7ff f95d 	bl	23fef4c <__assert_func>
 23ffc92:	490b      	ldr	r1, [pc, #44]	; (23ffcc0 <srand+0x50>)
 23ffc94:	4b0b      	ldr	r3, [pc, #44]	; (23ffcc4 <srand+0x54>)
 23ffc96:	e9c0 1300 	strd	r1, r3, [r0]
 23ffc9a:	4b0b      	ldr	r3, [pc, #44]	; (23ffcc8 <srand+0x58>)
 23ffc9c:	2100      	movs	r1, #0
 23ffc9e:	6083      	str	r3, [r0, #8]
 23ffca0:	230b      	movs	r3, #11
 23ffca2:	8183      	strh	r3, [r0, #12]
 23ffca4:	2001      	movs	r0, #1
 23ffca6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ffcaa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffcac:	2200      	movs	r2, #0
 23ffcae:	611c      	str	r4, [r3, #16]
 23ffcb0:	615a      	str	r2, [r3, #20]
 23ffcb2:	bd38      	pop	{r3, r4, r5, pc}
 23ffcb4:	1007ad04 	.word	0x1007ad04
 23ffcb8:	023fff65 	.word	0x023fff65
 23ffcbc:	023fff7c 	.word	0x023fff7c
 23ffcc0:	abcd330e 	.word	0xabcd330e
 23ffcc4:	e66d1234 	.word	0xe66d1234
 23ffcc8:	0005deec 	.word	0x0005deec

023ffccc <__register_exitproc>:
 23ffccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffcd0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffd90 <__register_exitproc+0xc4>
 23ffcd4:	4606      	mov	r6, r0
 23ffcd6:	461f      	mov	r7, r3
 23ffcd8:	460d      	mov	r5, r1
 23ffcda:	f8d8 0000 	ldr.w	r0, [r8]
 23ffcde:	4691      	mov	r9, r2
 23ffce0:	f000 f858 	bl	23ffd94 <__retarget_lock_acquire_recursive>
 23ffce4:	4b26      	ldr	r3, [pc, #152]	; (23ffd80 <__register_exitproc+0xb4>)
 23ffce6:	681c      	ldr	r4, [r3, #0]
 23ffce8:	b934      	cbnz	r4, 23ffcf8 <__register_exitproc+0x2c>
 23ffcea:	4c26      	ldr	r4, [pc, #152]	; (23ffd84 <__register_exitproc+0xb8>)
 23ffcec:	601c      	str	r4, [r3, #0]
 23ffcee:	4b26      	ldr	r3, [pc, #152]	; (23ffd88 <__register_exitproc+0xbc>)
 23ffcf0:	b113      	cbz	r3, 23ffcf8 <__register_exitproc+0x2c>
 23ffcf2:	681b      	ldr	r3, [r3, #0]
 23ffcf4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffcf8:	6863      	ldr	r3, [r4, #4]
 23ffcfa:	2b1f      	cmp	r3, #31
 23ffcfc:	dd07      	ble.n	23ffd0e <__register_exitproc+0x42>
 23ffcfe:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd02:	f000 f849 	bl	23ffd98 <__retarget_lock_release_recursive>
 23ffd06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffd0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffd0e:	b35e      	cbz	r6, 23ffd68 <__register_exitproc+0x9c>
 23ffd10:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffd14:	b988      	cbnz	r0, 23ffd3a <__register_exitproc+0x6e>
 23ffd16:	4b1d      	ldr	r3, [pc, #116]	; (23ffd8c <__register_exitproc+0xc0>)
 23ffd18:	b923      	cbnz	r3, 23ffd24 <__register_exitproc+0x58>
 23ffd1a:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd1e:	f000 f83a 	bl	23ffd96 <__retarget_lock_release>
 23ffd22:	e7f0      	b.n	23ffd06 <__register_exitproc+0x3a>
 23ffd24:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffd28:	f7ff f8f4 	bl	23fef14 <malloc>
 23ffd2c:	2800      	cmp	r0, #0
 23ffd2e:	d0f4      	beq.n	23ffd1a <__register_exitproc+0x4e>
 23ffd30:	2300      	movs	r3, #0
 23ffd32:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffd36:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffd3a:	6863      	ldr	r3, [r4, #4]
 23ffd3c:	2201      	movs	r2, #1
 23ffd3e:	2e02      	cmp	r6, #2
 23ffd40:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffd44:	fa02 f203 	lsl.w	r2, r2, r3
 23ffd48:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffd4c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffd50:	ea43 0302 	orr.w	r3, r3, r2
 23ffd54:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffd58:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffd5c:	bf02      	ittt	eq
 23ffd5e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffd62:	4313      	orreq	r3, r2
 23ffd64:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffd68:	6863      	ldr	r3, [r4, #4]
 23ffd6a:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd6e:	1c5a      	adds	r2, r3, #1
 23ffd70:	3302      	adds	r3, #2
 23ffd72:	6062      	str	r2, [r4, #4]
 23ffd74:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffd78:	f000 f80e 	bl	23ffd98 <__retarget_lock_release_recursive>
 23ffd7c:	2000      	movs	r0, #0
 23ffd7e:	e7c4      	b.n	23ffd0a <__register_exitproc+0x3e>
 23ffd80:	1007afe0 	.word	0x1007afe0
 23ffd84:	1007af54 	.word	0x1007af54
 23ffd88:	00000000 	.word	0x00000000
 23ffd8c:	023fef15 	.word	0x023fef15
 23ffd90:	1007ad68 	.word	0x1007ad68

023ffd94 <__retarget_lock_acquire_recursive>:
 23ffd94:	4770      	bx	lr

023ffd96 <__retarget_lock_release>:
 23ffd96:	4770      	bx	lr

023ffd98 <__retarget_lock_release_recursive>:
 23ffd98:	4770      	bx	lr
	...

023ffd9c <dynalib_user>:
 23ffd9c:	e551 023f e579 023f e57d 023f 0000 0000     Q.?.y.?.}.?.....
 23ffdac:	4c43 4145 3a4e 0020 554d 4b52 3a59 0020     CLEAN: .MURKY: .
 23ffdbc:	4944 5452 3a59 0020 4454 2053 6156 756c     DIRTY: .TDS Valu
 23ffdcc:	3a65 7000 6d70 4500 2043 6156 756c 3a65     e:.ppm.EC Value:
 23ffddc:	6d00 2f53 006d 0000                         .mS/m...

023ffde4 <_ZTVN5spark13EthernetClassE>:
	...
 23ffdec:	f013 023f f009 023f efff 023f eff5 023f     ..?...?...?...?.
 23ffdfc:	efe9 023f efdd 023f f205 023f f20d 023f     ..?...?...?...?.
 23ffe0c:	efd1 023f efc9 023f efbf 023f efb5 023f     ..?...?...?...?.
 23ffe1c:	f23d 023f                                   =.?.

023ffe20 <_ZTV7TwoWire>:
	...
 23ffe28:	f031 023f f07b 023f f053 023f f033 023f     1.?.{.?.S.?.3.?.
 23ffe38:	f05b 023f f063 023f f06b 023f f073 023f     [.?.c.?.k.?.s.?.

023ffe48 <_ZTV9IPAddress>:
	...
 23ffe50:	f0d5 023f f0c5 023f f0c7 023f 7061 0070     ..?...?...?.app.

023ffe60 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe68:	f1c5 023f f1cf 023f f1d9 023f f1e3 023f     ..?...?...?...?.
 23ffe78:	f1ed 023f f1f9 023f f205 023f f20d 023f     ..?...?...?...?.
 23ffe88:	f215 023f f221 023f f229 023f f233 023f     ..?.!.?.).?.3.?.
 23ffe98:	f23d 023f 616e 006e 6e69 0066 766f 0066     =.?.nan.inf.ovf.
 23ffea8:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
 23ffeb8:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

023ffec8 <_ZTV11USARTSerial>:
	...
 23ffed0:	f5f9 023f f665 023f f63d 023f f329 023f     ..?.e.?.=.?.).?.
 23ffee0:	f60d 023f f629 023f f61b 023f f637 023f     ..?.).?...?.7.?.
 23ffef0:	f5fb 023f f5ff 023f                         ..?...?.

023ffef8 <_ZTV9USBSerial>:
	...
 23fff00:	f6a9 023f f711 023f f6e7 023f f329 023f     ..?...?...?.).?.
 23fff10:	f6d9 023f f6ab 023f f6bb 023f f70b 023f     ..?...?...?...?.
 23fff20:	f6cb 023f f6a3 023f                         ..?...?.

023fff28 <_ZTVN5spark9WiFiClassE>:
	...
 23fff30:	f807 023f f7fd 023f f7f3 023f f7a9 023f     ..?...?...?...?.
 23fff40:	f7e7 023f f7db 023f f205 023f f20d 023f     ..?...?...?...?.
 23fff50:	f7cf 023f f7c7 023f f7bd 023f f7b3 023f     ..?...?...?...?.
 23fff60:	f23d 023f                                   =.?.

023fff64 <_ZSt7nothrow>:
 23fff64:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff74:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff84:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff94:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fffa4:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffb4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffc4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffd5 <link_const_data_end>:
 23fffd5:	00          	.byte	0x00
	...

023fffd8 <link_constructors_location>:
 23fffd8:	023fefa5 	.word	0x023fefa5
 23fffdc:	023ff01d 	.word	0x023ff01d
 23fffe0:	023ff1b5 	.word	0x023ff1b5
 23fffe4:	023ff315 	.word	0x023ff315
 23fffe8:	023ff5a1 	.word	0x023ff5a1
 23fffec:	023ff5c1 	.word	0x023ff5c1
 23ffff0:	023ff5e5 	.word	0x023ff5e5
 23ffff4:	023ff811 	.word	0x023ff811
