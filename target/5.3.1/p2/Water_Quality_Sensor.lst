
/Users/friedl/Desktop/Projects/Water_Quality_Sensor/target/5.3.1/p2/Water_Quality_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fa960  085fa088  0000a960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00005694  023fa968  085fa090  0000a968  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  6 .data         00000074  1007ac98  085ff724  0001ac98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002dc  1007ad0c  1007ad0c  0002ad0c  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff798  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 0000081c  085ff79c  085ff79c  0001f79c  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f79c  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00124366  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00013789  00000000  00000000  00144366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0003f889  00000000  00000000  00157aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002d40  00000000  00000000  00197378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000acc0  00000000  00000000  0019a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00028812  00000000  00000000  001a4d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00044e97  00000000  00000000  001cd58a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000c8298  00000000  00000000  00212421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008518  00000000  00000000  002da6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	480e      	ldr	r0, [pc, #56]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa01a:	490f      	ldr	r1, [pc, #60]	; (85fa058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a0e      	ldr	r2, [pc, #56]	; (85fa05c <module_user_pre_init+0x44>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b0d      	ldr	r3, [pc, #52]	; (85fa060 <module_user_pre_init+0x48>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	480d      	ldr	r0, [pc, #52]	; (85fa064 <module_user_pre_init+0x4c>)
 85fa030:	4a0d      	ldr	r2, [pc, #52]	; (85fa068 <module_user_pre_init+0x50>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b0d      	ldr	r3, [pc, #52]	; (85fa06c <module_user_pre_init+0x54>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa03a:	480d      	ldr	r0, [pc, #52]	; (85fa070 <module_user_pre_init+0x58>)
 85fa03c:	490d      	ldr	r1, [pc, #52]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a0d      	ldr	r2, [pc, #52]	; (85fa078 <module_user_pre_init+0x60>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa048:	4b05      	ldr	r3, [pc, #20]	; (85fa060 <module_user_pre_init+0x48>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa04e:	4801      	ldr	r0, [pc, #4]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa050:	bd08      	pop	{r3, pc}
 85fa052:	bf00      	nop
 85fa054:	1007ac98 	.word	0x1007ac98
 85fa058:	085ff724 	.word	0x085ff724
 85fa05c:	1007ad0c 	.word	0x1007ad0c
 85fa060:	10110d2d 	.word	0x10110d2d
 85fa064:	1007ad0c 	.word	0x1007ad0c
 85fa068:	1007afe8 	.word	0x1007afe8
 85fa06c:	10110ea1 	.word	0x10110ea1
 85fa070:	023fa960 	.word	0x023fa960
 85fa074:	085fa088 	.word	0x085fa088
 85fa078:	023ffffc 	.word	0x023ffffc

085fa07c <dynalib_preinit>:
 85fa07c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023fa968 <__aeabi_drsub>:
 23fa968:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fa96c:	e002      	b.n	23fa974 <__adddf3>
 23fa96e:	bf00      	nop

023fa970 <__aeabi_dsub>:
 23fa970:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fa974 <__adddf3>:
 23fa974:	b530      	push	{r4, r5, lr}
 23fa976:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fa97a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fa97e:	ea94 0f05 	teq	r4, r5
 23fa982:	bf08      	it	eq
 23fa984:	ea90 0f02 	teqeq	r0, r2
 23fa988:	bf1f      	itttt	ne
 23fa98a:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fa98e:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fa992:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fa996:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fa99a:	f000 80e2 	beq.w	23fab62 <__adddf3+0x1ee>
 23fa99e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fa9a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fa9a6:	bfb8      	it	lt
 23fa9a8:	426d      	neglt	r5, r5
 23fa9aa:	dd0c      	ble.n	23fa9c6 <__adddf3+0x52>
 23fa9ac:	442c      	add	r4, r5
 23fa9ae:	ea80 0202 	eor.w	r2, r0, r2
 23fa9b2:	ea81 0303 	eor.w	r3, r1, r3
 23fa9b6:	ea82 0000 	eor.w	r0, r2, r0
 23fa9ba:	ea83 0101 	eor.w	r1, r3, r1
 23fa9be:	ea80 0202 	eor.w	r2, r0, r2
 23fa9c2:	ea81 0303 	eor.w	r3, r1, r3
 23fa9c6:	2d36      	cmp	r5, #54	; 0x36
 23fa9c8:	bf88      	it	hi
 23fa9ca:	bd30      	pophi	{r4, r5, pc}
 23fa9cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fa9d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fa9d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fa9d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fa9dc:	d002      	beq.n	23fa9e4 <__adddf3+0x70>
 23fa9de:	4240      	negs	r0, r0
 23fa9e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fa9e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fa9e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fa9ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fa9f0:	d002      	beq.n	23fa9f8 <__adddf3+0x84>
 23fa9f2:	4252      	negs	r2, r2
 23fa9f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fa9f8:	ea94 0f05 	teq	r4, r5
 23fa9fc:	f000 80a7 	beq.w	23fab4e <__adddf3+0x1da>
 23faa00:	f1a4 0401 	sub.w	r4, r4, #1
 23faa04:	f1d5 0e20 	rsbs	lr, r5, #32
 23faa08:	db0d      	blt.n	23faa26 <__adddf3+0xb2>
 23faa0a:	fa02 fc0e 	lsl.w	ip, r2, lr
 23faa0e:	fa22 f205 	lsr.w	r2, r2, r5
 23faa12:	1880      	adds	r0, r0, r2
 23faa14:	f141 0100 	adc.w	r1, r1, #0
 23faa18:	fa03 f20e 	lsl.w	r2, r3, lr
 23faa1c:	1880      	adds	r0, r0, r2
 23faa1e:	fa43 f305 	asr.w	r3, r3, r5
 23faa22:	4159      	adcs	r1, r3
 23faa24:	e00e      	b.n	23faa44 <__adddf3+0xd0>
 23faa26:	f1a5 0520 	sub.w	r5, r5, #32
 23faa2a:	f10e 0e20 	add.w	lr, lr, #32
 23faa2e:	2a01      	cmp	r2, #1
 23faa30:	fa03 fc0e 	lsl.w	ip, r3, lr
 23faa34:	bf28      	it	cs
 23faa36:	f04c 0c02 	orrcs.w	ip, ip, #2
 23faa3a:	fa43 f305 	asr.w	r3, r3, r5
 23faa3e:	18c0      	adds	r0, r0, r3
 23faa40:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23faa44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23faa48:	d507      	bpl.n	23faa5a <__adddf3+0xe6>
 23faa4a:	f04f 0e00 	mov.w	lr, #0
 23faa4e:	f1dc 0c00 	rsbs	ip, ip, #0
 23faa52:	eb7e 0000 	sbcs.w	r0, lr, r0
 23faa56:	eb6e 0101 	sbc.w	r1, lr, r1
 23faa5a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23faa5e:	d31b      	bcc.n	23faa98 <__adddf3+0x124>
 23faa60:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23faa64:	d30c      	bcc.n	23faa80 <__adddf3+0x10c>
 23faa66:	0849      	lsrs	r1, r1, #1
 23faa68:	ea5f 0030 	movs.w	r0, r0, rrx
 23faa6c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23faa70:	f104 0401 	add.w	r4, r4, #1
 23faa74:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23faa78:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23faa7c:	f080 809a 	bcs.w	23fabb4 <__adddf3+0x240>
 23faa80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23faa84:	bf08      	it	eq
 23faa86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23faa8a:	f150 0000 	adcs.w	r0, r0, #0
 23faa8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23faa92:	ea41 0105 	orr.w	r1, r1, r5
 23faa96:	bd30      	pop	{r4, r5, pc}
 23faa98:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23faa9c:	4140      	adcs	r0, r0
 23faa9e:	eb41 0101 	adc.w	r1, r1, r1
 23faaa2:	3c01      	subs	r4, #1
 23faaa4:	bf28      	it	cs
 23faaa6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23faaaa:	d2e9      	bcs.n	23faa80 <__adddf3+0x10c>
 23faaac:	f091 0f00 	teq	r1, #0
 23faab0:	bf04      	itt	eq
 23faab2:	4601      	moveq	r1, r0
 23faab4:	2000      	moveq	r0, #0
 23faab6:	fab1 f381 	clz	r3, r1
 23faaba:	bf08      	it	eq
 23faabc:	3320      	addeq	r3, #32
 23faabe:	f1a3 030b 	sub.w	r3, r3, #11
 23faac2:	f1b3 0220 	subs.w	r2, r3, #32
 23faac6:	da0c      	bge.n	23faae2 <__adddf3+0x16e>
 23faac8:	320c      	adds	r2, #12
 23faaca:	dd08      	ble.n	23faade <__adddf3+0x16a>
 23faacc:	f102 0c14 	add.w	ip, r2, #20
 23faad0:	f1c2 020c 	rsb	r2, r2, #12
 23faad4:	fa01 f00c 	lsl.w	r0, r1, ip
 23faad8:	fa21 f102 	lsr.w	r1, r1, r2
 23faadc:	e00c      	b.n	23faaf8 <__adddf3+0x184>
 23faade:	f102 0214 	add.w	r2, r2, #20
 23faae2:	bfd8      	it	le
 23faae4:	f1c2 0c20 	rsble	ip, r2, #32
 23faae8:	fa01 f102 	lsl.w	r1, r1, r2
 23faaec:	fa20 fc0c 	lsr.w	ip, r0, ip
 23faaf0:	bfdc      	itt	le
 23faaf2:	ea41 010c 	orrle.w	r1, r1, ip
 23faaf6:	4090      	lslle	r0, r2
 23faaf8:	1ae4      	subs	r4, r4, r3
 23faafa:	bfa2      	ittt	ge
 23faafc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fab00:	4329      	orrge	r1, r5
 23fab02:	bd30      	popge	{r4, r5, pc}
 23fab04:	ea6f 0404 	mvn.w	r4, r4
 23fab08:	3c1f      	subs	r4, #31
 23fab0a:	da1c      	bge.n	23fab46 <__adddf3+0x1d2>
 23fab0c:	340c      	adds	r4, #12
 23fab0e:	dc0e      	bgt.n	23fab2e <__adddf3+0x1ba>
 23fab10:	f104 0414 	add.w	r4, r4, #20
 23fab14:	f1c4 0220 	rsb	r2, r4, #32
 23fab18:	fa20 f004 	lsr.w	r0, r0, r4
 23fab1c:	fa01 f302 	lsl.w	r3, r1, r2
 23fab20:	ea40 0003 	orr.w	r0, r0, r3
 23fab24:	fa21 f304 	lsr.w	r3, r1, r4
 23fab28:	ea45 0103 	orr.w	r1, r5, r3
 23fab2c:	bd30      	pop	{r4, r5, pc}
 23fab2e:	f1c4 040c 	rsb	r4, r4, #12
 23fab32:	f1c4 0220 	rsb	r2, r4, #32
 23fab36:	fa20 f002 	lsr.w	r0, r0, r2
 23fab3a:	fa01 f304 	lsl.w	r3, r1, r4
 23fab3e:	ea40 0003 	orr.w	r0, r0, r3
 23fab42:	4629      	mov	r1, r5
 23fab44:	bd30      	pop	{r4, r5, pc}
 23fab46:	fa21 f004 	lsr.w	r0, r1, r4
 23fab4a:	4629      	mov	r1, r5
 23fab4c:	bd30      	pop	{r4, r5, pc}
 23fab4e:	f094 0f00 	teq	r4, #0
 23fab52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fab56:	bf06      	itte	eq
 23fab58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fab5c:	3401      	addeq	r4, #1
 23fab5e:	3d01      	subne	r5, #1
 23fab60:	e74e      	b.n	23faa00 <__adddf3+0x8c>
 23fab62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fab66:	bf18      	it	ne
 23fab68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fab6c:	d029      	beq.n	23fabc2 <__adddf3+0x24e>
 23fab6e:	ea94 0f05 	teq	r4, r5
 23fab72:	bf08      	it	eq
 23fab74:	ea90 0f02 	teqeq	r0, r2
 23fab78:	d005      	beq.n	23fab86 <__adddf3+0x212>
 23fab7a:	ea54 0c00 	orrs.w	ip, r4, r0
 23fab7e:	bf04      	itt	eq
 23fab80:	4619      	moveq	r1, r3
 23fab82:	4610      	moveq	r0, r2
 23fab84:	bd30      	pop	{r4, r5, pc}
 23fab86:	ea91 0f03 	teq	r1, r3
 23fab8a:	bf1e      	ittt	ne
 23fab8c:	2100      	movne	r1, #0
 23fab8e:	2000      	movne	r0, #0
 23fab90:	bd30      	popne	{r4, r5, pc}
 23fab92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fab96:	d105      	bne.n	23faba4 <__adddf3+0x230>
 23fab98:	0040      	lsls	r0, r0, #1
 23fab9a:	4149      	adcs	r1, r1
 23fab9c:	bf28      	it	cs
 23fab9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23faba2:	bd30      	pop	{r4, r5, pc}
 23faba4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23faba8:	bf3c      	itt	cc
 23fabaa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fabae:	bd30      	popcc	{r4, r5, pc}
 23fabb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fabb4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fabb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fabbc:	f04f 0000 	mov.w	r0, #0
 23fabc0:	bd30      	pop	{r4, r5, pc}
 23fabc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fabc6:	bf1a      	itte	ne
 23fabc8:	4619      	movne	r1, r3
 23fabca:	4610      	movne	r0, r2
 23fabcc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fabd0:	bf1c      	itt	ne
 23fabd2:	460b      	movne	r3, r1
 23fabd4:	4602      	movne	r2, r0
 23fabd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fabda:	bf06      	itte	eq
 23fabdc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fabe0:	ea91 0f03 	teqeq	r1, r3
 23fabe4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fabe8:	bd30      	pop	{r4, r5, pc}
 23fabea:	bf00      	nop

023fabec <__aeabi_ui2d>:
 23fabec:	f090 0f00 	teq	r0, #0
 23fabf0:	bf04      	itt	eq
 23fabf2:	2100      	moveq	r1, #0
 23fabf4:	4770      	bxeq	lr
 23fabf6:	b530      	push	{r4, r5, lr}
 23fabf8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fabfc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fac00:	f04f 0500 	mov.w	r5, #0
 23fac04:	f04f 0100 	mov.w	r1, #0
 23fac08:	e750      	b.n	23faaac <__adddf3+0x138>
 23fac0a:	bf00      	nop

023fac0c <__aeabi_i2d>:
 23fac0c:	f090 0f00 	teq	r0, #0
 23fac10:	bf04      	itt	eq
 23fac12:	2100      	moveq	r1, #0
 23fac14:	4770      	bxeq	lr
 23fac16:	b530      	push	{r4, r5, lr}
 23fac18:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fac1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fac20:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fac24:	bf48      	it	mi
 23fac26:	4240      	negmi	r0, r0
 23fac28:	f04f 0100 	mov.w	r1, #0
 23fac2c:	e73e      	b.n	23faaac <__adddf3+0x138>
 23fac2e:	bf00      	nop

023fac30 <__aeabi_f2d>:
 23fac30:	0042      	lsls	r2, r0, #1
 23fac32:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fac36:	ea4f 0131 	mov.w	r1, r1, rrx
 23fac3a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fac3e:	bf1f      	itttt	ne
 23fac40:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fac44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fac48:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fac4c:	4770      	bxne	lr
 23fac4e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fac52:	bf08      	it	eq
 23fac54:	4770      	bxeq	lr
 23fac56:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fac5a:	bf04      	itt	eq
 23fac5c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fac60:	4770      	bxeq	lr
 23fac62:	b530      	push	{r4, r5, lr}
 23fac64:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fac68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fac6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fac70:	e71c      	b.n	23faaac <__adddf3+0x138>
 23fac72:	bf00      	nop

023fac74 <__aeabi_ul2d>:
 23fac74:	ea50 0201 	orrs.w	r2, r0, r1
 23fac78:	bf08      	it	eq
 23fac7a:	4770      	bxeq	lr
 23fac7c:	b530      	push	{r4, r5, lr}
 23fac7e:	f04f 0500 	mov.w	r5, #0
 23fac82:	e00a      	b.n	23fac9a <__aeabi_l2d+0x16>

023fac84 <__aeabi_l2d>:
 23fac84:	ea50 0201 	orrs.w	r2, r0, r1
 23fac88:	bf08      	it	eq
 23fac8a:	4770      	bxeq	lr
 23fac8c:	b530      	push	{r4, r5, lr}
 23fac8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fac92:	d502      	bpl.n	23fac9a <__aeabi_l2d+0x16>
 23fac94:	4240      	negs	r0, r0
 23fac96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fac9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fac9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23faca2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23faca6:	f43f aed8 	beq.w	23faa5a <__adddf3+0xe6>
 23facaa:	f04f 0203 	mov.w	r2, #3
 23facae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23facb2:	bf18      	it	ne
 23facb4:	3203      	addne	r2, #3
 23facb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23facba:	bf18      	it	ne
 23facbc:	3203      	addne	r2, #3
 23facbe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23facc2:	f1c2 0320 	rsb	r3, r2, #32
 23facc6:	fa00 fc03 	lsl.w	ip, r0, r3
 23facca:	fa20 f002 	lsr.w	r0, r0, r2
 23facce:	fa01 fe03 	lsl.w	lr, r1, r3
 23facd2:	ea40 000e 	orr.w	r0, r0, lr
 23facd6:	fa21 f102 	lsr.w	r1, r1, r2
 23facda:	4414      	add	r4, r2
 23facdc:	e6bd      	b.n	23faa5a <__adddf3+0xe6>
 23facde:	bf00      	nop

023face0 <__aeabi_dmul>:
 23face0:	b570      	push	{r4, r5, r6, lr}
 23face2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23face6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23facea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23facee:	bf1d      	ittte	ne
 23facf0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23facf4:	ea94 0f0c 	teqne	r4, ip
 23facf8:	ea95 0f0c 	teqne	r5, ip
 23facfc:	f000 f8de 	bleq	23faebc <__aeabi_dmul+0x1dc>
 23fad00:	442c      	add	r4, r5
 23fad02:	ea81 0603 	eor.w	r6, r1, r3
 23fad06:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fad0a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fad0e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fad12:	bf18      	it	ne
 23fad14:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fad18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fad1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fad20:	d038      	beq.n	23fad94 <__aeabi_dmul+0xb4>
 23fad22:	fba0 ce02 	umull	ip, lr, r0, r2
 23fad26:	f04f 0500 	mov.w	r5, #0
 23fad2a:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fad2e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fad32:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fad36:	f04f 0600 	mov.w	r6, #0
 23fad3a:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fad3e:	f09c 0f00 	teq	ip, #0
 23fad42:	bf18      	it	ne
 23fad44:	f04e 0e01 	orrne.w	lr, lr, #1
 23fad48:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fad4c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fad50:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fad54:	d204      	bcs.n	23fad60 <__aeabi_dmul+0x80>
 23fad56:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fad5a:	416d      	adcs	r5, r5
 23fad5c:	eb46 0606 	adc.w	r6, r6, r6
 23fad60:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fad64:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fad68:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fad6c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fad70:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fad74:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fad78:	bf88      	it	hi
 23fad7a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fad7e:	d81e      	bhi.n	23fadbe <__aeabi_dmul+0xde>
 23fad80:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fad84:	bf08      	it	eq
 23fad86:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fad8a:	f150 0000 	adcs.w	r0, r0, #0
 23fad8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fad92:	bd70      	pop	{r4, r5, r6, pc}
 23fad94:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fad98:	ea46 0101 	orr.w	r1, r6, r1
 23fad9c:	ea40 0002 	orr.w	r0, r0, r2
 23fada0:	ea81 0103 	eor.w	r1, r1, r3
 23fada4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fada8:	bfc2      	ittt	gt
 23fadaa:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fadae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fadb2:	bd70      	popgt	{r4, r5, r6, pc}
 23fadb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fadb8:	f04f 0e00 	mov.w	lr, #0
 23fadbc:	3c01      	subs	r4, #1
 23fadbe:	f300 80ab 	bgt.w	23faf18 <__aeabi_dmul+0x238>
 23fadc2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fadc6:	bfde      	ittt	le
 23fadc8:	2000      	movle	r0, #0
 23fadca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fadce:	bd70      	pople	{r4, r5, r6, pc}
 23fadd0:	f1c4 0400 	rsb	r4, r4, #0
 23fadd4:	3c20      	subs	r4, #32
 23fadd6:	da35      	bge.n	23fae44 <__aeabi_dmul+0x164>
 23fadd8:	340c      	adds	r4, #12
 23fadda:	dc1b      	bgt.n	23fae14 <__aeabi_dmul+0x134>
 23faddc:	f104 0414 	add.w	r4, r4, #20
 23fade0:	f1c4 0520 	rsb	r5, r4, #32
 23fade4:	fa00 f305 	lsl.w	r3, r0, r5
 23fade8:	fa20 f004 	lsr.w	r0, r0, r4
 23fadec:	fa01 f205 	lsl.w	r2, r1, r5
 23fadf0:	ea40 0002 	orr.w	r0, r0, r2
 23fadf4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fadf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fadfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fae00:	fa21 f604 	lsr.w	r6, r1, r4
 23fae04:	eb42 0106 	adc.w	r1, r2, r6
 23fae08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fae0c:	bf08      	it	eq
 23fae0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fae12:	bd70      	pop	{r4, r5, r6, pc}
 23fae14:	f1c4 040c 	rsb	r4, r4, #12
 23fae18:	f1c4 0520 	rsb	r5, r4, #32
 23fae1c:	fa00 f304 	lsl.w	r3, r0, r4
 23fae20:	fa20 f005 	lsr.w	r0, r0, r5
 23fae24:	fa01 f204 	lsl.w	r2, r1, r4
 23fae28:	ea40 0002 	orr.w	r0, r0, r2
 23fae2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fae30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fae34:	f141 0100 	adc.w	r1, r1, #0
 23fae38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fae3c:	bf08      	it	eq
 23fae3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fae42:	bd70      	pop	{r4, r5, r6, pc}
 23fae44:	f1c4 0520 	rsb	r5, r4, #32
 23fae48:	fa00 f205 	lsl.w	r2, r0, r5
 23fae4c:	ea4e 0e02 	orr.w	lr, lr, r2
 23fae50:	fa20 f304 	lsr.w	r3, r0, r4
 23fae54:	fa01 f205 	lsl.w	r2, r1, r5
 23fae58:	ea43 0302 	orr.w	r3, r3, r2
 23fae5c:	fa21 f004 	lsr.w	r0, r1, r4
 23fae60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fae64:	fa21 f204 	lsr.w	r2, r1, r4
 23fae68:	ea20 0002 	bic.w	r0, r0, r2
 23fae6c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fae70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fae74:	bf08      	it	eq
 23fae76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fae7a:	bd70      	pop	{r4, r5, r6, pc}
 23fae7c:	f094 0f00 	teq	r4, #0
 23fae80:	d10f      	bne.n	23faea2 <__aeabi_dmul+0x1c2>
 23fae82:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fae86:	0040      	lsls	r0, r0, #1
 23fae88:	eb41 0101 	adc.w	r1, r1, r1
 23fae8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fae90:	bf08      	it	eq
 23fae92:	3c01      	subeq	r4, #1
 23fae94:	d0f7      	beq.n	23fae86 <__aeabi_dmul+0x1a6>
 23fae96:	ea41 0106 	orr.w	r1, r1, r6
 23fae9a:	f095 0f00 	teq	r5, #0
 23fae9e:	bf18      	it	ne
 23faea0:	4770      	bxne	lr
 23faea2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23faea6:	0052      	lsls	r2, r2, #1
 23faea8:	eb43 0303 	adc.w	r3, r3, r3
 23faeac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23faeb0:	bf08      	it	eq
 23faeb2:	3d01      	subeq	r5, #1
 23faeb4:	d0f7      	beq.n	23faea6 <__aeabi_dmul+0x1c6>
 23faeb6:	ea43 0306 	orr.w	r3, r3, r6
 23faeba:	4770      	bx	lr
 23faebc:	ea94 0f0c 	teq	r4, ip
 23faec0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23faec4:	bf18      	it	ne
 23faec6:	ea95 0f0c 	teqne	r5, ip
 23faeca:	d00c      	beq.n	23faee6 <__aeabi_dmul+0x206>
 23faecc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23faed0:	bf18      	it	ne
 23faed2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23faed6:	d1d1      	bne.n	23fae7c <__aeabi_dmul+0x19c>
 23faed8:	ea81 0103 	eor.w	r1, r1, r3
 23faedc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23faee0:	f04f 0000 	mov.w	r0, #0
 23faee4:	bd70      	pop	{r4, r5, r6, pc}
 23faee6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23faeea:	bf06      	itte	eq
 23faeec:	4610      	moveq	r0, r2
 23faeee:	4619      	moveq	r1, r3
 23faef0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23faef4:	d019      	beq.n	23faf2a <__aeabi_dmul+0x24a>
 23faef6:	ea94 0f0c 	teq	r4, ip
 23faefa:	d102      	bne.n	23faf02 <__aeabi_dmul+0x222>
 23faefc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23faf00:	d113      	bne.n	23faf2a <__aeabi_dmul+0x24a>
 23faf02:	ea95 0f0c 	teq	r5, ip
 23faf06:	d105      	bne.n	23faf14 <__aeabi_dmul+0x234>
 23faf08:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23faf0c:	bf1c      	itt	ne
 23faf0e:	4610      	movne	r0, r2
 23faf10:	4619      	movne	r1, r3
 23faf12:	d10a      	bne.n	23faf2a <__aeabi_dmul+0x24a>
 23faf14:	ea81 0103 	eor.w	r1, r1, r3
 23faf18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23faf1c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23faf20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23faf24:	f04f 0000 	mov.w	r0, #0
 23faf28:	bd70      	pop	{r4, r5, r6, pc}
 23faf2a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23faf2e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23faf32:	bd70      	pop	{r4, r5, r6, pc}

023faf34 <__aeabi_ddiv>:
 23faf34:	b570      	push	{r4, r5, r6, lr}
 23faf36:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23faf3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23faf3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23faf42:	bf1d      	ittte	ne
 23faf44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23faf48:	ea94 0f0c 	teqne	r4, ip
 23faf4c:	ea95 0f0c 	teqne	r5, ip
 23faf50:	f000 f8a7 	bleq	23fb0a2 <__aeabi_ddiv+0x16e>
 23faf54:	eba4 0405 	sub.w	r4, r4, r5
 23faf58:	ea81 0e03 	eor.w	lr, r1, r3
 23faf5c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23faf60:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23faf64:	f000 8088 	beq.w	23fb078 <__aeabi_ddiv+0x144>
 23faf68:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23faf6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23faf70:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23faf74:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23faf78:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23faf7c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23faf80:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23faf84:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23faf88:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23faf8c:	429d      	cmp	r5, r3
 23faf8e:	bf08      	it	eq
 23faf90:	4296      	cmpeq	r6, r2
 23faf92:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23faf96:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23faf9a:	d202      	bcs.n	23fafa2 <__aeabi_ddiv+0x6e>
 23faf9c:	085b      	lsrs	r3, r3, #1
 23faf9e:	ea4f 0232 	mov.w	r2, r2, rrx
 23fafa2:	1ab6      	subs	r6, r6, r2
 23fafa4:	eb65 0503 	sbc.w	r5, r5, r3
 23fafa8:	085b      	lsrs	r3, r3, #1
 23fafaa:	ea4f 0232 	mov.w	r2, r2, rrx
 23fafae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fafb2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fafb6:	ebb6 0e02 	subs.w	lr, r6, r2
 23fafba:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fafbe:	bf22      	ittt	cs
 23fafc0:	1ab6      	subcs	r6, r6, r2
 23fafc2:	4675      	movcs	r5, lr
 23fafc4:	ea40 000c 	orrcs.w	r0, r0, ip
 23fafc8:	085b      	lsrs	r3, r3, #1
 23fafca:	ea4f 0232 	mov.w	r2, r2, rrx
 23fafce:	ebb6 0e02 	subs.w	lr, r6, r2
 23fafd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fafd6:	bf22      	ittt	cs
 23fafd8:	1ab6      	subcs	r6, r6, r2
 23fafda:	4675      	movcs	r5, lr
 23fafdc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fafe0:	085b      	lsrs	r3, r3, #1
 23fafe2:	ea4f 0232 	mov.w	r2, r2, rrx
 23fafe6:	ebb6 0e02 	subs.w	lr, r6, r2
 23fafea:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fafee:	bf22      	ittt	cs
 23faff0:	1ab6      	subcs	r6, r6, r2
 23faff2:	4675      	movcs	r5, lr
 23faff4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23faff8:	085b      	lsrs	r3, r3, #1
 23faffa:	ea4f 0232 	mov.w	r2, r2, rrx
 23faffe:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb002:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb006:	bf22      	ittt	cs
 23fb008:	1ab6      	subcs	r6, r6, r2
 23fb00a:	4675      	movcs	r5, lr
 23fb00c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fb010:	ea55 0e06 	orrs.w	lr, r5, r6
 23fb014:	d018      	beq.n	23fb048 <__aeabi_ddiv+0x114>
 23fb016:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fb01a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fb01e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fb022:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fb026:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fb02a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fb02e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fb032:	d1c0      	bne.n	23fafb6 <__aeabi_ddiv+0x82>
 23fb034:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fb038:	d10b      	bne.n	23fb052 <__aeabi_ddiv+0x11e>
 23fb03a:	ea41 0100 	orr.w	r1, r1, r0
 23fb03e:	f04f 0000 	mov.w	r0, #0
 23fb042:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fb046:	e7b6      	b.n	23fafb6 <__aeabi_ddiv+0x82>
 23fb048:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fb04c:	bf04      	itt	eq
 23fb04e:	4301      	orreq	r1, r0
 23fb050:	2000      	moveq	r0, #0
 23fb052:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fb056:	bf88      	it	hi
 23fb058:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fb05c:	f63f aeaf 	bhi.w	23fadbe <__aeabi_dmul+0xde>
 23fb060:	ebb5 0c03 	subs.w	ip, r5, r3
 23fb064:	bf04      	itt	eq
 23fb066:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fb06a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fb06e:	f150 0000 	adcs.w	r0, r0, #0
 23fb072:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fb076:	bd70      	pop	{r4, r5, r6, pc}
 23fb078:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fb07c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fb080:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fb084:	bfc2      	ittt	gt
 23fb086:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fb08a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fb08e:	bd70      	popgt	{r4, r5, r6, pc}
 23fb090:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb094:	f04f 0e00 	mov.w	lr, #0
 23fb098:	3c01      	subs	r4, #1
 23fb09a:	e690      	b.n	23fadbe <__aeabi_dmul+0xde>
 23fb09c:	ea45 0e06 	orr.w	lr, r5, r6
 23fb0a0:	e68d      	b.n	23fadbe <__aeabi_dmul+0xde>
 23fb0a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fb0a6:	ea94 0f0c 	teq	r4, ip
 23fb0aa:	bf08      	it	eq
 23fb0ac:	ea95 0f0c 	teqeq	r5, ip
 23fb0b0:	f43f af3b 	beq.w	23faf2a <__aeabi_dmul+0x24a>
 23fb0b4:	ea94 0f0c 	teq	r4, ip
 23fb0b8:	d10a      	bne.n	23fb0d0 <__aeabi_ddiv+0x19c>
 23fb0ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fb0be:	f47f af34 	bne.w	23faf2a <__aeabi_dmul+0x24a>
 23fb0c2:	ea95 0f0c 	teq	r5, ip
 23fb0c6:	f47f af25 	bne.w	23faf14 <__aeabi_dmul+0x234>
 23fb0ca:	4610      	mov	r0, r2
 23fb0cc:	4619      	mov	r1, r3
 23fb0ce:	e72c      	b.n	23faf2a <__aeabi_dmul+0x24a>
 23fb0d0:	ea95 0f0c 	teq	r5, ip
 23fb0d4:	d106      	bne.n	23fb0e4 <__aeabi_ddiv+0x1b0>
 23fb0d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fb0da:	f43f aefd 	beq.w	23faed8 <__aeabi_dmul+0x1f8>
 23fb0de:	4610      	mov	r0, r2
 23fb0e0:	4619      	mov	r1, r3
 23fb0e2:	e722      	b.n	23faf2a <__aeabi_dmul+0x24a>
 23fb0e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fb0e8:	bf18      	it	ne
 23fb0ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fb0ee:	f47f aec5 	bne.w	23fae7c <__aeabi_dmul+0x19c>
 23fb0f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fb0f6:	f47f af0d 	bne.w	23faf14 <__aeabi_dmul+0x234>
 23fb0fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fb0fe:	f47f aeeb 	bne.w	23faed8 <__aeabi_dmul+0x1f8>
 23fb102:	e712      	b.n	23faf2a <__aeabi_dmul+0x24a>

023fb104 <__gedf2>:
 23fb104:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fb108:	e006      	b.n	23fb118 <__cmpdf2+0x4>
 23fb10a:	bf00      	nop

023fb10c <__ledf2>:
 23fb10c:	f04f 0c01 	mov.w	ip, #1
 23fb110:	e002      	b.n	23fb118 <__cmpdf2+0x4>
 23fb112:	bf00      	nop

023fb114 <__cmpdf2>:
 23fb114:	f04f 0c01 	mov.w	ip, #1
 23fb118:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fb11c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fb120:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb124:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fb128:	bf18      	it	ne
 23fb12a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fb12e:	d01b      	beq.n	23fb168 <__cmpdf2+0x54>
 23fb130:	b001      	add	sp, #4
 23fb132:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fb136:	bf0c      	ite	eq
 23fb138:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fb13c:	ea91 0f03 	teqne	r1, r3
 23fb140:	bf02      	ittt	eq
 23fb142:	ea90 0f02 	teqeq	r0, r2
 23fb146:	2000      	moveq	r0, #0
 23fb148:	4770      	bxeq	lr
 23fb14a:	f110 0f00 	cmn.w	r0, #0
 23fb14e:	ea91 0f03 	teq	r1, r3
 23fb152:	bf58      	it	pl
 23fb154:	4299      	cmppl	r1, r3
 23fb156:	bf08      	it	eq
 23fb158:	4290      	cmpeq	r0, r2
 23fb15a:	bf2c      	ite	cs
 23fb15c:	17d8      	asrcs	r0, r3, #31
 23fb15e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fb162:	f040 0001 	orr.w	r0, r0, #1
 23fb166:	4770      	bx	lr
 23fb168:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fb16c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb170:	d102      	bne.n	23fb178 <__cmpdf2+0x64>
 23fb172:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fb176:	d107      	bne.n	23fb188 <__cmpdf2+0x74>
 23fb178:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fb17c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb180:	d1d6      	bne.n	23fb130 <__cmpdf2+0x1c>
 23fb182:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fb186:	d0d3      	beq.n	23fb130 <__cmpdf2+0x1c>
 23fb188:	f85d 0b04 	ldr.w	r0, [sp], #4
 23fb18c:	4770      	bx	lr
 23fb18e:	bf00      	nop

023fb190 <__aeabi_cdrcmple>:
 23fb190:	4684      	mov	ip, r0
 23fb192:	4610      	mov	r0, r2
 23fb194:	4662      	mov	r2, ip
 23fb196:	468c      	mov	ip, r1
 23fb198:	4619      	mov	r1, r3
 23fb19a:	4663      	mov	r3, ip
 23fb19c:	e000      	b.n	23fb1a0 <__aeabi_cdcmpeq>
 23fb19e:	bf00      	nop

023fb1a0 <__aeabi_cdcmpeq>:
 23fb1a0:	b501      	push	{r0, lr}
 23fb1a2:	f7ff ffb7 	bl	23fb114 <__cmpdf2>
 23fb1a6:	2800      	cmp	r0, #0
 23fb1a8:	bf48      	it	mi
 23fb1aa:	f110 0f00 	cmnmi.w	r0, #0
 23fb1ae:	bd01      	pop	{r0, pc}

023fb1b0 <__aeabi_dcmpeq>:
 23fb1b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb1b4:	f7ff fff4 	bl	23fb1a0 <__aeabi_cdcmpeq>
 23fb1b8:	bf0c      	ite	eq
 23fb1ba:	2001      	moveq	r0, #1
 23fb1bc:	2000      	movne	r0, #0
 23fb1be:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb1c2:	bf00      	nop

023fb1c4 <__aeabi_dcmplt>:
 23fb1c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb1c8:	f7ff ffea 	bl	23fb1a0 <__aeabi_cdcmpeq>
 23fb1cc:	bf34      	ite	cc
 23fb1ce:	2001      	movcc	r0, #1
 23fb1d0:	2000      	movcs	r0, #0
 23fb1d2:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb1d6:	bf00      	nop

023fb1d8 <__aeabi_dcmple>:
 23fb1d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb1dc:	f7ff ffe0 	bl	23fb1a0 <__aeabi_cdcmpeq>
 23fb1e0:	bf94      	ite	ls
 23fb1e2:	2001      	movls	r0, #1
 23fb1e4:	2000      	movhi	r0, #0
 23fb1e6:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb1ea:	bf00      	nop

023fb1ec <__aeabi_dcmpge>:
 23fb1ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb1f0:	f7ff ffce 	bl	23fb190 <__aeabi_cdrcmple>
 23fb1f4:	bf94      	ite	ls
 23fb1f6:	2001      	movls	r0, #1
 23fb1f8:	2000      	movhi	r0, #0
 23fb1fa:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb1fe:	bf00      	nop

023fb200 <__aeabi_dcmpgt>:
 23fb200:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fb204:	f7ff ffc4 	bl	23fb190 <__aeabi_cdrcmple>
 23fb208:	bf34      	ite	cc
 23fb20a:	2001      	movcc	r0, #1
 23fb20c:	2000      	movcs	r0, #0
 23fb20e:	f85d fb08 	ldr.w	pc, [sp], #8
 23fb212:	bf00      	nop

023fb214 <__aeabi_dcmpun>:
 23fb214:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fb218:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb21c:	d102      	bne.n	23fb224 <__aeabi_dcmpun+0x10>
 23fb21e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fb222:	d10a      	bne.n	23fb23a <__aeabi_dcmpun+0x26>
 23fb224:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fb228:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fb22c:	d102      	bne.n	23fb234 <__aeabi_dcmpun+0x20>
 23fb22e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fb232:	d102      	bne.n	23fb23a <__aeabi_dcmpun+0x26>
 23fb234:	f04f 0000 	mov.w	r0, #0
 23fb238:	4770      	bx	lr
 23fb23a:	f04f 0001 	mov.w	r0, #1
 23fb23e:	4770      	bx	lr

023fb240 <__aeabi_d2iz>:
 23fb240:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fb244:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fb248:	d215      	bcs.n	23fb276 <__aeabi_d2iz+0x36>
 23fb24a:	d511      	bpl.n	23fb270 <__aeabi_d2iz+0x30>
 23fb24c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fb250:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fb254:	d912      	bls.n	23fb27c <__aeabi_d2iz+0x3c>
 23fb256:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fb25a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fb25e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fb262:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fb266:	fa23 f002 	lsr.w	r0, r3, r2
 23fb26a:	bf18      	it	ne
 23fb26c:	4240      	negne	r0, r0
 23fb26e:	4770      	bx	lr
 23fb270:	f04f 0000 	mov.w	r0, #0
 23fb274:	4770      	bx	lr
 23fb276:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fb27a:	d105      	bne.n	23fb288 <__aeabi_d2iz+0x48>
 23fb27c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23fb280:	bf08      	it	eq
 23fb282:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23fb286:	4770      	bx	lr
 23fb288:	f04f 0000 	mov.w	r0, #0
 23fb28c:	4770      	bx	lr
 23fb28e:	bf00      	nop

023fb290 <__aeabi_d2uiz>:
 23fb290:	004a      	lsls	r2, r1, #1
 23fb292:	d211      	bcs.n	23fb2b8 <__aeabi_d2uiz+0x28>
 23fb294:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fb298:	d211      	bcs.n	23fb2be <__aeabi_d2uiz+0x2e>
 23fb29a:	d50d      	bpl.n	23fb2b8 <__aeabi_d2uiz+0x28>
 23fb29c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fb2a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fb2a4:	d40e      	bmi.n	23fb2c4 <__aeabi_d2uiz+0x34>
 23fb2a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fb2aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fb2ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fb2b2:	fa23 f002 	lsr.w	r0, r3, r2
 23fb2b6:	4770      	bx	lr
 23fb2b8:	f04f 0000 	mov.w	r0, #0
 23fb2bc:	4770      	bx	lr
 23fb2be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fb2c2:	d102      	bne.n	23fb2ca <__aeabi_d2uiz+0x3a>
 23fb2c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fb2c8:	4770      	bx	lr
 23fb2ca:	f04f 0000 	mov.w	r0, #0
 23fb2ce:	4770      	bx	lr

023fb2d0 <__aeabi_d2f>:
 23fb2d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fb2d4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fb2d8:	bf24      	itt	cs
 23fb2da:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fb2de:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fb2e2:	d90d      	bls.n	23fb300 <__aeabi_d2f+0x30>
 23fb2e4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fb2e8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fb2ec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fb2f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fb2f4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fb2f8:	bf08      	it	eq
 23fb2fa:	f020 0001 	biceq.w	r0, r0, #1
 23fb2fe:	4770      	bx	lr
 23fb300:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fb304:	d121      	bne.n	23fb34a <__aeabi_d2f+0x7a>
 23fb306:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fb30a:	bfbc      	itt	lt
 23fb30c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fb310:	4770      	bxlt	lr
 23fb312:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb316:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fb31a:	f1c2 0218 	rsb	r2, r2, #24
 23fb31e:	f1c2 0c20 	rsb	ip, r2, #32
 23fb322:	fa10 f30c 	lsls.w	r3, r0, ip
 23fb326:	fa20 f002 	lsr.w	r0, r0, r2
 23fb32a:	bf18      	it	ne
 23fb32c:	f040 0001 	orrne.w	r0, r0, #1
 23fb330:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fb334:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fb338:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fb33c:	ea40 000c 	orr.w	r0, r0, ip
 23fb340:	fa23 f302 	lsr.w	r3, r3, r2
 23fb344:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fb348:	e7cc      	b.n	23fb2e4 <__aeabi_d2f+0x14>
 23fb34a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fb34e:	d107      	bne.n	23fb360 <__aeabi_d2f+0x90>
 23fb350:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fb354:	bf1e      	ittt	ne
 23fb356:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fb35a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fb35e:	4770      	bxne	lr
 23fb360:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fb364:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fb368:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fb36c:	4770      	bx	lr
 23fb36e:	bf00      	nop

023fb370 <strlen>:
 23fb370:	4603      	mov	r3, r0
 23fb372:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb376:	2a00      	cmp	r2, #0
 23fb378:	d1fb      	bne.n	23fb372 <strlen+0x2>
 23fb37a:	1a18      	subs	r0, r3, r0
 23fb37c:	3801      	subs	r0, #1
 23fb37e:	4770      	bx	lr

023fb380 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fb380:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fb382:	f002 fda7 	bl	23fded4 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb386:	2500      	movs	r5, #0
 23fb388:	4e05      	ldr	r6, [pc, #20]	; (23fb3a0 <module_user_init+0x20>)
 23fb38a:	4c06      	ldr	r4, [pc, #24]	; (23fb3a4 <module_user_init+0x24>)
 23fb38c:	1ba4      	subs	r4, r4, r6
 23fb38e:	08a4      	lsrs	r4, r4, #2
 23fb390:	42ac      	cmp	r4, r5
 23fb392:	d100      	bne.n	23fb396 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fb394:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fb396:	f856 3b04 	ldr.w	r3, [r6], #4
 23fb39a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb39c:	3501      	adds	r5, #1
 23fb39e:	e7f7      	b.n	23fb390 <module_user_init+0x10>
 23fb3a0:	023fffd8 	.word	0x023fffd8
 23fb3a4:	023ffffc 	.word	0x023ffffc

023fb3a8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fb3a8:	f000 b89c 	b.w	23fb4e4 <setup>

023fb3ac <module_user_loop>:
}

void module_user_loop() {
 23fb3ac:	b508      	push	{r3, lr}
    loop();
 23fb3ae:	f000 fb7f 	bl	23fbab0 <loop>
    _post_loop();
}
 23fb3b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fb3b6:	f002 bd45 	b.w	23fde44 <_post_loop>

023fb3ba <_Znaj>:
 23fb3ba:	f001 bfcb 	b.w	23fd354 <malloc>

023fb3be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fb3be:	f001 bfd7 	b.w	23fd370 <free>
	...

023fb3c4 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb3c4:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fb3c6:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb3c8:	4a02      	ldr	r2, [pc, #8]	; (23fb3d4 <__cxa_pure_virtual+0x10>)
 23fb3ca:	4903      	ldr	r1, [pc, #12]	; (23fb3d8 <__cxa_pure_virtual+0x14>)
 23fb3cc:	f001 fec6 	bl	23fd15c <panic_>
  while (1);
 23fb3d0:	e7fe      	b.n	23fb3d0 <__cxa_pure_virtual+0xc>
 23fb3d2:	bf00      	nop
 23fb3d4:	023fccfd 	.word	0x023fccfd
 23fb3d8:	023fe3a4 	.word	0x023fe3a4

023fb3dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fb3dc:	7800      	ldrb	r0, [r0, #0]
 23fb3de:	fab0 f080 	clz	r0, r0
 23fb3e2:	0940      	lsrs	r0, r0, #5
 23fb3e4:	4770      	bx	lr

023fb3e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fb3e6:	2301      	movs	r3, #1
 23fb3e8:	7003      	strb	r3, [r0, #0]
 23fb3ea:	4770      	bx	lr

023fb3ec <_Z11draw_screenv>:
 pinMode(TurbiditySensorPin,INPUT);         // Declare analog pins as input pins
 pinMode(TdsSensorPin, INPUT);

}

void draw_screen() {
 23fb3ec:	b573      	push	{r0, r1, r4, r5, r6, lr}

  tft.fillRect(0,0,160,120,ST77XX_BLUE);                                               // draws background fills for readings
 23fb3ee:	2200      	movs	r2, #0
 23fb3f0:	2578      	movs	r5, #120	; 0x78
 23fb3f2:	231f      	movs	r3, #31
 23fb3f4:	4c2f      	ldr	r4, [pc, #188]	; (23fb4b4 <_Z11draw_screenv+0xc8>)
 23fb3f6:	e9cd 5300 	strd	r5, r3, [sp]
 23fb3fa:	4611      	mov	r1, r2
 23fb3fc:	4620      	mov	r0, r4
 23fb3fe:	23a0      	movs	r3, #160	; 0xa0
 23fb400:	f001 f8e9 	bl	23fc5d6 <_ZN15Adafruit_SPITFT8fillRectEsssst>
  //tft.fillRect(20,80,120,30,ST77XX_WHITE);
  
  tft.fillRect(160,0,160,120,ST77XX_GREEN);
 23fb404:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 23fb408:	e9cd 5300 	strd	r5, r3, [sp]
 23fb40c:	23a0      	movs	r3, #160	; 0xa0
 23fb40e:	4620      	mov	r0, r4
 23fb410:	4619      	mov	r1, r3
 23fb412:	2200      	movs	r2, #0
 23fb414:	f001 f8df 	bl	23fc5d6 <_ZN15Adafruit_SPITFT8fillRectEsssst>
  //tft.fillRect(20,201,120,30,ST77XX_WHITE);                                               
    
  tft.fillRect(0,121,320,120,ST77XX_RED);
 23fb418:	f44f 4378 	mov.w	r3, #63488	; 0xf800
  //tft.fillRect(181,80,120,30,ST77XX_WHITE);

  ////// Main headings ///////
  tft.setFont(&FreeSansBold12pt7b);
 23fb41c:	4e26      	ldr	r6, [pc, #152]	; (23fb4b8 <_Z11draw_screenv+0xcc>)
  tft.fillRect(0,121,320,120,ST77XX_RED);
 23fb41e:	2279      	movs	r2, #121	; 0x79
 23fb420:	e9cd 5300 	strd	r5, r3, [sp]
 23fb424:	4620      	mov	r0, r4
 23fb426:	f44f 73a0 	mov.w	r3, #320	; 0x140
 23fb42a:	2100      	movs	r1, #0
 23fb42c:	f001 f8d3 	bl	23fc5d6 <_ZN15Adafruit_SPITFT8fillRectEsssst>
  tft.setFont(&FreeSansBold12pt7b);
 23fb430:	4631      	mov	r1, r6
 23fb432:	4620      	mov	r0, r4
 23fb434:	f000 fed9 	bl	23fc1ea <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  tft.setTextSize(1);
 23fb438:	4620      	mov	r0, r4
 23fb43a:	2101      	movs	r1, #1
 23fb43c:	f000 fecf 	bl	23fc1de <_ZN12Adafruit_GFX11setTextSizeEh>
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(boolean w) { wrap = w; }
 23fb440:	2300      	movs	r3, #0
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23fb442:	4a1e      	ldr	r2, [pc, #120]	; (23fb4bc <_Z11draw_screenv+0xd0>)
  tft.setTextWrap(false);

  tft.setTextColor(ST77XX_BLACK);
  tft.setCursor(10, 30);                                                                 // set sursor to start writing text
  tft.print("EC:  ");
  tft.setFont(&FreeSans9pt7b);
 23fb444:	4d1e      	ldr	r5, [pc, #120]	; (23fb4c0 <_Z11draw_screenv+0xd4>)
  tft.print("EC:  ");
 23fb446:	4620      	mov	r0, r4
 23fb448:	491e      	ldr	r1, [pc, #120]	; (23fb4c4 <_Z11draw_screenv+0xd8>)
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fb44a:	e9c4 2304 	strd	r2, r3, [r4, #16]
  void setTextWrap(boolean w) { wrap = w; }
 23fb44e:	76e3      	strb	r3, [r4, #27]
 23fb450:	f002 f9b2 	bl	23fd7b8 <_ZN5Print5printEPKc>
  tft.setFont(&FreeSans9pt7b);
 23fb454:	4629      	mov	r1, r5
 23fb456:	4620      	mov	r0, r4
 23fb458:	f000 fec7 	bl	23fc1ea <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  tft.print("(mS/m)");
 23fb45c:	4620      	mov	r0, r4
 23fb45e:	491a      	ldr	r1, [pc, #104]	; (23fb4c8 <_Z11draw_screenv+0xdc>)
 23fb460:	f002 f9aa 	bl	23fd7b8 <_ZN5Print5printEPKc>

  tft.setFont(&FreeSansBold12pt7b);
 23fb464:	4631      	mov	r1, r6
 23fb466:	4620      	mov	r0, r4
 23fb468:	f000 febf 	bl	23fc1ea <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23fb46c:	4b17      	ldr	r3, [pc, #92]	; (23fb4cc <_Z11draw_screenv+0xe0>)
  tft.setCursor(170, 30);
  tft.print("TDS:  ");
 23fb46e:	4620      	mov	r0, r4
 23fb470:	4917      	ldr	r1, [pc, #92]	; (23fb4d0 <_Z11draw_screenv+0xe4>)
 23fb472:	6123      	str	r3, [r4, #16]
 23fb474:	f002 f9a0 	bl	23fd7b8 <_ZN5Print5printEPKc>
  tft.setFont(&FreeSans9pt7b);
 23fb478:	4629      	mov	r1, r5
 23fb47a:	4620      	mov	r0, r4
 23fb47c:	f000 feb5 	bl	23fc1ea <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  tft.print("(ppm/m)");
 23fb480:	4620      	mov	r0, r4
 23fb482:	4914      	ldr	r1, [pc, #80]	; (23fb4d4 <_Z11draw_screenv+0xe8>)
 23fb484:	f002 f998 	bl	23fd7b8 <_ZN5Print5printEPKc>

  tft.setFont(&FreeSansBold12pt7b);
 23fb488:	4631      	mov	r1, r6
 23fb48a:	4620      	mov	r0, r4
 23fb48c:	f000 fead 	bl	23fc1ea <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
 23fb490:	4b11      	ldr	r3, [pc, #68]	; (23fb4d8 <_Z11draw_screenv+0xec>)
  tft.setCursor(10, 150); 
  tft.print("Turbidity:  ");
 23fb492:	4620      	mov	r0, r4
 23fb494:	4911      	ldr	r1, [pc, #68]	; (23fb4dc <_Z11draw_screenv+0xf0>)
 23fb496:	6123      	str	r3, [r4, #16]
 23fb498:	f002 f98e 	bl	23fd7b8 <_ZN5Print5printEPKc>
  tft.setFont(&FreeSans9pt7b);
 23fb49c:	4629      	mov	r1, r5
 23fb49e:	4620      	mov	r0, r4
 23fb4a0:	f000 fea3 	bl	23fc1ea <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  tft.print("(NTU)");
 23fb4a4:	4620      	mov	r0, r4
 23fb4a6:	490e      	ldr	r1, [pc, #56]	; (23fb4e0 <_Z11draw_screenv+0xf4>)
}
 23fb4a8:	b002      	add	sp, #8
 23fb4aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  tft.print("(NTU)");
 23fb4ae:	f002 b983 	b.w	23fd7b8 <_ZN5Print5printEPKc>
 23fb4b2:	bf00      	nop
 23fb4b4:	1007ae30 	.word	0x1007ae30
 23fb4b8:	023fe43c 	.word	0x023fe43c
 23fb4bc:	001e000a 	.word	0x001e000a
 23fb4c0:	023fe430 	.word	0x023fe430
 23fb4c4:	023fe3b9 	.word	0x023fe3b9
 23fb4c8:	023fe3bf 	.word	0x023fe3bf
 23fb4cc:	001e00aa 	.word	0x001e00aa
 23fb4d0:	023fe3c6 	.word	0x023fe3c6
 23fb4d4:	023fe3cd 	.word	0x023fe3cd
 23fb4d8:	0096000a 	.word	0x0096000a
 23fb4dc:	023fe3d5 	.word	0x023fe3d5
 23fb4e0:	023fe3e2 	.word	0x023fe3e2

023fb4e4 <setup>:
void setup() {
 23fb4e4:	b508      	push	{r3, lr}
 Serial.begin(115200);
 23fb4e6:	f002 fc1d 	bl	23fdd24 <_Z16_fetch_usbserialv>
 23fb4ea:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 23fb4ee:	f002 fc0d 	bl	23fdd0c <_ZN9USBSerial5beginEl>
  tft.init(320, 240);                                                 // Init ST7789 320x240 
 23fb4f2:	22f0      	movs	r2, #240	; 0xf0
 23fb4f4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 23fb4f8:	480b      	ldr	r0, [pc, #44]	; (23fb528 <setup+0x44>)
 23fb4fa:	f001 fae9 	bl	23fcad0 <_ZN15Adafruit_ST77894initEtt>
  tft.fillScreen(ST77XX_BLACK);                                       // creates black background in display
 23fb4fe:	2100      	movs	r1, #0
 23fb500:	4809      	ldr	r0, [pc, #36]	; (23fb528 <setup+0x44>)
 23fb502:	f000 fbc9 	bl	23fbc98 <_ZN12Adafruit_GFX10fillScreenEt>
  tft.setRotation(1); 
 23fb506:	2101      	movs	r1, #1
 23fb508:	4807      	ldr	r0, [pc, #28]	; (23fb528 <setup+0x44>)
 23fb50a:	f001 fa9d 	bl	23fca48 <_ZN15Adafruit_ST778911setRotationEh>
  draw_screen();
 23fb50e:	f7ff ff6d 	bl	23fb3ec <_Z11draw_screenv>
 pinMode(TurbiditySensorPin,INPUT);         // Declare analog pins as input pins
 23fb512:	2100      	movs	r1, #0
 23fb514:	2001      	movs	r0, #1
 23fb516:	f002 fd4d 	bl	23fdfb4 <pinMode>
}
 23fb51a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 pinMode(TdsSensorPin, INPUT);
 23fb51e:	2100      	movs	r1, #0
 23fb520:	4608      	mov	r0, r1
 23fb522:	f002 bd47 	b.w	23fdfb4 <pinMode>
 23fb526:	bf00      	nop
 23fb528:	1007ae30 	.word	0x1007ae30

023fb52c <_Z9Turbidityv>:
  //Particle.publish("EC:" + String(ecValue, 2) + "mS/m", PRIVATE);

  }
}

void Turbidity() {
 23fb52c:	b570      	push	{r4, r5, r6, lr}
 23fb52e:	ed2d 8b02 	vpush	{d8}
 23fb532:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
  
  for(int i=0; i<1000; i++) {                                               // Take 1000 samples and average 
    sensorValue += (analogRead(TurbiditySensorPin));
 23fb536:	4d6c      	ldr	r5, [pc, #432]	; (23fb6e8 <_Z9Turbidityv+0x1bc>)
void Turbidity() {
 23fb538:	b082      	sub	sp, #8
    sensorValue += (analogRead(TurbiditySensorPin));
 23fb53a:	2001      	movs	r0, #1
 23fb53c:	f002 fd64 	bl	23fe008 <analogRead>
 23fb540:	682b      	ldr	r3, [r5, #0]
  for(int i=0; i<1000; i++) {                                               // Take 1000 samples and average 
 23fb542:	3c01      	subs	r4, #1
    sensorValue += (analogRead(TurbiditySensorPin));
 23fb544:	4418      	add	r0, r3
 23fb546:	6028      	str	r0, [r5, #0]
  for(int i=0; i<1000; i++) {                                               // Take 1000 samples and average 
 23fb548:	d1f7      	bne.n	23fb53a <_Z9Turbidityv+0xe>
  }

    sensorValue = sensorValue/1000;
 23fb54a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fb54e:	fb90 f0f3 	sdiv	r0, r0, r3
 23fb552:	6028      	str	r0, [r5, #0]

  //sensorValue = analogRead(TurbiditySensorPin);
  Serial.println(sensorValue);
 23fb554:	f002 fbe6 	bl	23fdd24 <_Z16_fetch_usbserialv>
 23fb558:	682c      	ldr	r4, [r5, #0]
 23fb55a:	4606      	mov	r6, r0
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 23fb55c:	2c00      	cmp	r4, #0
 23fb55e:	da48      	bge.n	23fb5f2 <_Z9Turbidityv+0xc6>
            t = print('-');
 23fb560:	212d      	movs	r1, #45	; 0x2d
 23fb562:	f002 f92d 	bl	23fd7c0 <_ZN5Print5printEc>
            val = -n;
 23fb566:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fb568:	220a      	movs	r2, #10
 23fb56a:	4630      	mov	r0, r6
 23fb56c:	f002 f941 	bl	23fd7f2 <_ZN5Print11printNumberEmh>
        n += println();
 23fb570:	4630      	mov	r0, r6
 23fb572:	f002 f928 	bl	23fd7c6 <_ZN5Print7printlnEv>
  
  float turbidity = map(sensorValue, 1100, 1650, 100, 0);                        // sensor calibration, sensor min value, sensor max value.  Map to 0 - 100. 
 23fb576:	2300      	movs	r3, #0
 23fb578:	9300      	str	r3, [sp, #0]
 23fb57a:	f240 6272 	movw	r2, #1650	; 0x672
 23fb57e:	2364      	movs	r3, #100	; 0x64
 23fb580:	f240 414c 	movw	r1, #1100	; 0x44c
 23fb584:	6828      	ldr	r0, [r5, #0]
 23fb586:	f001 ff1d 	bl	23fd3c4 <_Z3mapiiiii>
 23fb58a:	ee07 0a90 	vmov	s15, r0
 23fb58e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
  delay(100);
 23fb592:	2064      	movs	r0, #100	; 0x64
 23fb594:	f001 ff22 	bl	23fd3dc <delay>

    if (turbidity < 0) { 
 23fb598:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23fb59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb5a0:	4c52      	ldr	r4, [pc, #328]	; (23fb6ec <_Z9Turbidityv+0x1c0>)
 23fb5a2:	d428      	bmi.n	23fb5f6 <_Z9Turbidityv+0xca>
      turbidity = 0;
    } 
  
    if (turbidity < 20) {                                                   // You can determine you own thresholds.
 23fb5a4:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 23fb5a8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23fb5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb5b0:	d524      	bpl.n	23fb5fc <_Z9Turbidityv+0xd0>
        //Particle.publish("CLEAN: " + String(turbidity), PRIVATE);         // You can also add more if need be e.g. 0-5  = VERY CLEAN, 5-10 = CLEAN etc. 
          Serial.print("CLEAN: ");
 23fb5b2:	f002 fbb7 	bl	23fdd24 <_Z16_fetch_usbserialv>
 23fb5b6:	494e      	ldr	r1, [pc, #312]	; (23fb6f0 <_Z9Turbidityv+0x1c4>)
 23fb5b8:	f002 f8fe 	bl	23fd7b8 <_ZN5Print5printEPKc>
          Serial.println(turbidity);
 23fb5bc:	f002 fbb2 	bl	23fdd24 <_Z16_fetch_usbserialv>
 23fb5c0:	2102      	movs	r1, #2
 23fb5c2:	eeb0 0a48 	vmov.f32	s0, s16
 23fb5c6:	f002 fa15 	bl	23fd9f4 <_ZN5Print7printlnEfi>
          tft.fillRect(115,151,180,59,ST77XX_RED);
 23fb5ca:	f44f 4678 	mov.w	r6, #63488	; 0xf800
 23fb5ce:	233b      	movs	r3, #59	; 0x3b
 23fb5d0:	2173      	movs	r1, #115	; 0x73
 23fb5d2:	e9cd 3600 	strd	r3, r6, [sp]
 23fb5d6:	2297      	movs	r2, #151	; 0x97
 23fb5d8:	23b4      	movs	r3, #180	; 0xb4
 23fb5da:	4844      	ldr	r0, [pc, #272]	; (23fb6ec <_Z9Turbidityv+0x1c0>)
 23fb5dc:	f000 fffb 	bl	23fc5d6 <_ZN15Adafruit_SPITFT8fillRectEsssst>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fb5e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fb5e4:	f8df c11c 	ldr.w	ip, [pc, #284]	; 23fb704 <_Z9Turbidityv+0x1d8>
          tft.setTextColor(ST77XX_WHITE);
          tft.setCursor(130, 205);
          tft.print("CLEAN");
 23fb5e8:	4942      	ldr	r1, [pc, #264]	; (23fb6f4 <_Z9Turbidityv+0x1c8>)
 23fb5ea:	e9c4 c304 	strd	ip, r3, [r4, #16]
            Serial.print("DIRTY: ");
            Serial.println(turbidity);
            tft.fillRect(115,151,180,59,ST77XX_RED);
            tft.setTextColor(ST77XX_WHITE);
            tft.setCursor(130, 205);
            tft.print("DIRTY");
 23fb5ee:	483f      	ldr	r0, [pc, #252]	; (23fb6ec <_Z9Turbidityv+0x1c0>)
 23fb5f0:	e02a      	b.n	23fb648 <_Z9Turbidityv+0x11c>
            val = n;
 23fb5f2:	4621      	mov	r1, r4
 23fb5f4:	e7b8      	b.n	23fb568 <_Z9Turbidityv+0x3c>
      turbidity = 0;
 23fb5f6:	ed9f 8a40 	vldr	s16, [pc, #256]	; 23fb6f8 <_Z9Turbidityv+0x1cc>
 23fb5fa:	e7da      	b.n	23fb5b2 <_Z9Turbidityv+0x86>
        } else if ((turbidity > 20) && (turbidity < 50)) {                 // You can determine you own thresholds.
 23fb5fc:	eddf 7a3f 	vldr	s15, [pc, #252]	; 23fb6fc <_Z9Turbidityv+0x1d0>
 23fb600:	dd4e      	ble.n	23fb6a0 <_Z9Turbidityv+0x174>
 23fb602:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23fb606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb60a:	d549      	bpl.n	23fb6a0 <_Z9Turbidityv+0x174>
            Serial.print("MURKY: ");
 23fb60c:	f002 fb8a 	bl	23fdd24 <_Z16_fetch_usbserialv>
 23fb610:	493b      	ldr	r1, [pc, #236]	; (23fb700 <_Z9Turbidityv+0x1d4>)
 23fb612:	f002 f8d1 	bl	23fd7b8 <_ZN5Print5printEPKc>
            Serial.println(turbidity);
 23fb616:	f002 fb85 	bl	23fdd24 <_Z16_fetch_usbserialv>
 23fb61a:	2102      	movs	r1, #2
 23fb61c:	eeb0 0a48 	vmov.f32	s0, s16
 23fb620:	f002 f9e8 	bl	23fd9f4 <_ZN5Print7printlnEfi>
            tft.fillRect(115,151,180,59,ST77XX_RED);
 23fb624:	233b      	movs	r3, #59	; 0x3b
 23fb626:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 23fb62a:	2173      	movs	r1, #115	; 0x73
 23fb62c:	e9cd 3000 	strd	r3, r0, [sp]
 23fb630:	2297      	movs	r2, #151	; 0x97
 23fb632:	23b4      	movs	r3, #180	; 0xb4
 23fb634:	4620      	mov	r0, r4
 23fb636:	f000 ffce 	bl	23fc5d6 <_ZN15Adafruit_SPITFT8fillRectEsssst>
 23fb63a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
            tft.print("MURKY");
 23fb63e:	4620      	mov	r0, r4
 23fb640:	4d30      	ldr	r5, [pc, #192]	; (23fb704 <_Z9Turbidityv+0x1d8>)
 23fb642:	4931      	ldr	r1, [pc, #196]	; (23fb708 <_Z9Turbidityv+0x1dc>)
 23fb644:	e9c4 5304 	strd	r5, r3, [r4, #16]
            tft.print("DIRTY");
 23fb648:	f002 f8b6 	bl	23fd7b8 <_ZN5Print5printEPKc>
        }

  tft.setFont(&FreeSansBold12pt7b);
 23fb64c:	492f      	ldr	r1, [pc, #188]	; (23fb70c <_Z9Turbidityv+0x1e0>)
 23fb64e:	4827      	ldr	r0, [pc, #156]	; (23fb6ec <_Z9Turbidityv+0x1c0>)
 23fb650:	f000 fdcb 	bl	23fc1ea <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  tft.setTextSize(2);
 23fb654:	2102      	movs	r1, #2
 23fb656:	4825      	ldr	r0, [pc, #148]	; (23fb6ec <_Z9Turbidityv+0x1c0>)
 23fb658:	f000 fdc1 	bl	23fc1de <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextWrap(boolean w) { wrap = w; }
 23fb65c:	2300      	movs	r3, #0
 23fb65e:	76e3      	strb	r3, [r4, #27]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fb660:	f04f 23f8 	mov.w	r3, #4160813056	; 0xf800f800
 23fb664:	4e2a      	ldr	r6, [pc, #168]	; (23fb710 <_Z9Turbidityv+0x1e4>)
  tft.setTextWrap(false);

  tft.setCursor(15, 205);
  tft.setTextColor(ST77XX_RED);
  tft.println(prev_turbidity);
 23fb666:	4d2b      	ldr	r5, [pc, #172]	; (23fb714 <_Z9Turbidityv+0x1e8>)
 23fb668:	e9c4 6304 	strd	r6, r3, [r4, #16]
 23fb66c:	ed95 0a00 	vldr	s0, [r5]
 23fb670:	2102      	movs	r1, #2
 23fb672:	481e      	ldr	r0, [pc, #120]	; (23fb6ec <_Z9Turbidityv+0x1c0>)
 23fb674:	f002 f9be 	bl	23fd9f4 <_ZN5Print7printlnEfi>
 23fb678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  tft.setCursor(15, 205);
  tft.setTextColor(ST77XX_WHITE);
  tft.println(turbidity); 
 23fb67c:	2102      	movs	r1, #2
 23fb67e:	eeb0 0a48 	vmov.f32	s0, s16
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23fb682:	6126      	str	r6, [r4, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fb684:	6163      	str	r3, [r4, #20]
 23fb686:	4819      	ldr	r0, [pc, #100]	; (23fb6ec <_Z9Turbidityv+0x1c0>)
 23fb688:	f002 f9b4 	bl	23fd9f4 <_ZN5Print7printlnEfi>

  prev_turbidity = turbidity;

  delay(50);
 23fb68c:	2032      	movs	r0, #50	; 0x32
  prev_turbidity = turbidity;
 23fb68e:	ed85 8a00 	vstr	s16, [r5]
}
 23fb692:	b002      	add	sp, #8
 23fb694:	ecbd 8b02 	vpop	{d8}
 23fb698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(50);
 23fb69c:	f001 be9e 	b.w	23fd3dc <delay>
        } else if (turbidity > 50) {                                        // You can determine you own thresholds.
 23fb6a0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23fb6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb6a8:	ddd0      	ble.n	23fb64c <_Z9Turbidityv+0x120>
            Serial.print("DIRTY: ");
 23fb6aa:	f002 fb3b 	bl	23fdd24 <_Z16_fetch_usbserialv>
 23fb6ae:	491a      	ldr	r1, [pc, #104]	; (23fb718 <_Z9Turbidityv+0x1ec>)
 23fb6b0:	f002 f882 	bl	23fd7b8 <_ZN5Print5printEPKc>
            Serial.println(turbidity);
 23fb6b4:	f002 fb36 	bl	23fdd24 <_Z16_fetch_usbserialv>
 23fb6b8:	2102      	movs	r1, #2
 23fb6ba:	eeb0 0a48 	vmov.f32	s0, s16
 23fb6be:	f002 f999 	bl	23fd9f4 <_ZN5Print7printlnEfi>
            tft.fillRect(115,151,180,59,ST77XX_RED);
 23fb6c2:	233b      	movs	r3, #59	; 0x3b
 23fb6c4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 23fb6c8:	2173      	movs	r1, #115	; 0x73
 23fb6ca:	e9cd 3200 	strd	r3, r2, [sp]
 23fb6ce:	4807      	ldr	r0, [pc, #28]	; (23fb6ec <_Z9Turbidityv+0x1c0>)
 23fb6d0:	23b4      	movs	r3, #180	; 0xb4
 23fb6d2:	2297      	movs	r2, #151	; 0x97
 23fb6d4:	f000 ff7f 	bl	23fc5d6 <_ZN15Adafruit_SPITFT8fillRectEsssst>
 23fb6d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fb6dc:	4909      	ldr	r1, [pc, #36]	; (23fb704 <_Z9Turbidityv+0x1d8>)
 23fb6de:	e9c4 1304 	strd	r1, r3, [r4, #16]
            tft.print("DIRTY");
 23fb6e2:	490e      	ldr	r1, [pc, #56]	; (23fb71c <_Z9Turbidityv+0x1f0>)
 23fb6e4:	e783      	b.n	23fb5ee <_Z9Turbidityv+0xc2>
 23fb6e6:	bf00      	nop
 23fb6e8:	1007ae28 	.word	0x1007ae28
 23fb6ec:	1007ae30 	.word	0x1007ae30
 23fb6f0:	023fe3e8 	.word	0x023fe3e8
 23fb6f4:	023fe3f0 	.word	0x023fe3f0
 23fb6f8:	00000000 	.word	0x00000000
 23fb6fc:	42480000 	.word	0x42480000
 23fb700:	023fe3f6 	.word	0x023fe3f6
 23fb704:	00cd0082 	.word	0x00cd0082
 23fb708:	023fe3fe 	.word	0x023fe3fe
 23fb70c:	023fe43c 	.word	0x023fe43c
 23fb710:	00cd000f 	.word	0x00cd000f
 23fb714:	1007ae24 	.word	0x1007ae24
 23fb718:	023fe404 	.word	0x023fe404
 23fb71c:	023fe40c 	.word	0x023fe40c

023fb720 <_Z12getMedianNumPii>:
                                 // the EC sensor to function incorrectly.                                                                                                     
  //print_values();
}


  int getMedianNum(int bArray[], int iFilterLen) {                // median filtering algorithm - DO NOT CHANGE
 23fb720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int bTab[iFilterLen];
 23fb722:	008a      	lsls	r2, r1, #2
 23fb724:	3207      	adds	r2, #7
 23fb726:	f022 0207 	bic.w	r2, r2, #7
  int getMedianNum(int bArray[], int iFilterLen) {                // median filtering algorithm - DO NOT CHANGE
 23fb72a:	af00      	add	r7, sp, #0
    int bTab[iFilterLen];
 23fb72c:	ebad 0d02 	sub.w	sp, sp, r2
 23fb730:	466c      	mov	r4, sp
 23fb732:	2200      	movs	r2, #0
 23fb734:	1e4b      	subs	r3, r1, #1
    for (byte i = 0; i<iFilterLen; i++)
 23fb736:	b2d5      	uxtb	r5, r2
 23fb738:	428d      	cmp	r5, r1
 23fb73a:	f102 0201 	add.w	r2, r2, #1
 23fb73e:	da04      	bge.n	23fb74a <_Z12getMedianNumPii+0x2a>
    bTab[i] = bArray[i];
 23fb740:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 23fb744:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
    for (byte i = 0; i<iFilterLen; i++)
 23fb748:	e7f5      	b.n	23fb736 <_Z12getMedianNumPii+0x16>

  int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++) {
 23fb74a:	2000      	movs	r0, #0
 23fb74c:	4298      	cmp	r0, r3
 23fb74e:	da11      	bge.n	23fb774 <_Z12getMedianNumPii+0x54>
 23fb750:	4622      	mov	r2, r4
      for (i = 0; i < iFilterLen - j - 1; i++) {
 23fb752:	2500      	movs	r5, #0
 23fb754:	eba3 0e00 	sub.w	lr, r3, r0
 23fb758:	4575      	cmp	r5, lr
 23fb75a:	da09      	bge.n	23fb770 <_Z12getMedianNumPii+0x50>

  if (bTab[i] > bTab[i + 1]) {
 23fb75c:	6816      	ldr	r6, [r2, #0]
 23fb75e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 23fb762:	3501      	adds	r5, #1
 23fb764:	4566      	cmp	r6, ip
 23fb766:	dd01      	ble.n	23fb76c <_Z12getMedianNumPii+0x4c>
    bTemp = bTab[i];
    bTab[i] = bTab[i + 1];
    bTab[i + 1] = bTemp;
 23fb768:	e9c2 c600 	strd	ip, r6, [r2]
 23fb76c:	3204      	adds	r2, #4
 23fb76e:	e7f3      	b.n	23fb758 <_Z12getMedianNumPii+0x38>
    for (j = 0; j < iFilterLen - 1; j++) {
 23fb770:	3001      	adds	r0, #1
 23fb772:	e7eb      	b.n	23fb74c <_Z12getMedianNumPii+0x2c>
        }  
      }
    }

  if ((iFilterLen & 1) > 0)
 23fb774:	07ca      	lsls	r2, r1, #31
 23fb776:	d506      	bpl.n	23fb786 <_Z12getMedianNumPii+0x66>
    bTemp = bTab[(iFilterLen - 1) / 2];
 23fb778:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 23fb77c:	105b      	asrs	r3, r3, #1
 23fb77e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
      else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
      return bTemp;
}
 23fb782:	46bd      	mov	sp, r7
 23fb784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
 23fb786:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23fb78a:	1049      	asrs	r1, r1, #1
 23fb78c:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 23fb790:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 23fb794:	f853 3c04 	ldr.w	r3, [r3, #-4]
 23fb798:	4418      	add	r0, r3
 23fb79a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 23fb79e:	1040      	asrs	r0, r0, #1
      return bTemp;
 23fb7a0:	e7ef      	b.n	23fb782 <_Z12getMedianNumPii+0x62>
 23fb7a2:	0000      	movs	r0, r0
 23fb7a4:	0000      	movs	r0, r0
	...

023fb7a8 <_Z3TDSv>:
void TDS() {
 23fb7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb7ac:	ed2d 8b02 	vpush	{d8}
  static unsigned long analogSampleTimepoint = millis();
 23fb7b0:	4da3      	ldr	r5, [pc, #652]	; (23fba40 <_Z3TDSv+0x298>)
 23fb7b2:	e8d5 3f8f 	ldab	r3, [r5]
 23fb7b6:	f013 0f01 	tst.w	r3, #1
 23fb7ba:	4ca2      	ldr	r4, [pc, #648]	; (23fba44 <_Z3TDSv+0x29c>)
 23fb7bc:	d109      	bne.n	23fb7d2 <_Z3TDSv+0x2a>
 23fb7be:	4628      	mov	r0, r5
 23fb7c0:	f7ff fe0c 	bl	23fb3dc <__cxa_guard_acquire>
 23fb7c4:	b128      	cbz	r0, 23fb7d2 <_Z3TDSv+0x2a>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fb7c6:	f001 faa7 	bl	23fcd18 <HAL_Timer_Get_Milli_Seconds>
 23fb7ca:	6020      	str	r0, [r4, #0]
 23fb7cc:	4628      	mov	r0, r5
 23fb7ce:	f7ff fe0a 	bl	23fb3e6 <__cxa_guard_release>
 23fb7d2:	f001 faa1 	bl	23fcd18 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-analogSampleTimepoint > 40U) {                                                   //every 40 milliseconds,read the analog value from the ADC
 23fb7d6:	6823      	ldr	r3, [r4, #0]
 23fb7d8:	1ac0      	subs	r0, r0, r3
 23fb7da:	2828      	cmp	r0, #40	; 0x28
 23fb7dc:	d912      	bls.n	23fb804 <_Z3TDSv+0x5c>
 23fb7de:	f001 fa9b 	bl	23fcd18 <HAL_Timer_Get_Milli_Seconds>
    analogSampleTimepoint = millis();
 23fb7e2:	6020      	str	r0, [r4, #0]
    analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);                                 //read the analog value and store into the buffer
 23fb7e4:	4c98      	ldr	r4, [pc, #608]	; (23fba48 <_Z3TDSv+0x2a0>)
 23fb7e6:	2000      	movs	r0, #0
 23fb7e8:	6825      	ldr	r5, [r4, #0]
 23fb7ea:	f002 fc0d 	bl	23fe008 <analogRead>
 23fb7ee:	4b97      	ldr	r3, [pc, #604]	; (23fba4c <_Z3TDSv+0x2a4>)
 23fb7f0:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    analogBufferIndex++;
 23fb7f4:	6823      	ldr	r3, [r4, #0]
      if (analogBufferIndex == SCOUNT)
 23fb7f6:	2b1d      	cmp	r3, #29
    analogBufferIndex++;
 23fb7f8:	f103 0201 	add.w	r2, r3, #1
          analogBufferIndex = 0;
 23fb7fc:	bf0a      	itet	eq
 23fb7fe:	2300      	moveq	r3, #0
    analogBufferIndex++;
 23fb800:	6022      	strne	r2, [r4, #0]
          analogBufferIndex = 0;
 23fb802:	6023      	streq	r3, [r4, #0]
  static unsigned long printTimepoint = millis();
 23fb804:	4d92      	ldr	r5, [pc, #584]	; (23fba50 <_Z3TDSv+0x2a8>)
 23fb806:	e8d5 3f8f 	ldab	r3, [r5]
 23fb80a:	f013 0f01 	tst.w	r3, #1
 23fb80e:	4c91      	ldr	r4, [pc, #580]	; (23fba54 <_Z3TDSv+0x2ac>)
 23fb810:	d109      	bne.n	23fb826 <_Z3TDSv+0x7e>
 23fb812:	4628      	mov	r0, r5
 23fb814:	f7ff fde2 	bl	23fb3dc <__cxa_guard_acquire>
 23fb818:	b128      	cbz	r0, 23fb826 <_Z3TDSv+0x7e>
 23fb81a:	f001 fa7d 	bl	23fcd18 <HAL_Timer_Get_Milli_Seconds>
 23fb81e:	6020      	str	r0, [r4, #0]
 23fb820:	4628      	mov	r0, r5
 23fb822:	f7ff fde0 	bl	23fb3e6 <__cxa_guard_release>
 23fb826:	f001 fa77 	bl	23fcd18 <HAL_Timer_Get_Milli_Seconds>
  if(millis()-printTimepoint > 800U) {
 23fb82a:	6823      	ldr	r3, [r4, #0]
 23fb82c:	1ac0      	subs	r0, r0, r3
 23fb82e:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 23fb832:	f240 80ea 	bls.w	23fba0a <_Z3TDSv+0x262>
 23fb836:	f001 fa6f 	bl	23fcd18 <HAL_Timer_Get_Milli_Seconds>
    for(copyIndex = 0; copyIndex < SCOUNT; copyIndex ++)
 23fb83a:	2300      	movs	r3, #0
 23fb83c:	221f      	movs	r2, #31
 23fb83e:	4986      	ldr	r1, [pc, #536]	; (23fba58 <_Z3TDSv+0x2b0>)
    printTimepoint = millis();
 23fb840:	6020      	str	r0, [r4, #0]
    for(copyIndex = 0; copyIndex < SCOUNT; copyIndex ++)
 23fb842:	4c82      	ldr	r4, [pc, #520]	; (23fba4c <_Z3TDSv+0x2a4>)
 23fb844:	4885      	ldr	r0, [pc, #532]	; (23fba5c <_Z3TDSv+0x2b4>)
 23fb846:	600b      	str	r3, [r1, #0]
 23fb848:	3a01      	subs	r2, #1
 23fb84a:	d005      	beq.n	23fb858 <_Z3TDSv+0xb0>
        analogBufferTemp[copyIndex] = analogBuffer[copyIndex];
 23fb84c:	f854 3b04 	ldr.w	r3, [r4], #4
 23fb850:	f840 3b04 	str.w	r3, [r0], #4
    for(copyIndex = 0; copyIndex < SCOUNT; copyIndex ++)
 23fb854:	2301      	movs	r3, #1
 23fb856:	e7f7      	b.n	23fb848 <_Z3TDSv+0xa0>
 23fb858:	b10b      	cbz	r3, 23fb85e <_Z3TDSv+0xb6>
 23fb85a:	231e      	movs	r3, #30
 23fb85c:	600b      	str	r3, [r1, #0]
        averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF/ 4095.0;           // read the analog value more stable by the median filtering algorithm, and convert to voltage value
 23fb85e:	211e      	movs	r1, #30
 23fb860:	487e      	ldr	r0, [pc, #504]	; (23fba5c <_Z3TDSv+0x2b4>)
 23fb862:	f7ff ff5d 	bl	23fb720 <_Z12getMedianNumPii>
 23fb866:	ee07 0a90 	vmov	s15, r0
 23fb86a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 23fba60 <_Z3TDSv+0x2b8>
 23fb86e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23fb872:	ee67 7a87 	vmul.f32	s15, s15, s14
 23fb876:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 23fba64 <_Z3TDSv+0x2bc>
 23fb87a:	ee87 8a87 	vdiv.f32	s16, s15, s14
 23fb87e:	4b7a      	ldr	r3, [pc, #488]	; (23fba68 <_Z3TDSv+0x2c0>)
  tft.println(prev_ecValue);
 23fb880:	f8df 8224 	ldr.w	r8, [pc, #548]	; 23fbaa8 <_Z3TDSv+0x300>
        averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF/ 4095.0;           // read the analog value more stable by the median filtering algorithm, and convert to voltage value
 23fb884:	ed83 8a00 	vstr	s16, [r3]
        float compensationCoefficient = 1.0 + 0.02 * (temperature-25.0);                        // temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
 23fb888:	4b78      	ldr	r3, [pc, #480]	; (23fba6c <_Z3TDSv+0x2c4>)
 23fb88a:	6818      	ldr	r0, [r3, #0]
 23fb88c:	f7ff f9be 	bl	23fac0c <__aeabi_i2d>
 23fb890:	2200      	movs	r2, #0
 23fb892:	4b77      	ldr	r3, [pc, #476]	; (23fba70 <_Z3TDSv+0x2c8>)
 23fb894:	f7ff f86c 	bl	23fa970 <__aeabi_dsub>
 23fb898:	a35f      	add	r3, pc, #380	; (adr r3, 23fba18 <_Z3TDSv+0x270>)
 23fb89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb89e:	f7ff fa1f 	bl	23face0 <__aeabi_dmul>
 23fb8a2:	2200      	movs	r2, #0
 23fb8a4:	4b73      	ldr	r3, [pc, #460]	; (23fba74 <_Z3TDSv+0x2cc>)
 23fb8a6:	f7ff f865 	bl	23fa974 <__adddf3>
 23fb8aa:	f7ff fd11 	bl	23fb2d0 <__aeabi_d2f>
  tdsValue = (133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds value
 23fb8ae:	ee07 0a90 	vmov	s15, r0
 23fb8b2:	eec8 7a27 	vdiv.f32	s15, s16, s15
 23fb8b6:	ee17 0a90 	vmov	r0, s15
 23fb8ba:	f7ff f9b9 	bl	23fac30 <__aeabi_f2d>
 23fb8be:	a358      	add	r3, pc, #352	; (adr r3, 23fba20 <_Z3TDSv+0x278>)
 23fb8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb8c4:	4604      	mov	r4, r0
 23fb8c6:	460d      	mov	r5, r1
 23fb8c8:	f7ff fa0a 	bl	23face0 <__aeabi_dmul>
 23fb8cc:	4622      	mov	r2, r4
 23fb8ce:	462b      	mov	r3, r5
 23fb8d0:	f7ff fa06 	bl	23face0 <__aeabi_dmul>
 23fb8d4:	4622      	mov	r2, r4
 23fb8d6:	462b      	mov	r3, r5
 23fb8d8:	f7ff fa02 	bl	23face0 <__aeabi_dmul>
 23fb8dc:	a352      	add	r3, pc, #328	; (adr r3, 23fba28 <_Z3TDSv+0x280>)
 23fb8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb8e2:	4606      	mov	r6, r0
 23fb8e4:	460f      	mov	r7, r1
 23fb8e6:	4620      	mov	r0, r4
 23fb8e8:	4629      	mov	r1, r5
 23fb8ea:	f7ff f9f9 	bl	23face0 <__aeabi_dmul>
 23fb8ee:	4622      	mov	r2, r4
 23fb8f0:	462b      	mov	r3, r5
 23fb8f2:	f7ff f9f5 	bl	23face0 <__aeabi_dmul>
 23fb8f6:	4602      	mov	r2, r0
 23fb8f8:	460b      	mov	r3, r1
 23fb8fa:	4630      	mov	r0, r6
 23fb8fc:	4639      	mov	r1, r7
 23fb8fe:	f7ff f837 	bl	23fa970 <__aeabi_dsub>
 23fb902:	a34b      	add	r3, pc, #300	; (adr r3, 23fba30 <_Z3TDSv+0x288>)
 23fb904:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb908:	4606      	mov	r6, r0
 23fb90a:	460f      	mov	r7, r1
 23fb90c:	4620      	mov	r0, r4
 23fb90e:	4629      	mov	r1, r5
 23fb910:	f7ff f9e6 	bl	23face0 <__aeabi_dmul>
 23fb914:	4602      	mov	r2, r0
 23fb916:	460b      	mov	r3, r1
 23fb918:	4630      	mov	r0, r6
 23fb91a:	4639      	mov	r1, r7
 23fb91c:	f7ff f82a 	bl	23fa974 <__adddf3>
 23fb920:	2200      	movs	r2, #0
 23fb922:	4b55      	ldr	r3, [pc, #340]	; (23fba78 <_Z3TDSv+0x2d0>)
 23fb924:	f7ff f9dc 	bl	23face0 <__aeabi_dmul>
 23fb928:	f7ff fcd2 	bl	23fb2d0 <__aeabi_d2f>
 23fb92c:	4d53      	ldr	r5, [pc, #332]	; (23fba7c <_Z3TDSv+0x2d4>)
  ecValue = tdsValue/6.41;
 23fb92e:	4e54      	ldr	r6, [pc, #336]	; (23fba80 <_Z3TDSv+0x2d8>)
  tdsValue = (133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds value
 23fb930:	6028      	str	r0, [r5, #0]
  ecValue = tdsValue/6.41;
 23fb932:	f7ff f97d 	bl	23fac30 <__aeabi_f2d>
 23fb936:	a340      	add	r3, pc, #256	; (adr r3, 23fba38 <_Z3TDSv+0x290>)
 23fb938:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb93c:	f7ff fafa 	bl	23faf34 <__aeabi_ddiv>
 23fb940:	f7ff fcc6 	bl	23fb2d0 <__aeabi_d2f>
 23fb944:	6030      	str	r0, [r6, #0]
  Serial.print("TDS Value:");
 23fb946:	f002 f9ed 	bl	23fdd24 <_Z16_fetch_usbserialv>
 23fb94a:	494e      	ldr	r1, [pc, #312]	; (23fba84 <_Z3TDSv+0x2dc>)
 23fb94c:	f001 ff34 	bl	23fd7b8 <_ZN5Print5printEPKc>
  Serial.print(tdsValue, 2);
 23fb950:	f002 f9e8 	bl	23fdd24 <_Z16_fetch_usbserialv>
 23fb954:	ed95 0a00 	vldr	s0, [r5]
 23fb958:	2102      	movs	r1, #2
 23fb95a:	f002 f831 	bl	23fd9c0 <_ZN5Print5printEfi>
  Serial.println("ppm");
 23fb95e:	f002 f9e1 	bl	23fdd24 <_Z16_fetch_usbserialv>
 23fb962:	4949      	ldr	r1, [pc, #292]	; (23fba88 <_Z3TDSv+0x2e0>)
 23fb964:	f001 ff3b 	bl	23fd7de <_ZN5Print7printlnEPKc>
  Serial.print("EC Value:");
 23fb968:	f002 f9dc 	bl	23fdd24 <_Z16_fetch_usbserialv>
 23fb96c:	4947      	ldr	r1, [pc, #284]	; (23fba8c <_Z3TDSv+0x2e4>)
  tft.setFont(&FreeSansBold12pt7b);
 23fb96e:	4c48      	ldr	r4, [pc, #288]	; (23fba90 <_Z3TDSv+0x2e8>)
  Serial.print("EC Value:");
 23fb970:	f001 ff22 	bl	23fd7b8 <_ZN5Print5printEPKc>
  Serial.print(ecValue, 2);
 23fb974:	f002 f9d6 	bl	23fdd24 <_Z16_fetch_usbserialv>
 23fb978:	ed96 0a00 	vldr	s0, [r6]
 23fb97c:	2102      	movs	r1, #2
 23fb97e:	f002 f81f 	bl	23fd9c0 <_ZN5Print5printEfi>
  Serial.println("mS/m");
 23fb982:	f002 f9cf 	bl	23fdd24 <_Z16_fetch_usbserialv>
 23fb986:	4943      	ldr	r1, [pc, #268]	; (23fba94 <_Z3TDSv+0x2ec>)
 23fb988:	f001 ff29 	bl	23fd7de <_ZN5Print7printlnEPKc>
  tft.setFont(&FreeSansBold12pt7b);
 23fb98c:	4620      	mov	r0, r4
 23fb98e:	4942      	ldr	r1, [pc, #264]	; (23fba98 <_Z3TDSv+0x2f0>)
 23fb990:	f000 fc2b 	bl	23fc1ea <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  tft.setTextSize(2);
 23fb994:	4620      	mov	r0, r4
 23fb996:	2102      	movs	r1, #2
 23fb998:	f000 fc21 	bl	23fc1de <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextWrap(boolean w) { wrap = w; }
 23fb99c:	2300      	movs	r3, #0
 23fb99e:	76e3      	strb	r3, [r4, #27]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fb9a0:	f04f 131f 	mov.w	r3, #2031647	; 0x1f001f
 23fb9a4:	4f3d      	ldr	r7, [pc, #244]	; (23fba9c <_Z3TDSv+0x2f4>)
  tft.println(prev_ecValue);
 23fb9a6:	ed98 0a00 	vldr	s0, [r8]
 23fb9aa:	e9c4 7304 	strd	r7, r3, [r4, #16]
 23fb9ae:	2102      	movs	r1, #2
 23fb9b0:	4620      	mov	r0, r4
 23fb9b2:	f002 f81f 	bl	23fd9f4 <_ZN5Print7printlnEfi>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23fb9b6:	6127      	str	r7, [r4, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23fb9b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
  tft.println(ecValue);
 23fb9bc:	ed96 0a00 	vldr	s0, [r6]
 23fb9c0:	2102      	movs	r1, #2
 23fb9c2:	4620      	mov	r0, r4
 23fb9c4:	6167      	str	r7, [r4, #20]
 23fb9c6:	f002 f815 	bl	23fd9f4 <_ZN5Print7printlnEfi>
  prev_ecValue = ecValue;
 23fb9ca:	6833      	ldr	r3, [r6, #0]
  tft.println(prev_tdsValue);
 23fb9cc:	4e34      	ldr	r6, [pc, #208]	; (23fbaa0 <_Z3TDSv+0x2f8>)
  prev_ecValue = ecValue;
 23fb9ce:	f8c8 3000 	str.w	r3, [r8]
 23fb9d2:	4b34      	ldr	r3, [pc, #208]	; (23fbaa4 <_Z3TDSv+0x2fc>)
 23fb9d4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 23fbaac <_Z3TDSv+0x304>
  tft.println(prev_tdsValue);
 23fb9d8:	ed96 0a00 	vldr	s0, [r6]
 23fb9dc:	e9c4 8304 	strd	r8, r3, [r4, #16]
 23fb9e0:	2102      	movs	r1, #2
 23fb9e2:	4620      	mov	r0, r4
 23fb9e4:	f002 f806 	bl	23fd9f4 <_ZN5Print7printlnEfi>
  tft.println(tdsValue);
 23fb9e8:	ed95 0a00 	vldr	s0, [r5]
 23fb9ec:	4620      	mov	r0, r4
 23fb9ee:	e9c4 8704 	strd	r8, r7, [r4, #16]
 23fb9f2:	2102      	movs	r1, #2
 23fb9f4:	f001 fffe 	bl	23fd9f4 <_ZN5Print7printlnEfi>
  prev_tdsValue = tdsValue;
 23fb9f8:	682b      	ldr	r3, [r5, #0]
  delay(50);
 23fb9fa:	2032      	movs	r0, #50	; 0x32
  prev_tdsValue = tdsValue;
 23fb9fc:	6033      	str	r3, [r6, #0]
}
 23fb9fe:	ecbd 8b02 	vpop	{d8}
 23fba02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  delay(50);
 23fba06:	f001 bce9 	b.w	23fd3dc <delay>
}
 23fba0a:	ecbd 8b02 	vpop	{d8}
 23fba0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fba12:	bf00      	nop
 23fba14:	f3af 8000 	nop.w
 23fba18:	47ae147b 	.word	0x47ae147b
 23fba1c:	3f947ae1 	.word	0x3f947ae1
 23fba20:	a3d70a3d 	.word	0xa3d70a3d
 23fba24:	4060ad70 	.word	0x4060ad70
 23fba28:	1eb851ec 	.word	0x1eb851ec
 23fba2c:	406ffb85 	.word	0x406ffb85
 23fba30:	b851eb85 	.word	0xb851eb85
 23fba34:	408acb1e 	.word	0x408acb1e
 23fba38:	0a3d70a4 	.word	0x0a3d70a4
 23fba3c:	4019a3d7 	.word	0x4019a3d7
 23fba40:	1007ad10 	.word	0x1007ad10
 23fba44:	1007ad18 	.word	0x1007ad18
 23fba48:	1007ad94 	.word	0x1007ad94
 23fba4c:	1007ad1c 	.word	0x1007ad1c
 23fba50:	1007ad0c 	.word	0x1007ad0c
 23fba54:	1007ad14 	.word	0x1007ad14
 23fba58:	1007ae14 	.word	0x1007ae14
 23fba5c:	1007ad98 	.word	0x1007ad98
 23fba60:	40533333 	.word	0x40533333
 23fba64:	457ff000 	.word	0x457ff000
 23fba68:	1007ae10 	.word	0x1007ae10
 23fba6c:	1007ac9c 	.word	0x1007ac9c
 23fba70:	40390000 	.word	0x40390000
 23fba74:	3ff00000 	.word	0x3ff00000
 23fba78:	3fe00000 	.word	0x3fe00000
 23fba7c:	1007ae2c 	.word	0x1007ae2c
 23fba80:	1007ae18 	.word	0x1007ae18
 23fba84:	023fe412 	.word	0x023fe412
 23fba88:	023fe41d 	.word	0x023fe41d
 23fba8c:	023fe421 	.word	0x023fe421
 23fba90:	1007ae30 	.word	0x1007ae30
 23fba94:	023fe42b 	.word	0x023fe42b
 23fba98:	023fe43c 	.word	0x023fe43c
 23fba9c:	0050000f 	.word	0x0050000f
 23fbaa0:	1007ae20 	.word	0x1007ae20
 23fbaa4:	07e007e0 	.word	0x07e007e0
 23fbaa8:	1007ae1c 	.word	0x1007ae1c
 23fbaac:	005000af 	.word	0x005000af

023fbab0 <loop>:
void loop() {
 23fbab0:	b508      	push	{r3, lr}
  TDS();                         // If using Particle Publish using timers not to exceed 
 23fbab2:	f7ff fe79 	bl	23fb7a8 <_Z3TDSv>
}
 23fbab6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Turbidity();                   // the rate limit!  DO NOT USE DELAY() as it will cause
 23fbaba:	f7ff bd37 	b.w	23fb52c <_Z9Turbidityv>
	...

023fbac0 <_GLOBAL__sub_I_analogBuffer>:
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);     // Hardware SPI
 23fbac0:	2306      	movs	r3, #6
 23fbac2:	2205      	movs	r2, #5
 23fbac4:	2112      	movs	r1, #18
 23fbac6:	4801      	ldr	r0, [pc, #4]	; (23fbacc <_GLOBAL__sub_I_analogBuffer+0xc>)
 23fbac8:	f000 bff8 	b.w	23fcabc <_ZN15Adafruit_ST7789C1Eaaa>
 23fbacc:	1007ae30 	.word	0x1007ae30

023fbad0 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 23fbad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbad4:	461f      	mov	r7, r3
 23fbad6:	b085      	sub	sp, #20
 23fbad8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23fbadc:	eba7 0a01 	sub.w	sl, r7, r1
 23fbae0:	eba8 0902 	sub.w	r9, r8, r2
 23fbae4:	f1b9 0f00 	cmp.w	r9, #0
 23fbae8:	bfb8      	it	lt
 23fbaea:	f1c9 0900 	rsblt	r9, r9, #0
 23fbaee:	f1ba 0f00 	cmp.w	sl, #0
 23fbaf2:	bfb8      	it	lt
 23fbaf4:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
 23fbaf8:	45d1      	cmp	r9, sl
        uint16_t color) {
 23fbafa:	4683      	mov	fp, r0
 23fbafc:	460c      	mov	r4, r1
 23fbafe:	4615      	mov	r5, r2
 23fbb00:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (steep) {
 23fbb04:	dd04      	ble.n	23fbb10 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 23fbb06:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
 23fbb08:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
 23fbb0a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
 23fbb0c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
 23fbb0e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
 23fbb10:	42bc      	cmp	r4, r7
 23fbb12:	dd05      	ble.n	23fbb20 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 23fbb14:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
 23fbb16:	4645      	mov	r5, r8
 23fbb18:	4690      	mov	r8, r2
    if (x0 > x1) {
 23fbb1a:	4622      	mov	r2, r4
 23fbb1c:	463c      	mov	r4, r7
 23fbb1e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
 23fbb20:	1b3e      	subs	r6, r7, r4
 23fbb22:	b2b2      	uxth	r2, r6
 23fbb24:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
 23fbb26:	eba8 0205 	sub.w	r2, r8, r5
 23fbb2a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23fbb2e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
 23fbb32:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23fbb36:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
 23fbb3a:	4545      	cmp	r5, r8
 23fbb3c:	bfb4      	ite	lt
 23fbb3e:	2201      	movlt	r2, #1
 23fbb40:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
 23fbb44:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
 23fbb46:	1076      	asrs	r6, r6, #1
        ystep = -1;
 23fbb48:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
 23fbb4a:	42bc      	cmp	r4, r7
 23fbb4c:	dc1c      	bgt.n	23fbb88 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
 23fbb4e:	f8db 2000 	ldr.w	r2, [fp]
        if (steep) {
 23fbb52:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
 23fbb54:	f8d2 8018 	ldr.w	r8, [r2, #24]
 23fbb58:	bfc7      	ittee	gt
 23fbb5a:	4629      	movgt	r1, r5
 23fbb5c:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
 23fbb5e:	462a      	movle	r2, r5
 23fbb60:	4621      	movle	r1, r4
            writePixel(y0, x0, color);
 23fbb62:	9303      	str	r3, [sp, #12]
            writePixel(x0, y0, color);
 23fbb64:	4658      	mov	r0, fp
 23fbb66:	47c0      	blx	r8
        }
        err -= dy;
 23fbb68:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
 23fbb6a:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
 23fbb6c:	1ab6      	subs	r6, r6, r2
 23fbb6e:	b2b1      	uxth	r1, r6
 23fbb70:	b236      	sxth	r6, r6
        if (err < 0) {
 23fbb72:	2e00      	cmp	r6, #0
 23fbb74:	da05      	bge.n	23fbb82 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
 23fbb76:	9a02      	ldr	r2, [sp, #8]
 23fbb78:	4415      	add	r5, r2
            err += dx;
 23fbb7a:	9a00      	ldr	r2, [sp, #0]
            y0 += ystep;
 23fbb7c:	b22d      	sxth	r5, r5
            err += dx;
 23fbb7e:	1856      	adds	r6, r2, r1
 23fbb80:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
 23fbb82:	3401      	adds	r4, #1
 23fbb84:	b224      	sxth	r4, r4
 23fbb86:	e7e0      	b.n	23fbb4a <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
 23fbb88:	b005      	add	sp, #20
 23fbb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fbb8e <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
 23fbb8e:	4770      	bx	lr

023fbb90 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
 23fbb90:	b410      	push	{r4}
    drawPixel(x, y, color);
 23fbb92:	6804      	ldr	r4, [r0, #0]
 23fbb94:	6924      	ldr	r4, [r4, #16]
 23fbb96:	46a4      	mov	ip, r4
}
 23fbb98:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
 23fbb9c:	4760      	bx	ip

023fbb9e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 23fbb9e:	b430      	push	{r4, r5}
 23fbba0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
 23fbba4:	6804      	ldr	r4, [r0, #0]
 23fbba6:	9502      	str	r5, [sp, #8]
 23fbba8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23fbbaa:	46a4      	mov	ip, r4
}
 23fbbac:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
 23fbbae:	4760      	bx	ip

023fbbb0 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 23fbbb0:	b430      	push	{r4, r5}
 23fbbb2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
 23fbbb6:	6804      	ldr	r4, [r0, #0]
 23fbbb8:	9502      	str	r5, [sp, #8]
 23fbbba:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 23fbbbc:	46a4      	mov	ip, r4
}
 23fbbbe:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
 23fbbc0:	4760      	bx	ip

023fbbc2 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fbbc2:	b470      	push	{r4, r5, r6}
 23fbbc4:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 23fbbc8:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
 23fbbcc:	6804      	ldr	r4, [r0, #0]
 23fbbce:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23fbbd2:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23fbbd4:	46a4      	mov	ip, r4
}
 23fbbd6:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
 23fbbd8:	4760      	bx	ip

023fbbda <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 23fbbda:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fbbde:	461c      	mov	r4, r3
 23fbbe0:	4616      	mov	r6, r2
 23fbbe2:	4605      	mov	r5, r0
 23fbbe4:	460f      	mov	r7, r1
    startWrite();
 23fbbe6:	6803      	ldr	r3, [r0, #0]
    writeLine(x, y, x, y+h-1, color);
 23fbbe8:	3c01      	subs	r4, #1
        int16_t h, uint16_t color) {
 23fbbea:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 23fbbee:	695b      	ldr	r3, [r3, #20]
    writeLine(x, y, x, y+h-1, color);
 23fbbf0:	4434      	add	r4, r6
    startWrite();
 23fbbf2:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
 23fbbf4:	b224      	sxth	r4, r4
 23fbbf6:	682b      	ldr	r3, [r5, #0]
 23fbbf8:	f8cd 8004 	str.w	r8, [sp, #4]
 23fbbfc:	9400      	str	r4, [sp, #0]
 23fbbfe:	4628      	mov	r0, r5
 23fbc00:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23fbc02:	4632      	mov	r2, r6
 23fbc04:	463b      	mov	r3, r7
 23fbc06:	4639      	mov	r1, r7
 23fbc08:	47a0      	blx	r4
    endWrite();
 23fbc0a:	4628      	mov	r0, r5
 23fbc0c:	682b      	ldr	r3, [r5, #0]
 23fbc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbc10:	b002      	add	sp, #8
 23fbc12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 23fbc16:	4718      	bx	r3

023fbc18 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 23fbc18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fbc1c:	4617      	mov	r7, r2
 23fbc1e:	4604      	mov	r4, r0
 23fbc20:	461d      	mov	r5, r3
 23fbc22:	460e      	mov	r6, r1
    startWrite();
 23fbc24:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
 23fbc26:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 23fbc2a:	695b      	ldr	r3, [r3, #20]
 23fbc2c:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
 23fbc2e:	e9cd 7800 	strd	r7, r8, [sp]
 23fbc32:	6822      	ldr	r2, [r4, #0]
 23fbc34:	1e6b      	subs	r3, r5, #1
 23fbc36:	4433      	add	r3, r6
 23fbc38:	4620      	mov	r0, r4
 23fbc3a:	6a95      	ldr	r5, [r2, #40]	; 0x28
 23fbc3c:	4631      	mov	r1, r6
 23fbc3e:	463a      	mov	r2, r7
 23fbc40:	b21b      	sxth	r3, r3
 23fbc42:	47a8      	blx	r5
    endWrite();
 23fbc44:	4620      	mov	r0, r4
 23fbc46:	6823      	ldr	r3, [r4, #0]
 23fbc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbc4a:	b002      	add	sp, #8
 23fbc4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 23fbc50:	4718      	bx	r3

023fbc52 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fbc52:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fbc56:	461e      	mov	r6, r3
    startWrite();
 23fbc58:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 23fbc5a:	460c      	mov	r4, r1
    startWrite();
 23fbc5c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 23fbc5e:	4605      	mov	r5, r0
 23fbc60:	4617      	mov	r7, r2
 23fbc62:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23fbc66:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 23fbc6a:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
 23fbc6c:	4426      	add	r6, r4
 23fbc6e:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
 23fbc70:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
 23fbc72:	da0b      	bge.n	23fbc8c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
 23fbc74:	f8cd 8000 	str.w	r8, [sp]
 23fbc78:	4621      	mov	r1, r4
 23fbc7a:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fbc7e:	463a      	mov	r2, r7
 23fbc80:	464b      	mov	r3, r9
 23fbc82:	4628      	mov	r0, r5
 23fbc84:	3401      	adds	r4, #1
 23fbc86:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
 23fbc88:	b224      	sxth	r4, r4
 23fbc8a:	e7f0      	b.n	23fbc6e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
 23fbc8c:	4628      	mov	r0, r5
 23fbc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbc90:	b002      	add	sp, #8
 23fbc92:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 23fbc96:	4718      	bx	r3

023fbc98 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 23fbc98:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
 23fbc9a:	9101      	str	r1, [sp, #4]
 23fbc9c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23fbca0:	6802      	ldr	r2, [r0, #0]
 23fbca2:	9100      	str	r1, [sp, #0]
 23fbca4:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23fbca6:	2200      	movs	r2, #0
 23fbca8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fbcac:	4611      	mov	r1, r2
 23fbcae:	47a0      	blx	r4
}
 23fbcb0:	b002      	add	sp, #8
 23fbcb2:	bd10      	pop	{r4, pc}

023fbcb4 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 23fbcb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
 23fbcb8:	4299      	cmp	r1, r3
        uint16_t color) {
 23fbcba:	4616      	mov	r6, r2
 23fbcbc:	4680      	mov	r8, r0
 23fbcbe:	460d      	mov	r5, r1
 23fbcc0:	461c      	mov	r4, r3
 23fbcc2:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fbcc6:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fbcca:	6802      	ldr	r2, [r0, #0]
    if(x0 == x1){
 23fbccc:	d112      	bne.n	23fbcf4 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
        if(y0 > y1) _swap_int16_t(y0, y1);
 23fbcce:	42be      	cmp	r6, r7
 23fbcd0:	bfc2      	ittt	gt
 23fbcd2:	4633      	movgt	r3, r6
 23fbcd4:	463e      	movgt	r6, r7
 23fbcd6:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fbcd8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fbcdc:	1c7b      	adds	r3, r7, #1
 23fbcde:	6b94      	ldr	r4, [r2, #56]	; 0x38
 23fbce0:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fbce2:	4632      	mov	r2, r6
 23fbce4:	4629      	mov	r1, r5
 23fbce6:	4640      	mov	r0, r8
 23fbce8:	46a4      	mov	ip, r4
 23fbcea:	b21b      	sxth	r3, r3
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
 23fbcec:	b003      	add	sp, #12
 23fbcee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fbcf2:	4760      	bx	ip
    } else if(y0 == y1){
 23fbcf4:	42be      	cmp	r6, r7
 23fbcf6:	d10a      	bne.n	23fbd0e <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
        if(x0 > x1) _swap_int16_t(x0, x1);
 23fbcf8:	4299      	cmp	r1, r3
 23fbcfa:	bfc2      	ittt	gt
 23fbcfc:	460b      	movgt	r3, r1
 23fbcfe:	4625      	movgt	r5, r4
 23fbd00:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fbd02:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fbd06:	1c63      	adds	r3, r4, #1
 23fbd08:	1b5b      	subs	r3, r3, r5
 23fbd0a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23fbd0c:	e7e9      	b.n	23fbce2 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
        startWrite();
 23fbd0e:	6953      	ldr	r3, [r2, #20]
 23fbd10:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
 23fbd12:	e9cd 7900 	strd	r7, r9, [sp]
 23fbd16:	f8d8 3000 	ldr.w	r3, [r8]
 23fbd1a:	4640      	mov	r0, r8
 23fbd1c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 23fbd1e:	4632      	mov	r2, r6
 23fbd20:	4623      	mov	r3, r4
 23fbd22:	4629      	mov	r1, r5
 23fbd24:	47b8      	blx	r7
        endWrite();
 23fbd26:	4640      	mov	r0, r8
 23fbd28:	f8d8 3000 	ldr.w	r3, [r8]
 23fbd2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbd2e:	b003      	add	sp, #12
 23fbd30:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 23fbd34:	4718      	bx	r3

023fbd36 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fbd36:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fbd3a:	4604      	mov	r4, r0
 23fbd3c:	460f      	mov	r7, r1
 23fbd3e:	4616      	mov	r6, r2
 23fbd40:	461d      	mov	r5, r3
    startWrite();
 23fbd42:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 23fbd44:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 23fbd48:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 23fbd4a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
 23fbd4e:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
 23fbd50:	6823      	ldr	r3, [r4, #0]
 23fbd52:	f8cd 8000 	str.w	r8, [sp]
 23fbd56:	4632      	mov	r2, r6
 23fbd58:	4639      	mov	r1, r7
 23fbd5a:	4620      	mov	r0, r4
 23fbd5c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fbd60:	462b      	mov	r3, r5
 23fbd62:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
 23fbd64:	6823      	ldr	r3, [r4, #0]
 23fbd66:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 23fbd6a:	f8cd 8000 	str.w	r8, [sp]
 23fbd6e:	4432      	add	r2, r6
 23fbd70:	4639      	mov	r1, r7
 23fbd72:	4620      	mov	r0, r4
 23fbd74:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fbd78:	b212      	sxth	r2, r2
 23fbd7a:	462b      	mov	r3, r5
 23fbd7c:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
 23fbd7e:	6823      	ldr	r3, [r4, #0]
 23fbd80:	f8cd 8000 	str.w	r8, [sp]
 23fbd84:	4632      	mov	r2, r6
 23fbd86:	4639      	mov	r1, r7
 23fbd88:	4620      	mov	r0, r4
 23fbd8a:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fbd8e:	464b      	mov	r3, r9
 23fbd90:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
 23fbd92:	1e6b      	subs	r3, r5, #1
 23fbd94:	19d9      	adds	r1, r3, r7
 23fbd96:	6823      	ldr	r3, [r4, #0]
 23fbd98:	f8cd 8000 	str.w	r8, [sp]
 23fbd9c:	4620      	mov	r0, r4
 23fbd9e:	6a1d      	ldr	r5, [r3, #32]
 23fbda0:	4632      	mov	r2, r6
 23fbda2:	464b      	mov	r3, r9
 23fbda4:	b209      	sxth	r1, r1
 23fbda6:	47a8      	blx	r5
    endWrite();
 23fbda8:	4620      	mov	r0, r4
 23fbdaa:	6823      	ldr	r3, [r4, #0]
 23fbdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbdae:	b002      	add	sp, #8
 23fbdb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 23fbdb4:	4718      	bx	r3

023fbdb6 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
 23fbdb6:	4770      	bx	lr

023fbdb8 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
 23fbdb8:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
 23fbdbc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
 23fbdc0:	7683      	strb	r3, [r0, #26]
            _width  = WIDTH;
 23fbdc2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    switch(rotation) {
 23fbdc6:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
 23fbdc8:	bf59      	ittee	pl
 23fbdca:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
 23fbdcc:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
 23fbdce:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
 23fbdd0:	81c3      	strhmi	r3, [r0, #14]
}
 23fbdd2:	4770      	bx	lr

023fbdd4 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 23fbdd4:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
 23fbdd6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 23fbdd8:	2400      	movs	r4, #0
    _width    = WIDTH;
 23fbdda:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
 23fbddc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
WIDTH(w), HEIGHT(h)
 23fbde0:	4d05      	ldr	r5, [pc, #20]	; (23fbdf8 <_ZN12Adafruit_GFXC1Ess+0x24>)
 23fbde2:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
 23fbde4:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
 23fbde6:	4a05      	ldr	r2, [pc, #20]	; (23fbdfc <_ZN12Adafruit_GFXC1Ess+0x28>)
 23fbde8:	6044      	str	r4, [r0, #4]
 23fbdea:	e9c0 1205 	strd	r1, r2, [r0, #20]
WIDTH(w), HEIGHT(h)
 23fbdee:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
 23fbdf0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
 23fbdf2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
 23fbdf4:	6204      	str	r4, [r0, #32]
}
 23fbdf6:	bd30      	pop	{r4, r5, pc}
 23fbdf8:	023ffc48 	.word	0x023ffc48
 23fbdfc:	01000101 	.word	0x01000101

023fbe00 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 23fbe00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbe04:	ed2d 8b02 	vpush	{d8}
 23fbe08:	b091      	sub	sp, #68	; 0x44
 23fbe0a:	4616      	mov	r6, r2
 23fbe0c:	461f      	mov	r7, r3
    if(!gfxFont) { // 'Classic' built-in font
 23fbe0e:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 23fbe10:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 23fbe14:	4683      	mov	fp, r0
 23fbe16:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 23fbe1a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 23fbe1e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 23fbe22:	9103      	str	r1, [sp, #12]
 23fbe24:	9304      	str	r3, [sp, #16]
    if(!gfxFont) { // 'Classic' built-in font
 23fbe26:	2a00      	cmp	r2, #0
 23fbe28:	f040 80c5 	bne.w	23fbfb6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
 23fbe2c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fbe30:	428b      	cmp	r3, r1
 23fbe32:	f340 814c 	ble.w	23fc0ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
 23fbe36:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fbe3a:	42b3      	cmp	r3, r6
 23fbe3c:	f340 8147 	ble.w	23fc0ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
 23fbe40:	2306      	movs	r3, #6
 23fbe42:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
 23fbe46:	2b00      	cmp	r3, #0
 23fbe48:	f340 8141 	ble.w	23fc0ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
 23fbe4c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
 23fbe50:	2b00      	cmp	r3, #0
 23fbe52:	f340 813c 	ble.w	23fc0ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 23fbe56:	7f03      	ldrb	r3, [r0, #28]
 23fbe58:	b91b      	cbnz	r3, 23fbe62 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
 23fbe5a:	2faf      	cmp	r7, #175	; 0xaf
 23fbe5c:	bf84      	itt	hi
 23fbe5e:	3701      	addhi	r7, #1
 23fbe60:	b2ff      	uxtbhi	r7, r7
        startWrite();
 23fbe62:	f8db 3000 	ldr.w	r3, [fp]
 23fbe66:	4658      	mov	r0, fp
 23fbe68:	695b      	ldr	r3, [r3, #20]
 23fbe6a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fbe6c:	2205      	movs	r2, #5
 23fbe6e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 23fbe70:	2200      	movs	r2, #0
 23fbe72:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fbe74:	4a98      	ldr	r2, [pc, #608]	; (23fc0d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
 23fbe76:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 23fbe7a:	18d3      	adds	r3, r2, r3
 23fbe7c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
 23fbe7e:	b2b3      	uxth	r3, r6
 23fbe80:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fbe82:	9a05      	ldr	r2, [sp, #20]
 23fbe84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fbe86:	fb02 f905 	mul.w	r9, r2, r5
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fbe8a:	5c9b      	ldrb	r3, [r3, r2]
 23fbe8c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fbe8e:	b2ab      	uxth	r3, r5
 23fbe90:	930b      	str	r3, [sp, #44]	; 0x2c
 23fbe92:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23fbe96:	9308      	str	r3, [sp, #32]
 23fbe98:	9b03      	ldr	r3, [sp, #12]
 23fbe9a:	fa19 f983 	uxtah	r9, r9, r3
 23fbe9e:	fa0f f389 	sxth.w	r3, r9
 23fbea2:	ee08 3a10 	vmov	s16, r3
 23fbea6:	2308      	movs	r3, #8
            for(int8_t j=0; j<8; j++, line >>= 1) {
 23fbea8:	f04f 0900 	mov.w	r9, #0
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fbeac:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
 23fbeae:	9b03      	ldr	r3, [sp, #12]
 23fbeb0:	eb02 0a03 	add.w	sl, r2, r3
 23fbeb4:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
 23fbeb8:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
 23fbeba:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
 23fbebe:	07d2      	lsls	r2, r2, #31
 23fbec0:	d552      	bpl.n	23fbf68 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
 23fbec2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 23fbec4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 23fbec8:	d13e      	bne.n	23fbf48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
 23fbeca:	2c01      	cmp	r4, #1
 23fbecc:	d13c      	bne.n	23fbf48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
 23fbece:	699b      	ldr	r3, [r3, #24]
 23fbed0:	9906      	ldr	r1, [sp, #24]
 23fbed2:	461f      	mov	r7, r3
 23fbed4:	9b04      	ldr	r3, [sp, #16]
 23fbed6:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
 23fbed8:	4651      	mov	r1, sl
 23fbeda:	4658      	mov	r0, fp
 23fbedc:	b212      	sxth	r2, r2
 23fbede:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
 23fbee0:	f109 0301 	add.w	r3, r9, #1
 23fbee4:	fa4f f983 	sxtb.w	r9, r3
 23fbee8:	9b07      	ldr	r3, [sp, #28]
 23fbeea:	085b      	lsrs	r3, r3, #1
 23fbeec:	9307      	str	r3, [sp, #28]
 23fbeee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fbef0:	3b01      	subs	r3, #1
 23fbef2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fbef6:	930a      	str	r3, [sp, #40]	; 0x28
 23fbef8:	d1de      	bne.n	23fbeb8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 23fbefa:	9f05      	ldr	r7, [sp, #20]
 23fbefc:	3701      	adds	r7, #1
 23fbefe:	b27b      	sxtb	r3, r7
 23fbf00:	9305      	str	r3, [sp, #20]
 23fbf02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fbf04:	3b01      	subs	r3, #1
 23fbf06:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fbf0a:	9309      	str	r3, [sp, #36]	; 0x24
 23fbf0c:	d1b9      	bne.n	23fbe82 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
 23fbf0e:	9b04      	ldr	r3, [sp, #16]
 23fbf10:	4543      	cmp	r3, r8
 23fbf12:	d00f      	beq.n	23fbf34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 23fbf14:	2d01      	cmp	r5, #1
 23fbf16:	f8db 3000 	ldr.w	r3, [fp]
 23fbf1a:	d13b      	bne.n	23fbf94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fbf1c:	2c01      	cmp	r4, #1
 23fbf1e:	d139      	bne.n	23fbf94 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fbf20:	9908      	ldr	r1, [sp, #32]
 23fbf22:	f8cd 8000 	str.w	r8, [sp]
 23fbf26:	3105      	adds	r1, #5
 23fbf28:	6a1c      	ldr	r4, [r3, #32]
 23fbf2a:	4632      	mov	r2, r6
 23fbf2c:	2308      	movs	r3, #8
 23fbf2e:	4658      	mov	r0, fp
 23fbf30:	b209      	sxth	r1, r1
 23fbf32:	47a0      	blx	r4
        endWrite();
 23fbf34:	4658      	mov	r0, fp
 23fbf36:	f8db 3000 	ldr.w	r3, [fp]
 23fbf3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fbf3c:	b011      	add	sp, #68	; 0x44
 23fbf3e:	ecbd 8b02 	vpop	{d8}
 23fbf42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
 23fbf46:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 23fbf48:	fb14 f202 	smulbb	r2, r4, r2
 23fbf4c:	9906      	ldr	r1, [sp, #24]
 23fbf4e:	440a      	add	r2, r1
 23fbf50:	9904      	ldr	r1, [sp, #16]
 23fbf52:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fbf54:	9400      	str	r4, [sp, #0]
 23fbf56:	69db      	ldr	r3, [r3, #28]
 23fbf58:	ee18 1a10 	vmov	r1, s16
 23fbf5c:	461f      	mov	r7, r3
 23fbf5e:	4658      	mov	r0, fp
 23fbf60:	462b      	mov	r3, r5
 23fbf62:	b212      	sxth	r2, r2
 23fbf64:	47b8      	blx	r7
 23fbf66:	e7bb      	b.n	23fbee0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
 23fbf68:	9a04      	ldr	r2, [sp, #16]
 23fbf6a:	4542      	cmp	r2, r8
 23fbf6c:	d0b8      	beq.n	23fbee0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
 23fbf6e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 23fbf70:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 23fbf74:	d107      	bne.n	23fbf86 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
 23fbf76:	2c01      	cmp	r4, #1
 23fbf78:	d105      	bne.n	23fbf86 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
 23fbf7a:	699b      	ldr	r3, [r3, #24]
 23fbf7c:	9906      	ldr	r1, [sp, #24]
 23fbf7e:	461f      	mov	r7, r3
 23fbf80:	440a      	add	r2, r1
 23fbf82:	4643      	mov	r3, r8
 23fbf84:	e7a8      	b.n	23fbed8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fbf86:	fb14 f202 	smulbb	r2, r4, r2
 23fbf8a:	9906      	ldr	r1, [sp, #24]
 23fbf8c:	f8cd 8004 	str.w	r8, [sp, #4]
 23fbf90:	440a      	add	r2, r1
 23fbf92:	e7df      	b.n	23fbf54 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 23fbf94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fbf96:	00e4      	lsls	r4, r4, #3
 23fbf98:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 23fbf9c:	9a08      	ldr	r2, [sp, #32]
 23fbf9e:	f8cd 8004 	str.w	r8, [sp, #4]
 23fbfa2:	440a      	add	r2, r1
 23fbfa4:	4611      	mov	r1, r2
 23fbfa6:	9400      	str	r4, [sp, #0]
 23fbfa8:	69dc      	ldr	r4, [r3, #28]
 23fbfaa:	4632      	mov	r2, r6
 23fbfac:	462b      	mov	r3, r5
 23fbfae:	4658      	mov	r0, fp
 23fbfb0:	b209      	sxth	r1, r1
 23fbfb2:	47a0      	blx	r4
        endWrite();
 23fbfb4:	e7be      	b.n	23fbf34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fbfb6:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
 23fbfb8:	6851      	ldr	r1, [r2, #4]
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fbfba:	1aff      	subs	r7, r7, r3
    return gfxFont->bitmap;
 23fbfbc:	6812      	ldr	r2, [r2, #0]
    return gfxFont->glyph + c;
 23fbfbe:	b2ff      	uxtb	r7, r7
    return gfxFont->bitmap;
 23fbfc0:	920b      	str	r2, [sp, #44]	; 0x2c
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fbfc2:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
    return gfxFont->glyph + c;
 23fbfc6:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fbfca:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 23fbfcc:	789a      	ldrb	r2, [r3, #2]
        if(size_x > 1 || size_y > 1) {
 23fbfce:	2d01      	cmp	r5, #1
        uint8_t  w  = pgm_read_byte(&glyph->width),
 23fbfd0:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
 23fbfd2:	78da      	ldrb	r2, [r3, #3]
                 yo = pgm_read_byte(&glyph->yOffset);
 23fbfd4:	f993 a006 	ldrsb.w	sl, [r3, #6]
                 h  = pgm_read_byte(&glyph->height);
 23fbfd8:	920c      	str	r2, [sp, #48]	; 0x30
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 23fbfda:	f993 2005 	ldrsb.w	r2, [r3, #5]
 23fbfde:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
 23fbfe0:	d801      	bhi.n	23fbfe6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 23fbfe2:	2c01      	cmp	r4, #1
 23fbfe4:	d957      	bls.n	23fc096 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
 23fbfe6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 23fbfea:	9308      	str	r3, [sp, #32]
            yo16 = yo;
 23fbfec:	fa0f f38a 	sxth.w	r3, sl
 23fbff0:	9307      	str	r3, [sp, #28]
        uint8_t  xx, yy, bits = 0, bit = 0;
 23fbff2:	f04f 0800 	mov.w	r8, #0
 23fbff6:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
 23fbff8:	4647      	mov	r7, r8
        startWrite();
 23fbffa:	f8db 3000 	ldr.w	r3, [fp]
 23fbffe:	4658      	mov	r0, fp
 23fc000:	695b      	ldr	r3, [r3, #20]
 23fc002:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc004:	b2b3      	uxth	r3, r6
 23fc006:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc008:	fa1a f386 	uxtah	r3, sl, r6
 23fc00c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
 23fc00e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fc010:	429f      	cmp	r7, r3
 23fc012:	d28f      	bcs.n	23fbf34 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc014:	9b07      	ldr	r3, [sp, #28]
 23fc016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23fc018:	443b      	add	r3, r7
 23fc01a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
 23fc01e:	2200      	movs	r2, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc020:	b21b      	sxth	r3, r3
 23fc022:	ee08 3a10 	vmov	s16, r3
 23fc026:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
 23fc028:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc02a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23fc02c:	eb02 0a07 	add.w	sl, r2, r7
 23fc030:	fa0f fa8a 	sxth.w	sl, sl
            for(xx=0; xx<w; xx++) {
 23fc034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fc036:	9905      	ldr	r1, [sp, #20]
 23fc038:	4291      	cmp	r1, r2
 23fc03a:	d241      	bcs.n	23fc0c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
 23fc03c:	1c5a      	adds	r2, r3, #1
 23fc03e:	b2d2      	uxtb	r2, r2
 23fc040:	075b      	lsls	r3, r3, #29
 23fc042:	920d      	str	r2, [sp, #52]	; 0x34
 23fc044:	d107      	bne.n	23fc056 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
 23fc046:	9b06      	ldr	r3, [sp, #24]
 23fc048:	9906      	ldr	r1, [sp, #24]
 23fc04a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fc04c:	3301      	adds	r3, #1
 23fc04e:	b29b      	uxth	r3, r3
 23fc050:	f812 9001 	ldrb.w	r9, [r2, r1]
 23fc054:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
 23fc056:	f019 0f80 	tst.w	r9, #128	; 0x80
 23fc05a:	d012      	beq.n	23fc082 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
 23fc05c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc05e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fc062:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
 23fc066:	d11a      	bne.n	23fc09e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
 23fc068:	2c01      	cmp	r4, #1
 23fc06a:	d118      	bne.n	23fc09e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fc06c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fc06e:	699b      	ldr	r3, [r3, #24]
 23fc070:	4411      	add	r1, r2
 23fc072:	9a05      	ldr	r2, [sp, #20]
 23fc074:	461e      	mov	r6, r3
 23fc076:	4411      	add	r1, r2
 23fc078:	4658      	mov	r0, fp
 23fc07a:	4652      	mov	r2, sl
 23fc07c:	9b04      	ldr	r3, [sp, #16]
 23fc07e:	b209      	sxth	r1, r1
 23fc080:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
 23fc082:	9e05      	ldr	r6, [sp, #20]
                bits <<= 1;
 23fc084:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
 23fc088:	3601      	adds	r6, #1
 23fc08a:	b2f3      	uxtb	r3, r6
 23fc08c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
 23fc08e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
 23fc092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
 23fc094:	e7ce      	b.n	23fc034 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
 23fc096:	2300      	movs	r3, #0
 23fc098:	e9cd 3307 	strd	r3, r3, [sp, #28]
 23fc09c:	e7a9      	b.n	23fbff2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fc09e:	9805      	ldr	r0, [sp, #20]
 23fc0a0:	9a08      	ldr	r2, [sp, #32]
 23fc0a2:	4402      	add	r2, r0
 23fc0a4:	fb02 1105 	mla	r1, r2, r5, r1
 23fc0a8:	9a04      	ldr	r2, [sp, #16]
 23fc0aa:	4658      	mov	r0, fp
 23fc0ac:	e9cd 4200 	strd	r4, r2, [sp]
 23fc0b0:	69db      	ldr	r3, [r3, #28]
 23fc0b2:	ee18 2a10 	vmov	r2, s16
 23fc0b6:	461e      	mov	r6, r3
 23fc0b8:	b209      	sxth	r1, r1
 23fc0ba:	462b      	mov	r3, r5
 23fc0bc:	47b0      	blx	r6
 23fc0be:	e7e0      	b.n	23fc082 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
 23fc0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
 23fc0c2:	3701      	adds	r7, #1
 23fc0c4:	4498      	add	r8, r3
 23fc0c6:	fa5f f888 	uxtb.w	r8, r8
 23fc0ca:	b2ff      	uxtb	r7, r7
 23fc0cc:	e79f      	b.n	23fc00e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
 23fc0ce:	b011      	add	sp, #68	; 0x44
 23fc0d0:	ecbd 8b02 	vpop	{d8}
 23fc0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc0d8:	023ff740 	.word	0x023ff740

023fc0dc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23fc0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
 23fc0de:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 23fc0e0:	4604      	mov	r4, r0
 23fc0e2:	460b      	mov	r3, r1
 23fc0e4:	b085      	sub	sp, #20
    if(!gfxFont) { // 'Classic' built-in font
 23fc0e6:	2a00      	cmp	r2, #0
 23fc0e8:	d134      	bne.n	23fc154 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
 23fc0ea:	290a      	cmp	r1, #10
 23fc0ec:	d108      	bne.n	23fc100 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
 23fc0ee:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
 23fc0f0:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc0f2:	7e42      	ldrb	r2, [r0, #25]
 23fc0f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
 23fc0f8:	8263      	strh	r3, [r4, #18]
}
 23fc0fa:	2001      	movs	r0, #1
 23fc0fc:	b005      	add	sp, #20
 23fc0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
 23fc100:	290d      	cmp	r1, #13
 23fc102:	d0fa      	beq.n	23fc0fa <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fc104:	7ee1      	ldrb	r1, [r4, #27]
 23fc106:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc108:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fc10a:	b171      	cbz	r1, 23fc12a <_ZN12Adafruit_GFX5writeEh+0x4e>
 23fc10c:	2106      	movs	r1, #6
 23fc10e:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 23fc112:	fb11 6100 	smlabb	r1, r1, r0, r6
 23fc116:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 23fc11a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
 23fc11c:	bfc1      	itttt	gt
 23fc11e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
 23fc122:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
 23fc124:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 23fc128:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 23fc12a:	8ae2      	ldrh	r2, [r4, #22]
 23fc12c:	e9cd 0502 	strd	r0, r5, [sp, #8]
 23fc130:	9201      	str	r2, [sp, #4]
 23fc132:	8aa2      	ldrh	r2, [r4, #20]
 23fc134:	4620      	mov	r0, r4
 23fc136:	9200      	str	r2, [sp, #0]
 23fc138:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fc13c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fc140:	f7ff fe5e 	bl	23fbe00 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
 23fc144:	7e23      	ldrb	r3, [r4, #24]
 23fc146:	8a22      	ldrh	r2, [r4, #16]
 23fc148:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fc14c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fc150:	8223      	strh	r3, [r4, #16]
 23fc152:	e7d2      	b.n	23fc0fa <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
 23fc154:	290a      	cmp	r1, #10
 23fc156:	d107      	bne.n	23fc168 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
 23fc158:	2300      	movs	r3, #0
 23fc15a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
 23fc15c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fc15e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
 23fc160:	8a43      	ldrh	r3, [r0, #18]
 23fc162:	fb01 3302 	mla	r3, r1, r2, r3
 23fc166:	e7c7      	b.n	23fc0f8 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
 23fc168:	290d      	cmp	r1, #13
 23fc16a:	d0c6      	beq.n	23fc0fa <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 23fc16c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 23fc16e:	42a9      	cmp	r1, r5
 23fc170:	d3c3      	bcc.n	23fc0fa <_ZN12Adafruit_GFX5writeEh+0x1e>
 23fc172:	7a51      	ldrb	r1, [r2, #9]
 23fc174:	4299      	cmp	r1, r3
 23fc176:	d3c0      	bcc.n	23fc0fa <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
 23fc178:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
 23fc17a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
 23fc17c:	b2ed      	uxtb	r5, r5
 23fc17e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
 23fc182:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 23fc184:	b328      	cbz	r0, 23fc1d2 <_ZN12Adafruit_GFX5writeEh+0xf6>
 23fc186:	78e9      	ldrb	r1, [r5, #3]
 23fc188:	b319      	cbz	r1, 23fc1d2 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fc18a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fc18c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc18e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fc190:	b191      	cbz	r1, 23fc1b8 <_ZN12Adafruit_GFX5writeEh+0xdc>
 23fc192:	f995 1005 	ldrsb.w	r1, [r5, #5]
 23fc196:	4408      	add	r0, r1
 23fc198:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fc19c:	fb06 1100 	mla	r1, r6, r0, r1
 23fc1a0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 23fc1a4:	4281      	cmp	r1, r0
 23fc1a6:	dd07      	ble.n	23fc1b8 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
 23fc1a8:	2000      	movs	r0, #0
 23fc1aa:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 23fc1ac:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fc1b0:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
 23fc1b2:	fb02 1207 	mla	r2, r2, r7, r1
 23fc1b6:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 23fc1b8:	8ae2      	ldrh	r2, [r4, #22]
 23fc1ba:	4620      	mov	r0, r4
 23fc1bc:	9201      	str	r2, [sp, #4]
 23fc1be:	8aa2      	ldrh	r2, [r4, #20]
 23fc1c0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 23fc1c4:	9200      	str	r2, [sp, #0]
 23fc1c6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fc1ca:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fc1ce:	f7ff fe17 	bl	23fbe00 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fc1d2:	7929      	ldrb	r1, [r5, #4]
 23fc1d4:	7e22      	ldrb	r2, [r4, #24]
 23fc1d6:	8a23      	ldrh	r3, [r4, #16]
 23fc1d8:	fb01 3302 	mla	r3, r1, r2, r3
 23fc1dc:	e7b8      	b.n	23fc150 <_ZN12Adafruit_GFX5writeEh+0x74>

023fc1de <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
 23fc1de:	2901      	cmp	r1, #1
 23fc1e0:	bf38      	it	cc
 23fc1e2:	2101      	movcc	r1, #1
 23fc1e4:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
 23fc1e6:	7641      	strb	r1, [r0, #25]
}
 23fc1e8:	4770      	bx	lr

023fc1ea <_ZN12Adafruit_GFX7setFontEPK7GFXfont>:
        if(!gfxFont) { // And no current font struct?
 23fc1ea:	6a03      	ldr	r3, [r0, #32]
    if(f) {            // Font struct pointer passed in?
 23fc1ec:	b129      	cbz	r1, 23fc1fa <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x10>
        if(!gfxFont) { // And no current font struct?
 23fc1ee:	b913      	cbnz	r3, 23fc1f6 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
            cursor_y += 6;
 23fc1f0:	8a43      	ldrh	r3, [r0, #18]
 23fc1f2:	3306      	adds	r3, #6
        cursor_y -= 6;
 23fc1f4:	8243      	strh	r3, [r0, #18]
    gfxFont = (GFXfont *)f;
 23fc1f6:	6201      	str	r1, [r0, #32]
}
 23fc1f8:	4770      	bx	lr
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 23fc1fa:	2b00      	cmp	r3, #0
 23fc1fc:	d0fb      	beq.n	23fc1f6 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
        cursor_y -= 6;
 23fc1fe:	8a43      	ldrh	r3, [r0, #18]
 23fc200:	3b06      	subs	r3, #6
 23fc202:	e7f7      	b.n	23fc1f4 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xa>

023fc204 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>:
  #endif
 #else  // !HAS_PORT_SET_CLR
    *swspi.sckPort   &= swspi.sckPinMaskClr;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(swspi._sck, LOW);
 23fc204:	2100      	movs	r1, #0
 23fc206:	b280      	uxth	r0, r0
 23fc208:	f001 bee5 	b.w	23fdfd6 <digitalWrite>

023fc20c <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>:
    digitalWrite(swspi._sck, HIGH);
 23fc20c:	2101      	movs	r1, #1
 23fc20e:	b280      	uxth	r0, r0
 23fc210:	f001 bee1 	b.w	23fdfd6 <digitalWrite>

023fc214 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>:
    digitalWrite(swspi._mosi, LOW);
 23fc214:	2100      	movs	r1, #0
 23fc216:	b280      	uxth	r0, r0
 23fc218:	f001 bedd 	b.w	23fdfd6 <digitalWrite>

023fc21c <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>:
    digitalWrite(swspi._mosi, HIGH);
 23fc21c:	2101      	movs	r1, #1
 23fc21e:	b280      	uxth	r0, r0
 23fc220:	f001 bed9 	b.w	23fdfd6 <digitalWrite>

023fc224 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>:
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *dcPort   &= dcPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_dc, LOW);
 23fc224:	2100      	movs	r1, #0
 23fc226:	b280      	uxth	r0, r0
 23fc228:	f001 bed5 	b.w	23fdfd6 <digitalWrite>

023fc22c <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>:
        digitalWrite(_dc, HIGH);
 23fc22c:	2101      	movs	r1, #1
 23fc22e:	b280      	uxth	r0, r0
 23fc230:	f001 bed1 	b.w	23fdfd6 <digitalWrite>

023fc234 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
 23fc234:	b538      	push	{r3, r4, r5, lr}
 23fc236:	4604      	mov	r4, r0
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fc238:	b212      	sxth	r2, r2
 23fc23a:	b209      	sxth	r1, r1
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
 23fc23c:	461d      	mov	r5, r3
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fc23e:	f7ff fdc9 	bl	23fbdd4 <_ZN12Adafruit_GFXC1Ess>
 23fc242:	2200      	movs	r2, #0
 23fc244:	4b0b      	ldr	r3, [pc, #44]	; (23fc274 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa+0x40>)
}
 23fc246:	4620      	mov	r0, r4
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fc248:	6023      	str	r3, [r4, #0]
 23fc24a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 23fc24e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 23fc252:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 23fc256:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 23fc25a:	6422      	str	r2, [r4, #64]	; 0x40
 23fc25c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 23fc260:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 23fc264:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 23fc268:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 23fc26c:	64a2      	str	r2, [r4, #72]	; 0x48
    hwspi._spi = spiClass;
 23fc26e:	6265      	str	r5, [r4, #36]	; 0x24
}
 23fc270:	bd38      	pop	{r3, r4, r5, pc}
 23fc272:	bf00      	nop
 23fc274:	023ffca0 	.word	0x023ffca0

023fc278 <_ZN15Adafruit_SPITFTC1Ettaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, int8_t cs,
 23fc278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc27c:	4604      	mov	r4, r0
 23fc27e:	460d      	mov	r5, r1
 23fc280:	4616      	mov	r6, r2
 23fc282:	461f      	mov	r7, r3

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fc284:	f8df 804c 	ldr.w	r8, [pc, #76]	; 23fc2d4 <_ZN15Adafruit_SPITFTC1Ettaaa+0x5c>
 23fc288:	b086      	sub	sp, #24
 23fc28a:	e8d8 0f8f 	ldab	r0, [r8]
 23fc28e:	f010 0101 	ands.w	r1, r0, #1
 23fc292:	d10b      	bne.n	23fc2ac <_ZN15Adafruit_SPITFTC1Ettaaa+0x34>
 23fc294:	4640      	mov	r0, r8
 23fc296:	9105      	str	r1, [sp, #20]
 23fc298:	f7ff f8a0 	bl	23fb3dc <__cxa_guard_acquire>
 23fc29c:	9905      	ldr	r1, [sp, #20]
 23fc29e:	b128      	cbz	r0, 23fc2ac <_ZN15Adafruit_SPITFTC1Ettaaa+0x34>
 23fc2a0:	480b      	ldr	r0, [pc, #44]	; (23fc2d0 <_ZN15Adafruit_SPITFTC1Ettaaa+0x58>)
 23fc2a2:	f001 fbc3 	bl	23fda2c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fc2a6:	4640      	mov	r0, r8
 23fc2a8:	f7ff f89d 	bl	23fb3e6 <__cxa_guard_release>
  int8_t dc, int8_t rst) : Adafruit_SPITFT(w, h, &SPI, cs, dc, rst) {
 23fc2ac:	f99d 3034 	ldrsb.w	r3, [sp, #52]	; 0x34
 23fc2b0:	4632      	mov	r2, r6
 23fc2b2:	9302      	str	r3, [sp, #8]
 23fc2b4:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
 23fc2b8:	4629      	mov	r1, r5
 23fc2ba:	e9cd 7300 	strd	r7, r3, [sp]
 23fc2be:	4620      	mov	r0, r4
 23fc2c0:	4b03      	ldr	r3, [pc, #12]	; (23fc2d0 <_ZN15Adafruit_SPITFTC1Ettaaa+0x58>)
 23fc2c2:	f7ff ffb7 	bl	23fc234 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>
}
 23fc2c6:	4620      	mov	r0, r4
 23fc2c8:	b006      	add	sp, #24
 23fc2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fc2ce:	bf00      	nop
 23fc2d0:	1007ae84 	.word	0x1007ae84
 23fc2d4:	1007ae80 	.word	0x1007ae80

023fc2d8 <_ZN15Adafruit_SPITFT7initSPIEmh>:
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
 23fc2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc2da:	4604      	mov	r4, r0
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
 23fc2dc:	4f48      	ldr	r7, [pc, #288]	; (23fc400 <_ZN15Adafruit_SPITFT7initSPIEmh+0x128>)
    if(_cs >= 0) {
 23fc2de:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
 23fc2e2:	2900      	cmp	r1, #0
 23fc2e4:	bf18      	it	ne
 23fc2e6:	460f      	movne	r7, r1
    if(_cs >= 0) {
 23fc2e8:	2800      	cmp	r0, #0
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
 23fc2ea:	4616      	mov	r6, r2
    if(_cs >= 0) {
 23fc2ec:	db09      	blt.n	23fc302 <_ZN15Adafruit_SPITFT7initSPIEmh+0x2a>
        pinMode(_cs, OUTPUT);
 23fc2ee:	2101      	movs	r1, #1
 23fc2f0:	b280      	uxth	r0, r0
 23fc2f2:	f001 fe5f 	bl	23fdfb4 <pinMode>
        digitalWrite(_cs, HIGH); // Deselect
 23fc2f6:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
 23fc2fa:	2101      	movs	r1, #1
 23fc2fc:	b280      	uxth	r0, r0
 23fc2fe:	f001 fe6a 	bl	23fdfd6 <digitalWrite>
    pinMode(_dc, OUTPUT);
 23fc302:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
 23fc306:	2101      	movs	r1, #1
 23fc308:	b280      	uxth	r0, r0
 23fc30a:	f001 fe53 	bl	23fdfb4 <pinMode>
    digitalWrite(_dc, HIGH); // Data mode
 23fc30e:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
 23fc312:	2101      	movs	r1, #1
 23fc314:	b280      	uxth	r0, r0
 23fc316:	f001 fe5e 	bl	23fdfd6 <digitalWrite>
    if(connection == TFT_HARD_SPI) {
 23fc31a:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
 23fc31e:	bb85      	cbnz	r5, 23fc382 <_ZN15Adafruit_SPITFT7initSPIEmh+0xaa>
    SPI_CLK_SYSTEM = 0,         // represents the system clock speed
    SPI_CLK_ARDUINO = 16*MHZ,
};

namespace particle {
class SPISettings : public Printable {
 23fc320:	2301      	movs	r3, #1
            hwspi._spi->begin();
 23fc322:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fc324:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 23fc328:	6327      	str	r7, [r4, #48]	; 0x30
 23fc32a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 23fc32e:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
        hwspi._mode    = spiMode; // Save spiMode value for later
 23fc332:	63a6      	str	r6, [r4, #56]	; 0x38
            hwspi._spi->begin();
 23fc334:	f001 fb84 	bl	23fda40 <_ZN8SPIClass5beginEv>
    if(_rst >= 0) {
 23fc338:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fc33c:	2800      	cmp	r0, #0
 23fc33e:	db5e      	blt.n	23fc3fe <_ZN15Adafruit_SPITFT7initSPIEmh+0x126>
        pinMode(_rst, OUTPUT);
 23fc340:	2101      	movs	r1, #1
 23fc342:	b280      	uxth	r0, r0
 23fc344:	f001 fe36 	bl	23fdfb4 <pinMode>
        digitalWrite(_rst, HIGH);
 23fc348:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fc34c:	2101      	movs	r1, #1
 23fc34e:	b280      	uxth	r0, r0
 23fc350:	f001 fe41 	bl	23fdfd6 <digitalWrite>
        delay(100);
 23fc354:	2064      	movs	r0, #100	; 0x64
 23fc356:	f001 f841 	bl	23fd3dc <delay>
        digitalWrite(_rst, LOW);
 23fc35a:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fc35e:	2100      	movs	r1, #0
 23fc360:	b280      	uxth	r0, r0
 23fc362:	f001 fe38 	bl	23fdfd6 <digitalWrite>
        delay(100);
 23fc366:	2064      	movs	r0, #100	; 0x64
 23fc368:	f001 f838 	bl	23fd3dc <delay>
        digitalWrite(_rst, HIGH);
 23fc36c:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fc370:	2101      	movs	r1, #1
 23fc372:	b280      	uxth	r0, r0
 23fc374:	f001 fe2f 	bl	23fdfd6 <digitalWrite>
}
 23fc378:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        delay(200);
 23fc37c:	20c8      	movs	r0, #200	; 0xc8
 23fc37e:	f001 b82d 	b.w	23fd3dc <delay>
    } else if(connection == TFT_SOFT_SPI) {
 23fc382:	2d01      	cmp	r5, #1
 23fc384:	d120      	bne.n	23fc3c8 <_ZN15Adafruit_SPITFT7initSPIEmh+0xf0>
        pinMode(swspi._mosi, OUTPUT);
 23fc386:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fc38a:	4629      	mov	r1, r5
 23fc38c:	b280      	uxth	r0, r0
 23fc38e:	f001 fe11 	bl	23fdfb4 <pinMode>
        digitalWrite(swspi._mosi, LOW);
 23fc392:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fc396:	2100      	movs	r1, #0
 23fc398:	b280      	uxth	r0, r0
 23fc39a:	f001 fe1c 	bl	23fdfd6 <digitalWrite>
        pinMode(swspi._sck, OUTPUT);
 23fc39e:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fc3a2:	4629      	mov	r1, r5
 23fc3a4:	b280      	uxth	r0, r0
 23fc3a6:	f001 fe05 	bl	23fdfb4 <pinMode>
        digitalWrite(swspi._sck, LOW);
 23fc3aa:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fc3ae:	2100      	movs	r1, #0
 23fc3b0:	b280      	uxth	r0, r0
 23fc3b2:	f001 fe10 	bl	23fdfd6 <digitalWrite>
        if(swspi._miso >= 0) {
 23fc3b6:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fc3ba:	2800      	cmp	r0, #0
 23fc3bc:	dbbc      	blt.n	23fc338 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(swspi._miso, INPUT);
 23fc3be:	2100      	movs	r1, #0
 23fc3c0:	b280      	uxth	r0, r0
 23fc3c2:	f001 fdf7 	bl	23fdfb4 <pinMode>
 23fc3c6:	e7b7      	b.n	23fc338 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
        pinMode(tft8._wr, OUTPUT);
 23fc3c8:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fc3cc:	2101      	movs	r1, #1
 23fc3ce:	b280      	uxth	r0, r0
 23fc3d0:	f001 fdf0 	bl	23fdfb4 <pinMode>
        digitalWrite(tft8._wr, HIGH);
 23fc3d4:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fc3d8:	2101      	movs	r1, #1
 23fc3da:	b280      	uxth	r0, r0
 23fc3dc:	f001 fdfb 	bl	23fdfd6 <digitalWrite>
        if(tft8._rd >= 0) {
 23fc3e0:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fc3e4:	2800      	cmp	r0, #0
 23fc3e6:	dba7      	blt.n	23fc338 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(tft8._rd, OUTPUT);
 23fc3e8:	2101      	movs	r1, #1
 23fc3ea:	b280      	uxth	r0, r0
 23fc3ec:	f001 fde2 	bl	23fdfb4 <pinMode>
            digitalWrite(tft8._rd, HIGH);
 23fc3f0:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fc3f4:	2101      	movs	r1, #1
 23fc3f6:	b280      	uxth	r0, r0
 23fc3f8:	f001 fded 	bl	23fdfd6 <digitalWrite>
 23fc3fc:	e79c      	b.n	23fc338 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
}
 23fc3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc400:	00f42400 	.word	0x00f42400

023fc404 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
 23fc404:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 23fc408:	b923      	cbnz	r3, 23fc414 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x10>
        hwspi._spi->beginTransaction(hwspi.settings);
 23fc40a:	f100 0128 	add.w	r1, r0, #40	; 0x28
 23fc40e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fc410:	f001 bb44 	b.w	23fda9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
}
 23fc414:	4770      	bx	lr

023fc416 <_ZN15Adafruit_SPITFT10startWriteEv>:
void Adafruit_SPITFT::startWrite(void) {
 23fc416:	b510      	push	{r4, lr}
 23fc418:	4604      	mov	r4, r0
    SPI_BEGIN_TRANSACTION();
 23fc41a:	f7ff fff3 	bl	23fc404 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>
    if(_cs >= 0) SPI_CS_LOW();
 23fc41e:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
 23fc422:	2800      	cmp	r0, #0
 23fc424:	db05      	blt.n	23fc432 <_ZN15Adafruit_SPITFT10startWriteEv+0x1c>
}
 23fc426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_cs, LOW);
 23fc42a:	2100      	movs	r1, #0
 23fc42c:	b280      	uxth	r0, r0
 23fc42e:	f001 bdd2 	b.w	23fdfd6 <digitalWrite>
 23fc432:	bd10      	pop	{r4, pc}

023fc434 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
 23fc434:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 23fc438:	b913      	cbnz	r3, 23fc440 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv+0xc>
        hwspi._spi->endTransaction();
 23fc43a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fc43c:	f001 bb14 	b.w	23fda68 <_ZN8SPIClass14endTransactionEv>
}
 23fc440:	4770      	bx	lr

023fc442 <_ZN15Adafruit_SPITFT8endWriteEv>:
void Adafruit_SPITFT::endWrite(void) {
 23fc442:	b510      	push	{r4, lr}
 23fc444:	4604      	mov	r4, r0
    if(_cs >= 0) SPI_CS_HIGH();
 23fc446:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
 23fc44a:	2800      	cmp	r0, #0
 23fc44c:	db03      	blt.n	23fc456 <_ZN15Adafruit_SPITFT8endWriteEv+0x14>
        digitalWrite(_cs, HIGH);
 23fc44e:	2101      	movs	r1, #1
 23fc450:	b280      	uxth	r0, r0
 23fc452:	f001 fdc0 	bl	23fdfd6 <digitalWrite>
    SPI_END_TRANSACTION();
 23fc456:	4620      	mov	r0, r4
 23fc458:	f7ff ffec 	bl	23fc434 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>
}
 23fc45c:	bd10      	pop	{r4, pc}

023fc45e <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>:

/*!
    @brief  Set the WR line LOW, then HIGH. Used for parallel-connected
            interfaces when writing data.
*/
inline void Adafruit_SPITFT::TFT_WR_STROBE(void) {
 23fc45e:	b510      	push	{r4, lr}
 23fc460:	4604      	mov	r4, r0
 #else  // !HAS_PORT_SET_CLR
    *tft8.wrPort   &= tft8.wrPinMaskClr;
    *tft8.wrPort   |= tft8.wrPinMaskSet;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(tft8._wr, LOW);
 23fc462:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 23fc466:	2100      	movs	r1, #0
 23fc468:	b280      	uxth	r0, r0
 23fc46a:	f001 fdb4 	bl	23fdfd6 <digitalWrite>
    digitalWrite(tft8._wr, HIGH);
 23fc46e:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23fc472:	2101      	movs	r1, #1
#endif // end !USE_FAST_PINIO
}
 23fc474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(tft8._wr, HIGH);
 23fc478:	b280      	uxth	r0, r0
 23fc47a:	f001 bdac 	b.w	23fdfd6 <digitalWrite>

023fc47e <_ZN15Adafruit_SPITFT10writeColorEtm>:
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {
 23fc47e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc482:	4605      	mov	r5, r0
 23fc484:	460e      	mov	r6, r1
    if(!len) return; // Avoid 0-byte transfers
 23fc486:	4614      	mov	r4, r2
 23fc488:	b17a      	cbz	r2, 23fc4aa <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
    if(connection == TFT_HARD_SPI) {
 23fc48a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    uint8_t hi = color >> 8, lo = color;
 23fc48e:	ea4f 2811 	mov.w	r8, r1, lsr #8
 23fc492:	b2cf      	uxtb	r7, r1
    if(connection == TFT_HARD_SPI) {
 23fc494:	b95b      	cbnz	r3, 23fc4ae <_ZN15Adafruit_SPITFT10writeColorEtm+0x30>
            hwspi._spi->transfer(hi);
 23fc496:	4641      	mov	r1, r8
 23fc498:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fc49a:	f001 fb6d 	bl	23fdb78 <_ZN8SPIClass8transferEh>
            hwspi._spi->transfer(lo);
 23fc49e:	4639      	mov	r1, r7
 23fc4a0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fc4a2:	f001 fb69 	bl	23fdb78 <_ZN8SPIClass8transferEh>
        while(len--) {
 23fc4a6:	3c01      	subs	r4, #1
 23fc4a8:	d1f5      	bne.n	23fc496 <_ZN15Adafruit_SPITFT10writeColorEtm+0x18>
}
 23fc4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(connection == TFT_SOFT_SPI) {
 23fc4ae:	2b01      	cmp	r3, #1
 23fc4b0:	d11e      	bne.n	23fc4f0 <_ZN15Adafruit_SPITFT10writeColorEtm+0x72>
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fc4b2:	46b0      	mov	r8, r6
 23fc4b4:	2710      	movs	r7, #16
                if(x & 0x8000) SPI_MOSI_HIGH();
 23fc4b6:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 23fc4ba:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
 23fc4be:	d014      	beq.n	23fc4ea <_ZN15Adafruit_SPITFT10writeColorEtm+0x6c>
 23fc4c0:	f7ff feac 	bl	23fc21c <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
                SPI_SCK_HIGH();
 23fc4c4:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fc4c8:	3f01      	subs	r7, #1
                SPI_SCK_HIGH();
 23fc4ca:	f7ff fe9f 	bl	23fc20c <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
                x <<= 1;
 23fc4ce:	ea4f 0848 	mov.w	r8, r8, lsl #1
                SPI_SCK_LOW();
 23fc4d2:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fc4d6:	b2bf      	uxth	r7, r7
                SPI_SCK_LOW();
 23fc4d8:	f7ff fe94 	bl	23fc204 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
                x <<= 1;
 23fc4dc:	fa1f f888 	uxth.w	r8, r8
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fc4e0:	2f00      	cmp	r7, #0
 23fc4e2:	d1e8      	bne.n	23fc4b6 <_ZN15Adafruit_SPITFT10writeColorEtm+0x38>
        while(len--) {
 23fc4e4:	3c01      	subs	r4, #1
 23fc4e6:	d1e4      	bne.n	23fc4b2 <_ZN15Adafruit_SPITFT10writeColorEtm+0x34>
 23fc4e8:	e7df      	b.n	23fc4aa <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                else           SPI_MOSI_LOW();
 23fc4ea:	f7ff fe93 	bl	23fc214 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fc4ee:	e7e9      	b.n	23fc4c4 <_ZN15Adafruit_SPITFT10writeColorEtm+0x46>
        if(hi == lo) {
 23fc4f0:	45b8      	cmp	r8, r7
 23fc4f2:	d0da      	beq.n	23fc4aa <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                TFT_WR_STROBE();
 23fc4f4:	4628      	mov	r0, r5
 23fc4f6:	f7ff ffb2 	bl	23fc45e <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
            while(len--) {
 23fc4fa:	3c01      	subs	r4, #1
 23fc4fc:	d1fa      	bne.n	23fc4f4 <_ZN15Adafruit_SPITFT10writeColorEtm+0x76>
 23fc4fe:	e7d4      	b.n	23fc4aa <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>

023fc500 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>:
  int16_t w, int16_t h, uint16_t color) {
 23fc500:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fc504:	461d      	mov	r5, r3
 23fc506:	4604      	mov	r4, r0
    setAddrWindow(x, y, w, h);
 23fc508:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  int16_t w, int16_t h, uint16_t color) {
 23fc50c:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    setAddrWindow(x, y, w, h);
 23fc510:	9300      	str	r3, [sp, #0]
 23fc512:	6803      	ldr	r3, [r0, #0]
 23fc514:	b292      	uxth	r2, r2
 23fc516:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
 23fc51a:	b289      	uxth	r1, r1
 23fc51c:	b2ab      	uxth	r3, r5
  int16_t w, int16_t h, uint16_t color) {
 23fc51e:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    setAddrWindow(x, y, w, h);
 23fc522:	47c0      	blx	r8
    writeColor(color, (uint32_t)w * h);
 23fc524:	4631      	mov	r1, r6
 23fc526:	4620      	mov	r0, r4
 23fc528:	fb05 f207 	mul.w	r2, r5, r7
}
 23fc52c:	b002      	add	sp, #8
 23fc52e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    writeColor(color, (uint32_t)w * h);
 23fc532:	f7ff bfa4 	b.w	23fc47e <_ZN15Adafruit_SPITFT10writeColorEtm>

023fc536 <_ZN15Adafruit_SPITFT13writeFillRectEsssst>:
  int16_t w, int16_t h, uint16_t color) {
 23fc536:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fc53a:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
    if(w && h) {                            // Nonzero width and height?
 23fc53e:	2b00      	cmp	r3, #0
 23fc540:	d046      	beq.n	23fc5d0 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
 23fc542:	2c00      	cmp	r4, #0
 23fc544:	d044      	beq.n	23fc5d0 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
        if(w < 0) {                         // If negative width...
 23fc546:	2b00      	cmp	r3, #0
 23fc548:	da05      	bge.n	23fc556 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x20>
            x +=  w + 1;                    //   Move X to left edge
 23fc54a:	3101      	adds	r1, #1
 23fc54c:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                        //   Use positive width
 23fc550:	425b      	negs	r3, r3
            x +=  w + 1;                    //   Move X to left edge
 23fc552:	b209      	sxth	r1, r1
            w  = -w;                        //   Use positive width
 23fc554:	b21b      	sxth	r3, r3
        if(x < _width) {                    // Not off right
 23fc556:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 23fc55a:	428e      	cmp	r6, r1
 23fc55c:	dd38      	ble.n	23fc5d0 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
            if(h < 0) {                     // If negative height...
 23fc55e:	2c00      	cmp	r4, #0
 23fc560:	da05      	bge.n	23fc56e <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x38>
                y +=  h + 1;                //   Move Y to top edge
 23fc562:	3201      	adds	r2, #1
 23fc564:	fa12 f284 	uxtah	r2, r2, r4
                h  = -h;                    //   Use positive height
 23fc568:	4264      	negs	r4, r4
                y +=  h + 1;                //   Move Y to top edge
 23fc56a:	b212      	sxth	r2, r2
                h  = -h;                    //   Use positive height
 23fc56c:	b224      	sxth	r4, r4
            if(y < _height) {               // Not off bottom
 23fc56e:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
 23fc572:	4295      	cmp	r5, r2
 23fc574:	dd2c      	ble.n	23fc5d0 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                int16_t x2 = x + w - 1;
 23fc576:	eb01 0803 	add.w	r8, r1, r3
 23fc57a:	fa1f f888 	uxth.w	r8, r8
 23fc57e:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 23fc582:	fa0f fc8c 	sxth.w	ip, ip
                if(x2 >= 0) {               // Not off left
 23fc586:	f1bc 0f00 	cmp.w	ip, #0
 23fc58a:	db21      	blt.n	23fc5d0 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                    int16_t y2 = y + h - 1;
 23fc58c:	eb02 0e04 	add.w	lr, r2, r4
 23fc590:	fa1f fe8e 	uxth.w	lr, lr
 23fc594:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
 23fc598:	b23f      	sxth	r7, r7
                    if(y2 >= 0) {           // Not off top
 23fc59a:	2f00      	cmp	r7, #0
 23fc59c:	db18      	blt.n	23fc5d0 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fc59e:	2900      	cmp	r1, #0
 23fc5a0:	bfbc      	itt	lt
 23fc5a2:	2100      	movlt	r1, #0
 23fc5a4:	fa0f f388 	sxthlt.w	r3, r8
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fc5a8:	2a00      	cmp	r2, #0
 23fc5aa:	bfbc      	itt	lt
 23fc5ac:	2200      	movlt	r2, #0
 23fc5ae:	fa0f f48e 	sxthlt.w	r4, lr
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fc5b2:	4566      	cmp	r6, ip
 23fc5b4:	bfdc      	itt	le
 23fc5b6:	1a73      	suble	r3, r6, r1
 23fc5b8:	b21b      	sxthle	r3, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fc5ba:	42bd      	cmp	r5, r7
 23fc5bc:	bfd8      	it	le
 23fc5be:	1aac      	suble	r4, r5, r2
                        writeFillRectPreclipped(x, y, w, h, color);
 23fc5c0:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fc5c4:	bfd8      	it	le
 23fc5c6:	b224      	sxthle	r4, r4
                        writeFillRectPreclipped(x, y, w, h, color);
 23fc5c8:	e9cd 4500 	strd	r4, r5, [sp]
 23fc5cc:	f7ff ff98 	bl	23fc500 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fc5d0:	b002      	add	sp, #8
 23fc5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fc5d6 <_ZN15Adafruit_SPITFT8fillRectEsssst>:
  uint16_t color) {
 23fc5d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fc5da:	4680      	mov	r8, r0
 23fc5dc:	460c      	mov	r4, r1
 23fc5de:	4615      	mov	r5, r2
    if(w && h) {                            // Nonzero width and height?
 23fc5e0:	461e      	mov	r6, r3
  uint16_t color) {
 23fc5e2:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fc5e6:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if(w && h) {                            // Nonzero width and height?
 23fc5ea:	2b00      	cmp	r3, #0
 23fc5ec:	d052      	beq.n	23fc694 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
 23fc5ee:	2f00      	cmp	r7, #0
 23fc5f0:	d050      	beq.n	23fc694 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
        if(w < 0) {                         // If negative width...
 23fc5f2:	2b00      	cmp	r3, #0
 23fc5f4:	da05      	bge.n	23fc602 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x2c>
            x +=  w + 1;                    //   Move X to left edge
 23fc5f6:	3401      	adds	r4, #1
 23fc5f8:	fa14 f483 	uxtah	r4, r4, r3
            w  = -w;                        //   Use positive width
 23fc5fc:	425e      	negs	r6, r3
            x +=  w + 1;                    //   Move X to left edge
 23fc5fe:	b224      	sxth	r4, r4
            w  = -w;                        //   Use positive width
 23fc600:	b236      	sxth	r6, r6
        if(x < _width) {                    // Not off right
 23fc602:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 23fc606:	42a3      	cmp	r3, r4
 23fc608:	dd44      	ble.n	23fc694 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
            if(h < 0) {                     // If negative height...
 23fc60a:	2f00      	cmp	r7, #0
 23fc60c:	da05      	bge.n	23fc61a <_ZN15Adafruit_SPITFT8fillRectEsssst+0x44>
                y +=  h + 1;                //   Move Y to top edge
 23fc60e:	3501      	adds	r5, #1
 23fc610:	fa15 f587 	uxtah	r5, r5, r7
                h  = -h;                    //   Use positive height
 23fc614:	427f      	negs	r7, r7
                y +=  h + 1;                //   Move Y to top edge
 23fc616:	b22d      	sxth	r5, r5
                h  = -h;                    //   Use positive height
 23fc618:	b23f      	sxth	r7, r7
            if(y < _height) {               // Not off bottom
 23fc61a:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 23fc61e:	42aa      	cmp	r2, r5
 23fc620:	dd38      	ble.n	23fc694 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                int16_t x2 = x + w - 1;
 23fc622:	eb04 0e06 	add.w	lr, r4, r6
 23fc626:	fa1f fe8e 	uxth.w	lr, lr
 23fc62a:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 23fc62e:	b200      	sxth	r0, r0
                if(x2 >= 0) {               // Not off left
 23fc630:	2800      	cmp	r0, #0
 23fc632:	db2f      	blt.n	23fc694 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                    int16_t y2 = y + h - 1;
 23fc634:	eb05 0c07 	add.w	ip, r5, r7
 23fc638:	fa1f fc8c 	uxth.w	ip, ip
 23fc63c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 23fc640:	b209      	sxth	r1, r1
                    if(y2 >= 0) {           // Not off top
 23fc642:	2900      	cmp	r1, #0
 23fc644:	db26      	blt.n	23fc694 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fc646:	2c00      	cmp	r4, #0
 23fc648:	bfbc      	itt	lt
 23fc64a:	2400      	movlt	r4, #0
 23fc64c:	fa0f f68e 	sxthlt.w	r6, lr
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fc650:	2d00      	cmp	r5, #0
 23fc652:	bfbc      	itt	lt
 23fc654:	2500      	movlt	r5, #0
 23fc656:	fa0f f78c 	sxthlt.w	r7, ip
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fc65a:	4283      	cmp	r3, r0
 23fc65c:	bfdc      	itt	le
 23fc65e:	1b1b      	suble	r3, r3, r4
 23fc660:	b21e      	sxthle	r6, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fc662:	428a      	cmp	r2, r1
                        startWrite();
 23fc664:	f8d8 3000 	ldr.w	r3, [r8]
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fc668:	bfdc      	itt	le
 23fc66a:	1b52      	suble	r2, r2, r5
 23fc66c:	b217      	sxthle	r7, r2
                        startWrite();
 23fc66e:	4640      	mov	r0, r8
 23fc670:	695b      	ldr	r3, [r3, #20]
 23fc672:	4798      	blx	r3
                        writeFillRectPreclipped(x, y, w, h, color);
 23fc674:	4633      	mov	r3, r6
 23fc676:	4640      	mov	r0, r8
 23fc678:	462a      	mov	r2, r5
 23fc67a:	4621      	mov	r1, r4
 23fc67c:	e9cd 7900 	strd	r7, r9, [sp]
 23fc680:	f7ff ff3e 	bl	23fc500 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                        endWrite();
 23fc684:	4640      	mov	r0, r8
 23fc686:	f8d8 3000 	ldr.w	r3, [r8]
 23fc68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fc68c:	b003      	add	sp, #12
 23fc68e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                        endWrite();
 23fc692:	4718      	bx	r3
}
 23fc694:	b003      	add	sp, #12
 23fc696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fc69a <_ZN15Adafruit_SPITFT13drawFastHLineEssst>:
  uint16_t color) {
 23fc69a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fc69e:	1e17      	subs	r7, r2, #0
  uint16_t color) {
 23fc6a0:	4606      	mov	r6, r0
 23fc6a2:	460c      	mov	r4, r1
 23fc6a4:	461d      	mov	r5, r3
 23fc6a6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fc6aa:	db33      	blt.n	23fc714 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
 23fc6ac:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fc6b0:	42bb      	cmp	r3, r7
 23fc6b2:	dd2f      	ble.n	23fc714 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
 23fc6b4:	2d00      	cmp	r5, #0
 23fc6b6:	d02d      	beq.n	23fc714 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
        if(w < 0) {                      // If negative width...
 23fc6b8:	da05      	bge.n	23fc6c6 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x2c>
            x +=  w + 1;                 //   Move X to left edge
 23fc6ba:	3401      	adds	r4, #1
 23fc6bc:	fa14 f485 	uxtah	r4, r4, r5
            w  = -w;                     //   Use positive width
 23fc6c0:	426d      	negs	r5, r5
            x +=  w + 1;                 //   Move X to left edge
 23fc6c2:	b224      	sxth	r4, r4
            w  = -w;                     //   Use positive width
 23fc6c4:	b22d      	sxth	r5, r5
        if(x < _width) {                 // Not off right
 23fc6c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 23fc6ca:	42a3      	cmp	r3, r4
 23fc6cc:	dd22      	ble.n	23fc714 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
            int16_t x2 = x + w - 1;
 23fc6ce:	1961      	adds	r1, r4, r5
 23fc6d0:	b289      	uxth	r1, r1
 23fc6d2:	1e4a      	subs	r2, r1, #1
 23fc6d4:	b212      	sxth	r2, r2
            if(x2 >= 0) {                // Not off left
 23fc6d6:	2a00      	cmp	r2, #0
 23fc6d8:	db1c      	blt.n	23fc714 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fc6da:	2c00      	cmp	r4, #0
 23fc6dc:	bfbc      	itt	lt
 23fc6de:	2400      	movlt	r4, #0
 23fc6e0:	b20d      	sxthlt	r5, r1
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fc6e2:	4293      	cmp	r3, r2
 23fc6e4:	bfdc      	itt	le
 23fc6e6:	1b1b      	suble	r3, r3, r4
 23fc6e8:	b21d      	sxthle	r5, r3
                startWrite();
 23fc6ea:	6833      	ldr	r3, [r6, #0]
 23fc6ec:	4630      	mov	r0, r6
 23fc6ee:	695b      	ldr	r3, [r3, #20]
 23fc6f0:	4798      	blx	r3
                writeFillRectPreclipped(x, y, w, 1, color);
 23fc6f2:	2301      	movs	r3, #1
 23fc6f4:	4630      	mov	r0, r6
 23fc6f6:	9300      	str	r3, [sp, #0]
 23fc6f8:	463a      	mov	r2, r7
 23fc6fa:	462b      	mov	r3, r5
 23fc6fc:	4621      	mov	r1, r4
 23fc6fe:	f8cd 8004 	str.w	r8, [sp, #4]
 23fc702:	f7ff fefd 	bl	23fc500 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
 23fc706:	4630      	mov	r0, r6
 23fc708:	6833      	ldr	r3, [r6, #0]
 23fc70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fc70c:	b002      	add	sp, #8
 23fc70e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
 23fc712:	4718      	bx	r3
}
 23fc714:	b002      	add	sp, #8
 23fc716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fc71a <_ZN15Adafruit_SPITFT13drawFastVLineEssst>:
  uint16_t color) {
 23fc71a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fc71e:	1e0f      	subs	r7, r1, #0
  uint16_t color) {
 23fc720:	4606      	mov	r6, r0
 23fc722:	4614      	mov	r4, r2
 23fc724:	461d      	mov	r5, r3
 23fc726:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fc72a:	db31      	blt.n	23fc790 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
 23fc72c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fc730:	42bb      	cmp	r3, r7
 23fc732:	dd2d      	ble.n	23fc790 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
 23fc734:	2d00      	cmp	r5, #0
 23fc736:	d02b      	beq.n	23fc790 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
        if(h < 0) {                     // If negative height...
 23fc738:	da05      	bge.n	23fc746 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x2c>
            y +=  h + 1;                //   Move Y to top edge
 23fc73a:	3401      	adds	r4, #1
 23fc73c:	fa14 f485 	uxtah	r4, r4, r5
            h  = -h;                    //   Use positive height
 23fc740:	426d      	negs	r5, r5
            y +=  h + 1;                //   Move Y to top edge
 23fc742:	b224      	sxth	r4, r4
            h  = -h;                    //   Use positive height
 23fc744:	b22d      	sxth	r5, r5
        if(y < _height) {               // Not off bottom
 23fc746:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 23fc74a:	42a3      	cmp	r3, r4
 23fc74c:	dd20      	ble.n	23fc790 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
            int16_t y2 = y + h - 1;
 23fc74e:	1961      	adds	r1, r4, r5
 23fc750:	b289      	uxth	r1, r1
 23fc752:	1e4a      	subs	r2, r1, #1
 23fc754:	b212      	sxth	r2, r2
            if(y2 >= 0) {               // Not off top
 23fc756:	2a00      	cmp	r2, #0
 23fc758:	db1a      	blt.n	23fc790 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fc75a:	2c00      	cmp	r4, #0
 23fc75c:	bfbc      	itt	lt
 23fc75e:	2400      	movlt	r4, #0
 23fc760:	b20d      	sxthlt	r5, r1
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fc762:	4293      	cmp	r3, r2
 23fc764:	bfdc      	itt	le
 23fc766:	1b1b      	suble	r3, r3, r4
 23fc768:	b21d      	sxthle	r5, r3
                startWrite();
 23fc76a:	6833      	ldr	r3, [r6, #0]
 23fc76c:	4630      	mov	r0, r6
 23fc76e:	695b      	ldr	r3, [r3, #20]
 23fc770:	4798      	blx	r3
                writeFillRectPreclipped(x, y, 1, h, color);
 23fc772:	4630      	mov	r0, r6
 23fc774:	2301      	movs	r3, #1
 23fc776:	4622      	mov	r2, r4
 23fc778:	4639      	mov	r1, r7
 23fc77a:	e9cd 5800 	strd	r5, r8, [sp]
 23fc77e:	f7ff febf 	bl	23fc500 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
 23fc782:	4630      	mov	r0, r6
 23fc784:	6833      	ldr	r3, [r6, #0]
 23fc786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fc788:	b002      	add	sp, #8
 23fc78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
 23fc78e:	4718      	bx	r3
}
 23fc790:	b002      	add	sp, #8
 23fc792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fc796 <_ZN15Adafruit_SPITFT14writeFastHLineEssst>:
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fc796:	2a00      	cmp	r2, #0
  uint16_t color) {
 23fc798:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fc79a:	db26      	blt.n	23fc7ea <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
 23fc79c:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fc7a0:	4294      	cmp	r4, r2
 23fc7a2:	dd22      	ble.n	23fc7ea <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
 23fc7a4:	2b00      	cmp	r3, #0
 23fc7a6:	d020      	beq.n	23fc7ea <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
        if(w < 0) {                      // If negative width...
 23fc7a8:	da05      	bge.n	23fc7b6 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x20>
            x +=  w + 1;                 //   Move X to left edge
 23fc7aa:	3101      	adds	r1, #1
 23fc7ac:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                     //   Use positive width
 23fc7b0:	425b      	negs	r3, r3
            x +=  w + 1;                 //   Move X to left edge
 23fc7b2:	b209      	sxth	r1, r1
            w  = -w;                     //   Use positive width
 23fc7b4:	b21b      	sxth	r3, r3
        if(x < _width) {                 // Not off right
 23fc7b6:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fc7ba:	428c      	cmp	r4, r1
 23fc7bc:	dd15      	ble.n	23fc7ea <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
            int16_t x2 = x + w - 1;
 23fc7be:	18ce      	adds	r6, r1, r3
 23fc7c0:	b2b6      	uxth	r6, r6
 23fc7c2:	1e75      	subs	r5, r6, #1
 23fc7c4:	b22d      	sxth	r5, r5
            if(x2 >= 0) {                // Not off left
 23fc7c6:	2d00      	cmp	r5, #0
 23fc7c8:	db0f      	blt.n	23fc7ea <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fc7ca:	2900      	cmp	r1, #0
 23fc7cc:	bfbc      	itt	lt
 23fc7ce:	2100      	movlt	r1, #0
 23fc7d0:	b233      	sxthlt	r3, r6
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fc7d2:	42ac      	cmp	r4, r5
 23fc7d4:	bfd8      	it	le
 23fc7d6:	1a63      	suble	r3, r4, r1
                writeFillRectPreclipped(x, y, w, 1, color);
 23fc7d8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fc7dc:	bfd8      	it	le
 23fc7de:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, w, 1, color);
 23fc7e0:	9401      	str	r4, [sp, #4]
 23fc7e2:	2401      	movs	r4, #1
 23fc7e4:	9400      	str	r4, [sp, #0]
 23fc7e6:	f7ff fe8b 	bl	23fc500 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fc7ea:	b002      	add	sp, #8
 23fc7ec:	bd70      	pop	{r4, r5, r6, pc}

023fc7ee <_ZN15Adafruit_SPITFT14writeFastVLineEssst>:
  uint16_t color) {
 23fc7ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fc7f0:	2900      	cmp	r1, #0
 23fc7f2:	db26      	blt.n	23fc842 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
 23fc7f4:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fc7f8:	428c      	cmp	r4, r1
 23fc7fa:	dd22      	ble.n	23fc842 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
 23fc7fc:	2b00      	cmp	r3, #0
 23fc7fe:	d020      	beq.n	23fc842 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
        if(h < 0) {                     // If negative height...
 23fc800:	da05      	bge.n	23fc80e <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x20>
            y +=  h + 1;                //   Move Y to top edge
 23fc802:	3201      	adds	r2, #1
 23fc804:	fa12 f283 	uxtah	r2, r2, r3
            h  = -h;                    //   Use positive height
 23fc808:	425b      	negs	r3, r3
            y +=  h + 1;                //   Move Y to top edge
 23fc80a:	b212      	sxth	r2, r2
            h  = -h;                    //   Use positive height
 23fc80c:	b21b      	sxth	r3, r3
        if(y < _height) {               // Not off bottom
 23fc80e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fc812:	4294      	cmp	r4, r2
 23fc814:	dd15      	ble.n	23fc842 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
            int16_t y2 = y + h - 1;
 23fc816:	18d6      	adds	r6, r2, r3
 23fc818:	b2b6      	uxth	r6, r6
 23fc81a:	1e75      	subs	r5, r6, #1
 23fc81c:	b22d      	sxth	r5, r5
            if(y2 >= 0) {               // Not off top
 23fc81e:	2d00      	cmp	r5, #0
 23fc820:	db0f      	blt.n	23fc842 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fc822:	2a00      	cmp	r2, #0
 23fc824:	bfbc      	itt	lt
 23fc826:	2200      	movlt	r2, #0
 23fc828:	b233      	sxthlt	r3, r6
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fc82a:	42ac      	cmp	r4, r5
 23fc82c:	bfd8      	it	le
 23fc82e:	1aa3      	suble	r3, r4, r2
                writeFillRectPreclipped(x, y, 1, h, color);
 23fc830:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fc834:	bfd8      	it	le
 23fc836:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, 1, h, color);
 23fc838:	e9cd 3400 	strd	r3, r4, [sp]
 23fc83c:	2301      	movs	r3, #1
 23fc83e:	f7ff fe5f 	bl	23fc500 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fc842:	b002      	add	sp, #8
 23fc844:	bd70      	pop	{r4, r5, r6, pc}

023fc846 <_ZN15Adafruit_SPITFT8spiWriteEh>:
void Adafruit_SPITFT::spiWrite(uint8_t b) {
 23fc846:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fc848:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::spiWrite(uint8_t b) {
 23fc84c:	4604      	mov	r4, r0
 23fc84e:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
 23fc850:	b923      	cbnz	r3, 23fc85c <_ZN15Adafruit_SPITFT8spiWriteEh+0x16>
}
 23fc852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(b);
 23fc856:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fc858:	f001 b98e 	b.w	23fdb78 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fc85c:	2b01      	cmp	r3, #1
 23fc85e:	d118      	bne.n	23fc892 <_ZN15Adafruit_SPITFT8spiWriteEh+0x4c>
 23fc860:	2608      	movs	r6, #8
            if(b & 0x80) SPI_MOSI_HIGH();
 23fc862:	062b      	lsls	r3, r5, #24
 23fc864:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fc868:	d510      	bpl.n	23fc88c <_ZN15Adafruit_SPITFT8spiWriteEh+0x46>
 23fc86a:	f7ff fcd7 	bl	23fc21c <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fc86e:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fc872:	f7ff fccb 	bl	23fc20c <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<8; bit++) {
 23fc876:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fc878:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fc87c:	f7ff fcc2 	bl	23fc204 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            b <<= 1;
 23fc880:	006d      	lsls	r5, r5, #1
        for(uint8_t bit=0; bit<8; bit++) {
 23fc882:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            b <<= 1;
 23fc886:	b2ed      	uxtb	r5, r5
        for(uint8_t bit=0; bit<8; bit++) {
 23fc888:	d1eb      	bne.n	23fc862 <_ZN15Adafruit_SPITFT8spiWriteEh+0x1c>
}
 23fc88a:	bd70      	pop	{r4, r5, r6, pc}
            else         SPI_MOSI_LOW();
 23fc88c:	f7ff fcc2 	bl	23fc214 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fc890:	e7ed      	b.n	23fc86e <_ZN15Adafruit_SPITFT8spiWriteEh+0x28>
        TFT_WR_STROBE();
 23fc892:	f7ff fde4 	bl	23fc45e <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fc896:	e7f8      	b.n	23fc88a <_ZN15Adafruit_SPITFT8spiWriteEh+0x44>

023fc898 <_ZN15Adafruit_SPITFT12writeCommandEh>:
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 23fc898:	b513      	push	{r0, r1, r4, lr}
 23fc89a:	4604      	mov	r4, r0
    SPI_DC_LOW();
 23fc89c:	f990 003f 	ldrsb.w	r0, [r0, #63]	; 0x3f
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 23fc8a0:	9101      	str	r1, [sp, #4]
    SPI_DC_LOW();
 23fc8a2:	f7ff fcbf 	bl	23fc224 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>
    spiWrite(cmd);
 23fc8a6:	4620      	mov	r0, r4
 23fc8a8:	9901      	ldr	r1, [sp, #4]
 23fc8aa:	f7ff ffcc 	bl	23fc846 <_ZN15Adafruit_SPITFT8spiWriteEh>
    SPI_DC_HIGH();
 23fc8ae:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
}
 23fc8b2:	b002      	add	sp, #8
 23fc8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SPI_DC_HIGH();
 23fc8b8:	f7ff bcb8 	b.w	23fc22c <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>

023fc8bc <_ZN15Adafruit_SPITFT13invertDisplayEb>:
void Adafruit_SPITFT::invertDisplay(bool i) {
 23fc8bc:	b570      	push	{r4, r5, r6, lr}
 23fc8be:	460d      	mov	r5, r1
    startWrite();
 23fc8c0:	6803      	ldr	r3, [r0, #0]
void Adafruit_SPITFT::invertDisplay(bool i) {
 23fc8c2:	4604      	mov	r4, r0
    startWrite();
 23fc8c4:	695b      	ldr	r3, [r3, #20]
 23fc8c6:	4798      	blx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
 23fc8c8:	b155      	cbz	r5, 23fc8e0 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x24>
 23fc8ca:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 23fc8ce:	4620      	mov	r0, r4
 23fc8d0:	f7ff ffe2 	bl	23fc898 <_ZN15Adafruit_SPITFT12writeCommandEh>
    endWrite();
 23fc8d4:	6823      	ldr	r3, [r4, #0]
 23fc8d6:	4620      	mov	r0, r4
}
 23fc8d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    endWrite();
 23fc8dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc8de:	4718      	bx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
 23fc8e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 23fc8e4:	e7f3      	b.n	23fc8ce <_ZN15Adafruit_SPITFT13invertDisplayEb+0x12>

023fc8e6 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>:
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
 23fc8e6:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fc8e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
 23fc8ec:	4605      	mov	r5, r0
 23fc8ee:	460c      	mov	r4, r1
    if(connection == TFT_HARD_SPI) {
 23fc8f0:	b94b      	cbnz	r3, 23fc906 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x20>
        hwspi._spi->transfer(w >> 8);
 23fc8f2:	0a09      	lsrs	r1, r1, #8
 23fc8f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fc8f6:	f001 f93f 	bl	23fdb78 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(w);
 23fc8fa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23fc8fc:	b2e1      	uxtb	r1, r4
}
 23fc8fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(w);
 23fc902:	f001 b939 	b.w	23fdb78 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fc906:	2b01      	cmp	r3, #1
 23fc908:	d118      	bne.n	23fc93c <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x56>
 23fc90a:	2610      	movs	r6, #16
            if(w & 0x8000) SPI_MOSI_HIGH();
 23fc90c:	0423      	lsls	r3, r4, #16
 23fc90e:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
 23fc912:	d510      	bpl.n	23fc936 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x50>
 23fc914:	f7ff fc82 	bl	23fc21c <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fc918:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
 23fc91c:	f7ff fc76 	bl	23fc20c <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<16; bit++) {
 23fc920:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fc922:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
 23fc926:	f7ff fc6d 	bl	23fc204 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            w <<= 1;
 23fc92a:	0064      	lsls	r4, r4, #1
        for(uint8_t bit=0; bit<16; bit++) {
 23fc92c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            w <<= 1;
 23fc930:	b2a4      	uxth	r4, r4
        for(uint8_t bit=0; bit<16; bit++) {
 23fc932:	d1eb      	bne.n	23fc90c <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x26>
}
 23fc934:	bd70      	pop	{r4, r5, r6, pc}
            else           SPI_MOSI_LOW();
 23fc936:	f7ff fc6d 	bl	23fc214 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fc93a:	e7ed      	b.n	23fc918 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x32>
        TFT_WR_STROBE();
 23fc93c:	f7ff fd8f 	bl	23fc45e <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fc940:	e7f8      	b.n	23fc934 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x4e>

023fc942 <_ZN15Adafruit_SPITFT10writePixelEsst>:
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 23fc942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fc944:	2900      	cmp	r1, #0
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 23fc946:	4604      	mov	r4, r0
 23fc948:	461e      	mov	r6, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fc94a:	db17      	blt.n	23fc97c <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fc94c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fc950:	428b      	cmp	r3, r1
 23fc952:	dd13      	ble.n	23fc97c <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fc954:	2a00      	cmp	r2, #0
 23fc956:	db11      	blt.n	23fc97c <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fc958:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fc95c:	4293      	cmp	r3, r2
 23fc95e:	dd0d      	ble.n	23fc97c <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
        setAddrWindow(x, y, 1, 1);
 23fc960:	2301      	movs	r3, #1
 23fc962:	6805      	ldr	r5, [r0, #0]
 23fc964:	9300      	str	r3, [sp, #0]
 23fc966:	6d6f      	ldr	r7, [r5, #84]	; 0x54
 23fc968:	b292      	uxth	r2, r2
 23fc96a:	b289      	uxth	r1, r1
 23fc96c:	47b8      	blx	r7
        SPI_WRITE16(color);
 23fc96e:	4631      	mov	r1, r6
 23fc970:	4620      	mov	r0, r4
}
 23fc972:	b003      	add	sp, #12
 23fc974:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        SPI_WRITE16(color);
 23fc978:	f7ff bfb5 	b.w	23fc8e6 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
}
 23fc97c:	b003      	add	sp, #12
 23fc97e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fc980 <_ZN15Adafruit_SPITFT9drawPixelEsst>:
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fc980:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fc984:	1e0d      	subs	r5, r1, #0
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fc986:	4604      	mov	r4, r0
 23fc988:	4616      	mov	r6, r2
 23fc98a:	461f      	mov	r7, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fc98c:	db20      	blt.n	23fc9d0 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fc98e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fc992:	42ab      	cmp	r3, r5
 23fc994:	dd1c      	ble.n	23fc9d0 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fc996:	2a00      	cmp	r2, #0
 23fc998:	db1a      	blt.n	23fc9d0 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fc99a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fc99e:	4293      	cmp	r3, r2
 23fc9a0:	dd16      	ble.n	23fc9d0 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
        startWrite();
 23fc9a2:	6803      	ldr	r3, [r0, #0]
 23fc9a4:	695b      	ldr	r3, [r3, #20]
 23fc9a6:	4798      	blx	r3
        setAddrWindow(x, y, 1, 1);
 23fc9a8:	2301      	movs	r3, #1
 23fc9aa:	6822      	ldr	r2, [r4, #0]
 23fc9ac:	9300      	str	r3, [sp, #0]
 23fc9ae:	4620      	mov	r0, r4
 23fc9b0:	f8d2 8054 	ldr.w	r8, [r2, #84]	; 0x54
 23fc9b4:	b2a9      	uxth	r1, r5
 23fc9b6:	b2b2      	uxth	r2, r6
 23fc9b8:	47c0      	blx	r8
        SPI_WRITE16(color);
 23fc9ba:	4620      	mov	r0, r4
 23fc9bc:	4639      	mov	r1, r7
 23fc9be:	f7ff ff92 	bl	23fc8e6 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
        endWrite();
 23fc9c2:	4620      	mov	r0, r4
 23fc9c4:	6823      	ldr	r3, [r4, #0]
 23fc9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fc9c8:	b002      	add	sp, #8
 23fc9ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        endWrite();
 23fc9ce:	4718      	bx	r3
}
 23fc9d0:	b002      	add	sp, #8
 23fc9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fc9d6 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 23fc9d6:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fc9d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 23fc9dc:	4604      	mov	r4, r0
 23fc9de:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
 23fc9e0:	b99b      	cbnz	r3, 23fca0a <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x34>
        hwspi._spi->transfer(l >> 24);
 23fc9e2:	0e09      	lsrs	r1, r1, #24
 23fc9e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fc9e6:	f001 f8c7 	bl	23fdb78 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 16);
 23fc9ea:	f3c5 4107 	ubfx	r1, r5, #16, #8
 23fc9ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fc9f0:	f001 f8c2 	bl	23fdb78 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 8);
 23fc9f4:	f3c5 2107 	ubfx	r1, r5, #8, #8
 23fc9f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fc9fa:	f001 f8bd 	bl	23fdb78 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l);
 23fc9fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fca00:	b2e9      	uxtb	r1, r5
}
 23fca02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(l);
 23fca06:	f001 b8b7 	b.w	23fdb78 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fca0a:	2b01      	cmp	r3, #1
 23fca0c:	d118      	bne.n	23fca40 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x6a>
 23fca0e:	2620      	movs	r6, #32
            if(l & 0x80000000) SPI_MOSI_HIGH();
 23fca10:	2d00      	cmp	r5, #0
 23fca12:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fca16:	da10      	bge.n	23fca3a <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x64>
 23fca18:	f7ff fc00 	bl	23fc21c <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fca1c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fca20:	f7ff fbf4 	bl	23fc20c <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
 23fca24:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fca26:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fca2a:	f7ff fbeb 	bl	23fc204 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
 23fca2e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            l <<= 1;
 23fca32:	ea4f 0545 	mov.w	r5, r5, lsl #1
        for(uint8_t bit=0; bit<32; bit++) {
 23fca36:	d1eb      	bne.n	23fca10 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x3a>
}
 23fca38:	bd70      	pop	{r4, r5, r6, pc}
            else               SPI_MOSI_LOW();
 23fca3a:	f7ff fbeb 	bl	23fc214 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fca3e:	e7ed      	b.n	23fca1c <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x46>
        TFT_WR_STROBE();
 23fca40:	f7ff fd0d 	bl	23fc45e <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fca44:	e7f8      	b.n	23fca38 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x62>

023fca46 <_ZN15Adafruit_ST7789D1Ev>:

//#include "Adafruit_ST77xx.h"
#include "../lib/Adafruit_ST7735_RK/src/Adafruit_ST77xx.h"

/// Subclass of ST77XX type display for ST7789 TFT Driver
class Adafruit_ST7789 : public Adafruit_ST77xx {
 23fca46:	4770      	bx	lr

023fca48 <_ZN15Adafruit_ST778911setRotationEh>:
*/
/**************************************************************************/
void Adafruit_ST7789::setRotation(uint8_t m) {
  uint8_t madctl = 0;

  rotation = m & 3; // can't be higher than 3
 23fca48:	f001 0103 	and.w	r1, r1, #3

  switch (rotation) {
 23fca4c:	2902      	cmp	r1, #2
void Adafruit_ST7789::setRotation(uint8_t m) {
 23fca4e:	b570      	push	{r4, r5, r6, lr}
 23fca50:	4604      	mov	r4, r0
  rotation = m & 3; // can't be higher than 3
 23fca52:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
 23fca54:	d024      	beq.n	23fcaa0 <_ZN15Adafruit_ST778911setRotationEh+0x58>
 23fca56:	2903      	cmp	r1, #3
 23fca58:	d025      	beq.n	23fcaa6 <_ZN15Adafruit_ST778911setRotationEh+0x5e>
 23fca5a:	2901      	cmp	r1, #1
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 23fca5c:	bf14      	ite	ne
 23fca5e:	25c0      	movne	r5, #192	; 0xc0
     _xstart = _colstart;
     _ystart = _rowstart;
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fca60:	25a0      	moveq	r5, #160	; 0xa0
 23fca62:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 23fca66:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
     _xstart = _colstart;
 23fca6a:	bf19      	ittee	ne
 23fca6c:	f8a0 3040 	strhne.w	r3, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fca70:	f8a0 2042 	strhne.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fca74:	f8a0 2040 	strheq.w	r2, [r0, #64]	; 0x40
     _ystart = _colstart;
 23fca78:	f8a0 3042 	strheq.w	r3, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _xstart = 0;
     _ystart = 0;
     break;
  }
  startWrite();
 23fca7c:	6823      	ldr	r3, [r4, #0]
 23fca7e:	4620      	mov	r0, r4
 23fca80:	695b      	ldr	r3, [r3, #20]
 23fca82:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
 23fca84:	4620      	mov	r0, r4
 23fca86:	2136      	movs	r1, #54	; 0x36
 23fca88:	f7ff ff06 	bl	23fc898 <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
 23fca8c:	4620      	mov	r0, r4
 23fca8e:	4629      	mov	r1, r5
 23fca90:	f7ff fed9 	bl	23fc846 <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
 23fca94:	6823      	ldr	r3, [r4, #0]
 23fca96:	4620      	mov	r0, r4
}
 23fca98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
 23fca9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fca9e:	4718      	bx	r3
     _xstart = 0;
 23fcaa0:	2500      	movs	r5, #0
 23fcaa2:	6405      	str	r5, [r0, #64]	; 0x40
     break;
 23fcaa4:	e7ea      	b.n	23fca7c <_ZN15Adafruit_ST778911setRotationEh+0x34>
     _xstart = 0;
 23fcaa6:	2300      	movs	r3, #0
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fcaa8:	2560      	movs	r5, #96	; 0x60
     _xstart = 0;
 23fcaaa:	6403      	str	r3, [r0, #64]	; 0x40
     break;
 23fcaac:	e7e6      	b.n	23fca7c <_ZN15Adafruit_ST778911setRotationEh+0x34>

023fcaae <_ZN15Adafruit_ST7789D0Ev>:
 23fcaae:	b510      	push	{r4, lr}
 23fcab0:	4604      	mov	r4, r0
 23fcab2:	2150      	movs	r1, #80	; 0x50
 23fcab4:	f7fe fc83 	bl	23fb3be <_ZdlPvj>
 23fcab8:	4620      	mov	r0, r4
 23fcaba:	bd10      	pop	{r4, pc}

023fcabc <_ZN15Adafruit_ST7789C1Eaaa>:
Adafruit_ST7789::Adafruit_ST7789(int8_t cs, int8_t dc, int8_t rst) :
 23fcabc:	b510      	push	{r4, lr}
 23fcabe:	4604      	mov	r4, r0
  Adafruit_ST77xx(cs, dc, rst) {
 23fcac0:	f000 f89a 	bl	23fcbf8 <_ZN15Adafruit_ST77xxC1Eaaa>
 23fcac4:	4b01      	ldr	r3, [pc, #4]	; (23fcacc <_ZN15Adafruit_ST7789C1Eaaa+0x10>)
}
 23fcac6:	4620      	mov	r0, r4
  Adafruit_ST77xx(cs, dc, rst) {
 23fcac8:	6023      	str	r3, [r4, #0]
}
 23fcaca:	bd10      	pop	{r4, pc}
 23fcacc:	023ffd24 	.word	0x023ffd24

023fcad0 <_ZN15Adafruit_ST77894initEtt>:
void Adafruit_ST7789::init(uint16_t width, uint16_t height) {
 23fcad0:	b570      	push	{r4, r5, r6, lr}
 23fcad2:	4604      	mov	r4, r0
  _colstart = ST7789_240x240_XSTART;
 23fcad4:	2500      	movs	r5, #0
  commonInit(NULL);
 23fcad6:	2100      	movs	r1, #0
 23fcad8:	f000 f8e5 	bl	23fcca6 <_ZN15Adafruit_ST77xx10commonInitEPKh>
  _width    = 320;
 23fcadc:	4b07      	ldr	r3, [pc, #28]	; (23fcafc <_ZN15Adafruit_ST77894initEtt+0x2c>)
  displayInit(cmd_240x240);
 23fcade:	4620      	mov	r0, r4
  _width    = 320;
 23fcae0:	60e3      	str	r3, [r4, #12]
  displayInit(cmd_240x240);
 23fcae2:	4907      	ldr	r1, [pc, #28]	; (23fcb00 <_ZN15Adafruit_ST77894initEtt+0x30>)
  _colstart = ST7789_240x240_XSTART;
 23fcae4:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  displayInit(cmd_240x240);
 23fcae8:	f000 f89a 	bl	23fcc20 <_ZN15Adafruit_ST77xx11displayInitEPKh>
  setRotation(0);
 23fcaec:	6823      	ldr	r3, [r4, #0]
 23fcaee:	4629      	mov	r1, r5
 23fcaf0:	4620      	mov	r0, r4
}
 23fcaf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setRotation(0);
 23fcaf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fcaf8:	4718      	bx	r3
 23fcafa:	bf00      	nop
 23fcafc:	00f00140 	.word	0x00f00140
 23fcb00:	023ffcf8 	.word	0x023ffcf8

023fcb04 <_ZN15Adafruit_ST77xxD1Ev>:
#define ST77XX_MAGENTA    0xF81F
#define ST77XX_YELLOW     0xFFE0
#define	ST77XX_ORANGE     0xFC00

/// Subclass of SPITFT for ST77xx displays (lots in common!)
class Adafruit_ST77xx : public Adafruit_SPITFT {
 23fcb04:	4770      	bx	lr

023fcb06 <_ZN15Adafruit_ST77xx11setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST77xx::setRotation(uint8_t m) {
 23fcb06:	b570      	push	{r4, r5, r6, lr}
  uint8_t madctl = 0;

  rotation = m % 4; // can't be higher than 3
 23fcb08:	f001 0103 	and.w	r1, r1, #3

  switch(rotation) {
 23fcb0c:	2902      	cmp	r1, #2
void Adafruit_ST77xx::setRotation(uint8_t m) {
 23fcb0e:	4604      	mov	r4, r0
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
     _xstart = _colstart;
 23fcb10:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
     _ystart = _rowstart;
 23fcb14:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
  rotation = m % 4; // can't be higher than 3
 23fcb18:	7681      	strb	r1, [r0, #26]
  switch(rotation) {
 23fcb1a:	d020      	beq.n	23fcb5e <_ZN15Adafruit_ST77xx11setRotationEh+0x58>
 23fcb1c:	2903      	cmp	r1, #3
 23fcb1e:	d024      	beq.n	23fcb6a <_ZN15Adafruit_ST77xx11setRotationEh+0x64>
 23fcb20:	2901      	cmp	r1, #1
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 23fcb22:	bf17      	itett	ne
 23fcb24:	25c0      	movne	r5, #192	; 0xc0
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fcb26:	25a0      	moveq	r5, #160	; 0xa0
     _xstart = _colstart;
 23fcb28:	f8a0 2040 	strhne.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fcb2c:	f8a0 3042 	strhne.w	r3, [r0, #66]	; 0x42
     _ystart = _colstart;
 23fcb30:	bf04      	itt	eq
 23fcb32:	f8a0 2042 	strheq.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fcb36:	f8a0 3040 	strheq.w	r3, [r0, #64]	; 0x40
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _ystart = _colstart;
     _xstart = _rowstart;
     break;
  }
  startWrite();
 23fcb3a:	6823      	ldr	r3, [r4, #0]
 23fcb3c:	4620      	mov	r0, r4
 23fcb3e:	695b      	ldr	r3, [r3, #20]
 23fcb40:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
 23fcb42:	4620      	mov	r0, r4
 23fcb44:	2136      	movs	r1, #54	; 0x36
 23fcb46:	f7ff fea7 	bl	23fc898 <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
 23fcb4a:	4620      	mov	r0, r4
 23fcb4c:	4629      	mov	r1, r5
 23fcb4e:	f7ff fe7a 	bl	23fc846 <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
 23fcb52:	6823      	ldr	r3, [r4, #0]
 23fcb54:	4620      	mov	r0, r4
}
 23fcb56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
 23fcb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcb5c:	4718      	bx	r3
     madctl  = ST77XX_MADCTL_RGB;
 23fcb5e:	2500      	movs	r5, #0
     _xstart = _colstart;
 23fcb60:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fcb64:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
     break;
 23fcb68:	e7e7      	b.n	23fcb3a <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fcb6a:	2560      	movs	r5, #96	; 0x60
     _ystart = _colstart;
 23fcb6c:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fcb70:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
     break;
 23fcb74:	e7e1      	b.n	23fcb3a <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
	...

023fcb78 <_ZN15Adafruit_ST77xx5beginEm>:
    freq = SPI_DEFAULT_FREQ;
 23fcb78:	4b06      	ldr	r3, [pc, #24]	; (23fcb94 <_ZN15Adafruit_ST77xx5beginEm+0x1c>)
  initSPI(freq);
 23fcb7a:	2200      	movs	r2, #0
    freq = SPI_DEFAULT_FREQ;
 23fcb7c:	2900      	cmp	r1, #0
 23fcb7e:	bf18      	it	ne
 23fcb80:	460b      	movne	r3, r1
  invertOnCommand  = ST77XX_INVON;
 23fcb82:	f242 0121 	movw	r1, #8225	; 0x2021
  _freq = freq;
 23fcb86:	6483      	str	r3, [r0, #72]	; 0x48
  invertOnCommand  = ST77XX_INVON;
 23fcb88:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
  initSPI(freq);
 23fcb8c:	4619      	mov	r1, r3
 23fcb8e:	f7ff bba3 	b.w	23fc2d8 <_ZN15Adafruit_SPITFT7initSPIEmh>
 23fcb92:	bf00      	nop
 23fcb94:	00f42400 	.word	0x00f42400

023fcb98 <_ZN15Adafruit_ST77xx13setAddrWindowEtttt>:
  uint16_t h) {
 23fcb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcb9a:	4604      	mov	r4, r0
  x += _xstart;
 23fcb9c:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
  y += _ystart;
 23fcba0:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
  uint16_t h) {
 23fcba4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  x += _xstart;
 23fcba8:	4439      	add	r1, r7
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
 23fcbaa:	fa13 f781 	uxtah	r7, r3, r1
  y += _ystart;
 23fcbae:	442a      	add	r2, r5
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fcbb0:	fa16 f582 	uxtah	r5, r6, r2
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
 23fcbb4:	3f01      	subs	r7, #1
 23fcbb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fcbba:	3d01      	subs	r5, #1
  writeCommand(ST77XX_CASET); // Column addr set
 23fcbbc:	212a      	movs	r1, #42	; 0x2a
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fcbbe:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  writeCommand(ST77XX_CASET); // Column addr set
 23fcbc2:	f7ff fe69 	bl	23fc898 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(xa);
 23fcbc6:	4639      	mov	r1, r7
 23fcbc8:	4620      	mov	r0, r4
 23fcbca:	f7ff ff04 	bl	23fc9d6 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RASET); // Row addr set
 23fcbce:	4620      	mov	r0, r4
 23fcbd0:	212b      	movs	r1, #43	; 0x2b
 23fcbd2:	f7ff fe61 	bl	23fc898 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(ya);
 23fcbd6:	4629      	mov	r1, r5
 23fcbd8:	4620      	mov	r0, r4
 23fcbda:	f7ff fefc 	bl	23fc9d6 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RAMWR); // write to RAM
 23fcbde:	4620      	mov	r0, r4
}
 23fcbe0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  writeCommand(ST77XX_RAMWR); // write to RAM
 23fcbe4:	212c      	movs	r1, #44	; 0x2c
 23fcbe6:	f7ff be57 	b.w	23fc898 <_ZN15Adafruit_SPITFT12writeCommandEh>

023fcbea <_ZN15Adafruit_ST77xxD0Ev>:
 23fcbea:	b510      	push	{r4, lr}
 23fcbec:	4604      	mov	r4, r0
 23fcbee:	2150      	movs	r1, #80	; 0x50
 23fcbf0:	f7fe fbe5 	bl	23fb3be <_ZdlPvj>
 23fcbf4:	4620      	mov	r0, r4
 23fcbf6:	bd10      	pop	{r4, pc}

023fcbf8 <_ZN15Adafruit_ST77xxC1Eaaa>:
Adafruit_ST77xx::Adafruit_ST77xx(int8_t cs, int8_t dc, int8_t rst) :
 23fcbf8:	b513      	push	{r0, r1, r4, lr}
 23fcbfa:	4604      	mov	r4, r0
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
 23fcbfc:	e9cd 2300 	strd	r2, r3, [sp]
 23fcc00:	460b      	mov	r3, r1
 23fcc02:	22a0      	movs	r2, #160	; 0xa0
 23fcc04:	2180      	movs	r1, #128	; 0x80
 23fcc06:	f7ff fb37 	bl	23fc278 <_ZN15Adafruit_SPITFTC1Ettaaa>
 23fcc0a:	4b04      	ldr	r3, [pc, #16]	; (23fcc1c <_ZN15Adafruit_ST77xxC1Eaaa+0x24>)
}
 23fcc0c:	4620      	mov	r0, r4
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
 23fcc0e:	6023      	str	r3, [r4, #0]
 23fcc10:	2300      	movs	r3, #0
 23fcc12:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
}
 23fcc16:	b002      	add	sp, #8
 23fcc18:	bd10      	pop	{r4, pc}
 23fcc1a:	bf00      	nop
 23fcc1c:	023ffd84 	.word	0x023ffd84

023fcc20 <_ZN15Adafruit_ST77xx11displayInitEPKh>:
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 23fcc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fcc24:	460c      	mov	r4, r1
  startWrite();
 23fcc26:	6803      	ldr	r3, [r0, #0]
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 23fcc28:	4605      	mov	r5, r0
  startWrite();
 23fcc2a:	695b      	ldr	r3, [r3, #20]
 23fcc2c:	4798      	blx	r3
  numCommands = pgm_read_byte(addr++);   // Number of commands to follow
 23fcc2e:	f814 7b01 	ldrb.w	r7, [r4], #1
  while(numCommands--) {                 // For each command...
 23fcc32:	b397      	cbz	r7, 23fcc9a <_ZN15Adafruit_ST77xx11displayInitEPKh+0x7a>
    writeCommand(pgm_read_byte(addr++)); // Read, issue command
 23fcc34:	4626      	mov	r6, r4
 23fcc36:	4628      	mov	r0, r5
 23fcc38:	f816 1b02 	ldrb.w	r1, [r6], #2
 23fcc3c:	f7ff fe2c 	bl	23fc898 <_ZN15Adafruit_SPITFT12writeCommandEh>
    numArgs  = pgm_read_byte(addr++);    // Number of args to follow
 23fcc40:	f894 9001 	ldrb.w	r9, [r4, #1]
 23fcc44:	46b2      	mov	sl, r6
    numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 23fcc46:	f009 087f 	and.w	r8, r9, #127	; 0x7f
 23fcc4a:	4644      	mov	r4, r8
    while(numArgs--) {                   // For each argument...
 23fcc4c:	3c01      	subs	r4, #1
 23fcc4e:	b2e4      	uxtb	r4, r4
 23fcc50:	2cff      	cmp	r4, #255	; 0xff
 23fcc52:	d005      	beq.n	23fcc60 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x40>
      spiWrite(pgm_read_byte(addr++));   // Read, issue argument
 23fcc54:	4628      	mov	r0, r5
 23fcc56:	f81a 1b01 	ldrb.w	r1, [sl], #1
 23fcc5a:	f7ff fdf4 	bl	23fc846 <_ZN15Adafruit_SPITFT8spiWriteEh>
    while(numArgs--) {                   // For each argument...
 23fcc5e:	e7f5      	b.n	23fcc4c <_ZN15Adafruit_ST77xx11displayInitEPKh+0x2c>
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *csPort   |= csPinMaskSet;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_cs, HIGH);
 23fcc60:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
 23fcc64:	2101      	movs	r1, #1
 23fcc66:	b280      	uxth	r0, r0
 23fcc68:	f001 f9b5 	bl	23fdfd6 <digitalWrite>
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *csPort   &= csPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_cs, LOW);
 23fcc6c:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
 23fcc70:	2100      	movs	r1, #0
 23fcc72:	b280      	uxth	r0, r0
 23fcc74:	f001 f9af 	bl	23fdfd6 <digitalWrite>
    if(ms) {
 23fcc78:	f019 0f80 	tst.w	r9, #128	; 0x80
 23fcc7c:	eb06 0408 	add.w	r4, r6, r8
 23fcc80:	d008      	beq.n	23fcc94 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x74>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 23fcc82:	f816 0008 	ldrb.w	r0, [r6, r8]
 23fcc86:	3401      	adds	r4, #1
      if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 23fcc88:	28ff      	cmp	r0, #255	; 0xff
      delay(ms);
 23fcc8a:	bf08      	it	eq
 23fcc8c:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 23fcc90:	f000 fba4 	bl	23fd3dc <delay>
 23fcc94:	3f01      	subs	r7, #1
 23fcc96:	b2ff      	uxtb	r7, r7
 23fcc98:	e7cb      	b.n	23fcc32 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x12>
  endWrite();
 23fcc9a:	682b      	ldr	r3, [r5, #0]
 23fcc9c:	4628      	mov	r0, r5
}
 23fcc9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23fcca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcca4:	4718      	bx	r3

023fcca6 <_ZN15Adafruit_ST77xx10commonInitEPKh>:
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 23fcca6:	b538      	push	{r3, r4, r5, lr}
 23fcca8:	460d      	mov	r5, r1
  begin();
 23fccaa:	6803      	ldr	r3, [r0, #0]
 23fccac:	2100      	movs	r1, #0
 23fccae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 23fccb0:	4604      	mov	r4, r0
  begin();
 23fccb2:	4798      	blx	r3
  if(cmdList) {
 23fccb4:	b12d      	cbz	r5, 23fccc2 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x1c>
    displayInit(cmdList);
 23fccb6:	4629      	mov	r1, r5
 23fccb8:	4620      	mov	r0, r4
}
 23fccba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    displayInit(cmdList);
 23fccbe:	f7ff bfaf 	b.w	23fcc20 <_ZN15Adafruit_ST77xx11displayInitEPKh>
}
 23fccc2:	bd38      	pop	{r3, r4, r5, pc}

023fccc4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fccc4:	b509      	push	{r0, r3, lr}
 23fccc6:	4804      	ldr	r0, [pc, #16]	; (23fccd8 <os_mutex_recursive_create+0x14>)
 23fccc8:	6800      	ldr	r0, [r0, #0]
 23fccca:	4b04      	ldr	r3, [pc, #16]	; (23fccdc <os_mutex_recursive_create+0x18>)
 23fcccc:	4403      	add	r3, r0
 23fccce:	681b      	ldr	r3, [r3, #0]
 23fccd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fccd2:	9302      	str	r3, [sp, #8]
 23fccd4:	bd09      	pop	{r0, r3, pc}
 23fccd6:	0000      	.short	0x0000
 23fccd8:	1007ac98 	.word	0x1007ac98
 23fccdc:	00000030 	.word	0x00000030

023fcce0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fcce0:	b509      	push	{r0, r3, lr}
 23fcce2:	4804      	ldr	r0, [pc, #16]	; (23fccf4 <HAL_RNG_GetRandomNumber+0x14>)
 23fcce4:	6800      	ldr	r0, [r0, #0]
 23fcce6:	4b04      	ldr	r3, [pc, #16]	; (23fccf8 <HAL_RNG_GetRandomNumber+0x18>)
 23fcce8:	4403      	add	r3, r0
 23fccea:	681b      	ldr	r3, [r3, #0]
 23fccec:	685b      	ldr	r3, [r3, #4]
 23fccee:	9302      	str	r3, [sp, #8]
 23fccf0:	bd09      	pop	{r0, r3, pc}
 23fccf2:	0000      	.short	0x0000
 23fccf4:	1007ac98 	.word	0x1007ac98
 23fccf8:	00000000 	.word	0x00000000

023fccfc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fccfc:	b509      	push	{r0, r3, lr}
 23fccfe:	4804      	ldr	r0, [pc, #16]	; (23fcd10 <HAL_Delay_Microseconds+0x14>)
 23fcd00:	6800      	ldr	r0, [r0, #0]
 23fcd02:	4b04      	ldr	r3, [pc, #16]	; (23fcd14 <HAL_Delay_Microseconds+0x18>)
 23fcd04:	4403      	add	r3, r0
 23fcd06:	681b      	ldr	r3, [r3, #0]
 23fcd08:	68db      	ldr	r3, [r3, #12]
 23fcd0a:	9302      	str	r3, [sp, #8]
 23fcd0c:	bd09      	pop	{r0, r3, pc}
 23fcd0e:	0000      	.short	0x0000
 23fcd10:	1007ac98 	.word	0x1007ac98
 23fcd14:	00000000 	.word	0x00000000

023fcd18 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fcd18:	b509      	push	{r0, r3, lr}
 23fcd1a:	4804      	ldr	r0, [pc, #16]	; (23fcd2c <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fcd1c:	6800      	ldr	r0, [r0, #0]
 23fcd1e:	4b04      	ldr	r3, [pc, #16]	; (23fcd30 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fcd20:	4403      	add	r3, r0
 23fcd22:	681b      	ldr	r3, [r3, #0]
 23fcd24:	695b      	ldr	r3, [r3, #20]
 23fcd26:	9302      	str	r3, [sp, #8]
 23fcd28:	bd09      	pop	{r0, r3, pc}
 23fcd2a:	0000      	.short	0x0000
 23fcd2c:	1007ac98 	.word	0x1007ac98
 23fcd30:	00000000 	.word	0x00000000

023fcd34 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fcd34:	b509      	push	{r0, r3, lr}
 23fcd36:	4804      	ldr	r0, [pc, #16]	; (23fcd48 <hal_pin_validate_function+0x14>)
 23fcd38:	6800      	ldr	r0, [r0, #0]
 23fcd3a:	4b04      	ldr	r3, [pc, #16]	; (23fcd4c <hal_pin_validate_function+0x18>)
 23fcd3c:	4403      	add	r3, r0
 23fcd3e:	681b      	ldr	r3, [r3, #0]
 23fcd40:	685b      	ldr	r3, [r3, #4]
 23fcd42:	9302      	str	r3, [sp, #8]
 23fcd44:	bd09      	pop	{r0, r3, pc}
 23fcd46:	0000      	.short	0x0000
 23fcd48:	1007ac98 	.word	0x1007ac98
 23fcd4c:	00000014 	.word	0x00000014

023fcd50 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fcd50:	b509      	push	{r0, r3, lr}
 23fcd52:	4804      	ldr	r0, [pc, #16]	; (23fcd64 <hal_gpio_mode+0x14>)
 23fcd54:	6800      	ldr	r0, [r0, #0]
 23fcd56:	4b04      	ldr	r3, [pc, #16]	; (23fcd68 <hal_gpio_mode+0x18>)
 23fcd58:	4403      	add	r3, r0
 23fcd5a:	681b      	ldr	r3, [r3, #0]
 23fcd5c:	689b      	ldr	r3, [r3, #8]
 23fcd5e:	9302      	str	r3, [sp, #8]
 23fcd60:	bd09      	pop	{r0, r3, pc}
 23fcd62:	0000      	.short	0x0000
 23fcd64:	1007ac98 	.word	0x1007ac98
 23fcd68:	00000014 	.word	0x00000014

023fcd6c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fcd6c:	b509      	push	{r0, r3, lr}
 23fcd6e:	4804      	ldr	r0, [pc, #16]	; (23fcd80 <hal_gpio_get_mode+0x14>)
 23fcd70:	6800      	ldr	r0, [r0, #0]
 23fcd72:	4b04      	ldr	r3, [pc, #16]	; (23fcd84 <hal_gpio_get_mode+0x18>)
 23fcd74:	4403      	add	r3, r0
 23fcd76:	681b      	ldr	r3, [r3, #0]
 23fcd78:	68db      	ldr	r3, [r3, #12]
 23fcd7a:	9302      	str	r3, [sp, #8]
 23fcd7c:	bd09      	pop	{r0, r3, pc}
 23fcd7e:	0000      	.short	0x0000
 23fcd80:	1007ac98 	.word	0x1007ac98
 23fcd84:	00000014 	.word	0x00000014

023fcd88 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fcd88:	b509      	push	{r0, r3, lr}
 23fcd8a:	4804      	ldr	r0, [pc, #16]	; (23fcd9c <hal_gpio_write+0x14>)
 23fcd8c:	6800      	ldr	r0, [r0, #0]
 23fcd8e:	4b04      	ldr	r3, [pc, #16]	; (23fcda0 <hal_gpio_write+0x18>)
 23fcd90:	4403      	add	r3, r0
 23fcd92:	681b      	ldr	r3, [r3, #0]
 23fcd94:	691b      	ldr	r3, [r3, #16]
 23fcd96:	9302      	str	r3, [sp, #8]
 23fcd98:	bd09      	pop	{r0, r3, pc}
 23fcd9a:	0000      	.short	0x0000
 23fcd9c:	1007ac98 	.word	0x1007ac98
 23fcda0:	00000014 	.word	0x00000014

023fcda4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23fcda4:	b509      	push	{r0, r3, lr}
 23fcda6:	4804      	ldr	r0, [pc, #16]	; (23fcdb8 <hal_adc_read+0x14>)
 23fcda8:	6800      	ldr	r0, [r0, #0]
 23fcdaa:	4b04      	ldr	r3, [pc, #16]	; (23fcdbc <hal_adc_read+0x18>)
 23fcdac:	4403      	add	r3, r0
 23fcdae:	681b      	ldr	r3, [r3, #0]
 23fcdb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fcdb2:	9302      	str	r3, [sp, #8]
 23fcdb4:	bd09      	pop	{r0, r3, pc}
 23fcdb6:	0000      	.short	0x0000
 23fcdb8:	1007ac98 	.word	0x1007ac98
 23fcdbc:	00000014 	.word	0x00000014

023fcdc0 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fcdc0:	b509      	push	{r0, r3, lr}
 23fcdc2:	4804      	ldr	r0, [pc, #16]	; (23fcdd4 <hal_i2c_write+0x14>)
 23fcdc4:	6800      	ldr	r0, [r0, #0]
 23fcdc6:	4b04      	ldr	r3, [pc, #16]	; (23fcdd8 <hal_i2c_write+0x18>)
 23fcdc8:	4403      	add	r3, r0
 23fcdca:	681b      	ldr	r3, [r3, #0]
 23fcdcc:	6a1b      	ldr	r3, [r3, #32]
 23fcdce:	9302      	str	r3, [sp, #8]
 23fcdd0:	bd09      	pop	{r0, r3, pc}
 23fcdd2:	0000      	.short	0x0000
 23fcdd4:	1007ac98 	.word	0x1007ac98
 23fcdd8:	00000010 	.word	0x00000010

023fcddc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fcddc:	b509      	push	{r0, r3, lr}
 23fcdde:	4804      	ldr	r0, [pc, #16]	; (23fcdf0 <hal_i2c_available+0x14>)
 23fcde0:	6800      	ldr	r0, [r0, #0]
 23fcde2:	4b04      	ldr	r3, [pc, #16]	; (23fcdf4 <hal_i2c_available+0x18>)
 23fcde4:	4403      	add	r3, r0
 23fcde6:	681b      	ldr	r3, [r3, #0]
 23fcde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fcdea:	9302      	str	r3, [sp, #8]
 23fcdec:	bd09      	pop	{r0, r3, pc}
 23fcdee:	0000      	.short	0x0000
 23fcdf0:	1007ac98 	.word	0x1007ac98
 23fcdf4:	00000010 	.word	0x00000010

023fcdf8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fcdf8:	b509      	push	{r0, r3, lr}
 23fcdfa:	4804      	ldr	r0, [pc, #16]	; (23fce0c <hal_i2c_read+0x14>)
 23fcdfc:	6800      	ldr	r0, [r0, #0]
 23fcdfe:	4b04      	ldr	r3, [pc, #16]	; (23fce10 <hal_i2c_read+0x18>)
 23fce00:	4403      	add	r3, r0
 23fce02:	681b      	ldr	r3, [r3, #0]
 23fce04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fce06:	9302      	str	r3, [sp, #8]
 23fce08:	bd09      	pop	{r0, r3, pc}
 23fce0a:	0000      	.short	0x0000
 23fce0c:	1007ac98 	.word	0x1007ac98
 23fce10:	00000010 	.word	0x00000010

023fce14 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fce14:	b509      	push	{r0, r3, lr}
 23fce16:	4804      	ldr	r0, [pc, #16]	; (23fce28 <hal_i2c_peek+0x14>)
 23fce18:	6800      	ldr	r0, [r0, #0]
 23fce1a:	4b04      	ldr	r3, [pc, #16]	; (23fce2c <hal_i2c_peek+0x18>)
 23fce1c:	4403      	add	r3, r0
 23fce1e:	681b      	ldr	r3, [r3, #0]
 23fce20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fce22:	9302      	str	r3, [sp, #8]
 23fce24:	bd09      	pop	{r0, r3, pc}
 23fce26:	0000      	.short	0x0000
 23fce28:	1007ac98 	.word	0x1007ac98
 23fce2c:	00000010 	.word	0x00000010

023fce30 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fce30:	b509      	push	{r0, r3, lr}
 23fce32:	4804      	ldr	r0, [pc, #16]	; (23fce44 <hal_i2c_flush+0x14>)
 23fce34:	6800      	ldr	r0, [r0, #0]
 23fce36:	4b04      	ldr	r3, [pc, #16]	; (23fce48 <hal_i2c_flush+0x18>)
 23fce38:	4403      	add	r3, r0
 23fce3a:	681b      	ldr	r3, [r3, #0]
 23fce3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fce3e:	9302      	str	r3, [sp, #8]
 23fce40:	bd09      	pop	{r0, r3, pc}
 23fce42:	0000      	.short	0x0000
 23fce44:	1007ac98 	.word	0x1007ac98
 23fce48:	00000010 	.word	0x00000010

023fce4c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fce4c:	b509      	push	{r0, r3, lr}
 23fce4e:	4804      	ldr	r0, [pc, #16]	; (23fce60 <hal_i2c_is_enabled+0x14>)
 23fce50:	6800      	ldr	r0, [r0, #0]
 23fce52:	4b04      	ldr	r3, [pc, #16]	; (23fce64 <hal_i2c_is_enabled+0x18>)
 23fce54:	4403      	add	r3, r0
 23fce56:	681b      	ldr	r3, [r3, #0]
 23fce58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fce5a:	9302      	str	r3, [sp, #8]
 23fce5c:	bd09      	pop	{r0, r3, pc}
 23fce5e:	0000      	.short	0x0000
 23fce60:	1007ac98 	.word	0x1007ac98
 23fce64:	00000010 	.word	0x00000010

023fce68 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fce68:	b509      	push	{r0, r3, lr}
 23fce6a:	4804      	ldr	r0, [pc, #16]	; (23fce7c <hal_i2c_init+0x14>)
 23fce6c:	6800      	ldr	r0, [r0, #0]
 23fce6e:	4b04      	ldr	r3, [pc, #16]	; (23fce80 <hal_i2c_init+0x18>)
 23fce70:	4403      	add	r3, r0
 23fce72:	681b      	ldr	r3, [r3, #0]
 23fce74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fce76:	9302      	str	r3, [sp, #8]
 23fce78:	bd09      	pop	{r0, r3, pc}
 23fce7a:	0000      	.short	0x0000
 23fce7c:	1007ac98 	.word	0x1007ac98
 23fce80:	00000010 	.word	0x00000010

023fce84 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fce84:	b509      	push	{r0, r3, lr}
 23fce86:	4804      	ldr	r0, [pc, #16]	; (23fce98 <inet_inet_ntop+0x14>)
 23fce88:	6800      	ldr	r0, [r0, #0]
 23fce8a:	4b04      	ldr	r3, [pc, #16]	; (23fce9c <inet_inet_ntop+0x18>)
 23fce8c:	4403      	add	r3, r0
 23fce8e:	681b      	ldr	r3, [r3, #0]
 23fce90:	695b      	ldr	r3, [r3, #20]
 23fce92:	9302      	str	r3, [sp, #8]
 23fce94:	bd09      	pop	{r0, r3, pc}
 23fce96:	0000      	.short	0x0000
 23fce98:	1007ac98 	.word	0x1007ac98
 23fce9c:	0000004c 	.word	0x0000004c

023fcea0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fcea0:	b509      	push	{r0, r3, lr}
 23fcea2:	4804      	ldr	r0, [pc, #16]	; (23fceb4 <netdb_freeaddrinfo+0x14>)
 23fcea4:	6800      	ldr	r0, [r0, #0]
 23fcea6:	4b04      	ldr	r3, [pc, #16]	; (23fceb8 <netdb_freeaddrinfo+0x18>)
 23fcea8:	4403      	add	r3, r0
 23fceaa:	681b      	ldr	r3, [r3, #0]
 23fceac:	689b      	ldr	r3, [r3, #8]
 23fceae:	9302      	str	r3, [sp, #8]
 23fceb0:	bd09      	pop	{r0, r3, pc}
 23fceb2:	0000      	.short	0x0000
 23fceb4:	1007ac98 	.word	0x1007ac98
 23fceb8:	00000050 	.word	0x00000050

023fcebc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fcebc:	b509      	push	{r0, r3, lr}
 23fcebe:	4804      	ldr	r0, [pc, #16]	; (23fced0 <netdb_getaddrinfo+0x14>)
 23fcec0:	6800      	ldr	r0, [r0, #0]
 23fcec2:	4b04      	ldr	r3, [pc, #16]	; (23fced4 <netdb_getaddrinfo+0x18>)
 23fcec4:	4403      	add	r3, r0
 23fcec6:	681b      	ldr	r3, [r3, #0]
 23fcec8:	68db      	ldr	r3, [r3, #12]
 23fceca:	9302      	str	r3, [sp, #8]
 23fcecc:	bd09      	pop	{r0, r3, pc}
 23fcece:	0000      	.short	0x0000
 23fced0:	1007ac98 	.word	0x1007ac98
 23fced4:	00000050 	.word	0x00000050

023fced8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fced8:	b509      	push	{r0, r3, lr}
 23fceda:	4804      	ldr	r0, [pc, #16]	; (23fceec <hal_spi_begin+0x14>)
 23fcedc:	6800      	ldr	r0, [r0, #0]
 23fcede:	4b04      	ldr	r3, [pc, #16]	; (23fcef0 <hal_spi_begin+0x18>)
 23fcee0:	4403      	add	r3, r0
 23fcee2:	681b      	ldr	r3, [r3, #0]
 23fcee4:	681b      	ldr	r3, [r3, #0]
 23fcee6:	9302      	str	r3, [sp, #8]
 23fcee8:	bd09      	pop	{r0, r3, pc}
 23fceea:	0000      	.short	0x0000
 23fceec:	1007ac98 	.word	0x1007ac98
 23fcef0:	00000018 	.word	0x00000018

023fcef4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fcef4:	b509      	push	{r0, r3, lr}
 23fcef6:	4804      	ldr	r0, [pc, #16]	; (23fcf08 <hal_spi_transfer+0x14>)
 23fcef8:	6800      	ldr	r0, [r0, #0]
 23fcefa:	4b04      	ldr	r3, [pc, #16]	; (23fcf0c <hal_spi_transfer+0x18>)
 23fcefc:	4403      	add	r3, r0
 23fcefe:	681b      	ldr	r3, [r3, #0]
 23fcf00:	695b      	ldr	r3, [r3, #20]
 23fcf02:	9302      	str	r3, [sp, #8]
 23fcf04:	bd09      	pop	{r0, r3, pc}
 23fcf06:	0000      	.short	0x0000
 23fcf08:	1007ac98 	.word	0x1007ac98
 23fcf0c:	00000018 	.word	0x00000018

023fcf10 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fcf10:	b509      	push	{r0, r3, lr}
 23fcf12:	4804      	ldr	r0, [pc, #16]	; (23fcf24 <hal_spi_init+0x14>)
 23fcf14:	6800      	ldr	r0, [r0, #0]
 23fcf16:	4b04      	ldr	r3, [pc, #16]	; (23fcf28 <hal_spi_init+0x18>)
 23fcf18:	4403      	add	r3, r0
 23fcf1a:	681b      	ldr	r3, [r3, #0]
 23fcf1c:	69db      	ldr	r3, [r3, #28]
 23fcf1e:	9302      	str	r3, [sp, #8]
 23fcf20:	bd09      	pop	{r0, r3, pc}
 23fcf22:	0000      	.short	0x0000
 23fcf24:	1007ac98 	.word	0x1007ac98
 23fcf28:	00000018 	.word	0x00000018

023fcf2c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fcf2c:	b509      	push	{r0, r3, lr}
 23fcf2e:	4804      	ldr	r0, [pc, #16]	; (23fcf40 <hal_spi_is_enabled+0x14>)
 23fcf30:	6800      	ldr	r0, [r0, #0]
 23fcf32:	4b04      	ldr	r3, [pc, #16]	; (23fcf44 <hal_spi_is_enabled+0x18>)
 23fcf34:	4403      	add	r3, r0
 23fcf36:	681b      	ldr	r3, [r3, #0]
 23fcf38:	6a1b      	ldr	r3, [r3, #32]
 23fcf3a:	9302      	str	r3, [sp, #8]
 23fcf3c:	bd09      	pop	{r0, r3, pc}
 23fcf3e:	0000      	.short	0x0000
 23fcf40:	1007ac98 	.word	0x1007ac98
 23fcf44:	00000018 	.word	0x00000018

023fcf48 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fcf48:	b509      	push	{r0, r3, lr}
 23fcf4a:	4804      	ldr	r0, [pc, #16]	; (23fcf5c <hal_spi_info+0x14>)
 23fcf4c:	6800      	ldr	r0, [r0, #0]
 23fcf4e:	4b04      	ldr	r3, [pc, #16]	; (23fcf60 <hal_spi_info+0x18>)
 23fcf50:	4403      	add	r3, r0
 23fcf52:	681b      	ldr	r3, [r3, #0]
 23fcf54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fcf56:	9302      	str	r3, [sp, #8]
 23fcf58:	bd09      	pop	{r0, r3, pc}
 23fcf5a:	0000      	.short	0x0000
 23fcf5c:	1007ac98 	.word	0x1007ac98
 23fcf60:	00000018 	.word	0x00000018

023fcf64 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23fcf64:	b509      	push	{r0, r3, lr}
 23fcf66:	4804      	ldr	r0, [pc, #16]	; (23fcf78 <hal_spi_set_settings+0x14>)
 23fcf68:	6800      	ldr	r0, [r0, #0]
 23fcf6a:	4b04      	ldr	r3, [pc, #16]	; (23fcf7c <hal_spi_set_settings+0x18>)
 23fcf6c:	4403      	add	r3, r0
 23fcf6e:	681b      	ldr	r3, [r3, #0]
 23fcf70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fcf72:	9302      	str	r3, [sp, #8]
 23fcf74:	bd09      	pop	{r0, r3, pc}
 23fcf76:	0000      	.short	0x0000
 23fcf78:	1007ac98 	.word	0x1007ac98
 23fcf7c:	00000018 	.word	0x00000018

023fcf80 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fcf80:	b509      	push	{r0, r3, lr}
 23fcf82:	4804      	ldr	r0, [pc, #16]	; (23fcf94 <hal_spi_acquire+0x14>)
 23fcf84:	6800      	ldr	r0, [r0, #0]
 23fcf86:	4b04      	ldr	r3, [pc, #16]	; (23fcf98 <hal_spi_acquire+0x18>)
 23fcf88:	4403      	add	r3, r0
 23fcf8a:	681b      	ldr	r3, [r3, #0]
 23fcf8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcf8e:	9302      	str	r3, [sp, #8]
 23fcf90:	bd09      	pop	{r0, r3, pc}
 23fcf92:	0000      	.short	0x0000
 23fcf94:	1007ac98 	.word	0x1007ac98
 23fcf98:	00000018 	.word	0x00000018

023fcf9c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fcf9c:	b509      	push	{r0, r3, lr}
 23fcf9e:	4804      	ldr	r0, [pc, #16]	; (23fcfb0 <hal_spi_release+0x14>)
 23fcfa0:	6800      	ldr	r0, [r0, #0]
 23fcfa2:	4b04      	ldr	r3, [pc, #16]	; (23fcfb4 <hal_spi_release+0x18>)
 23fcfa4:	4403      	add	r3, r0
 23fcfa6:	681b      	ldr	r3, [r3, #0]
 23fcfa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcfaa:	9302      	str	r3, [sp, #8]
 23fcfac:	bd09      	pop	{r0, r3, pc}
 23fcfae:	0000      	.short	0x0000
 23fcfb0:	1007ac98 	.word	0x1007ac98
 23fcfb4:	00000018 	.word	0x00000018

023fcfb8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fcfb8:	b509      	push	{r0, r3, lr}
 23fcfba:	4804      	ldr	r0, [pc, #16]	; (23fcfcc <hal_usart_write+0x14>)
 23fcfbc:	6800      	ldr	r0, [r0, #0]
 23fcfbe:	4b04      	ldr	r3, [pc, #16]	; (23fcfd0 <hal_usart_write+0x18>)
 23fcfc0:	4403      	add	r3, r0
 23fcfc2:	681b      	ldr	r3, [r3, #0]
 23fcfc4:	68db      	ldr	r3, [r3, #12]
 23fcfc6:	9302      	str	r3, [sp, #8]
 23fcfc8:	bd09      	pop	{r0, r3, pc}
 23fcfca:	0000      	.short	0x0000
 23fcfcc:	1007ac98 	.word	0x1007ac98
 23fcfd0:	00000024 	.word	0x00000024

023fcfd4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fcfd4:	b509      	push	{r0, r3, lr}
 23fcfd6:	4804      	ldr	r0, [pc, #16]	; (23fcfe8 <hal_usart_available+0x14>)
 23fcfd8:	6800      	ldr	r0, [r0, #0]
 23fcfda:	4b04      	ldr	r3, [pc, #16]	; (23fcfec <hal_usart_available+0x18>)
 23fcfdc:	4403      	add	r3, r0
 23fcfde:	681b      	ldr	r3, [r3, #0]
 23fcfe0:	691b      	ldr	r3, [r3, #16]
 23fcfe2:	9302      	str	r3, [sp, #8]
 23fcfe4:	bd09      	pop	{r0, r3, pc}
 23fcfe6:	0000      	.short	0x0000
 23fcfe8:	1007ac98 	.word	0x1007ac98
 23fcfec:	00000024 	.word	0x00000024

023fcff0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fcff0:	b509      	push	{r0, r3, lr}
 23fcff2:	4804      	ldr	r0, [pc, #16]	; (23fd004 <hal_usart_read+0x14>)
 23fcff4:	6800      	ldr	r0, [r0, #0]
 23fcff6:	4b04      	ldr	r3, [pc, #16]	; (23fd008 <hal_usart_read+0x18>)
 23fcff8:	4403      	add	r3, r0
 23fcffa:	681b      	ldr	r3, [r3, #0]
 23fcffc:	695b      	ldr	r3, [r3, #20]
 23fcffe:	9302      	str	r3, [sp, #8]
 23fd000:	bd09      	pop	{r0, r3, pc}
 23fd002:	0000      	.short	0x0000
 23fd004:	1007ac98 	.word	0x1007ac98
 23fd008:	00000024 	.word	0x00000024

023fd00c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fd00c:	b509      	push	{r0, r3, lr}
 23fd00e:	4804      	ldr	r0, [pc, #16]	; (23fd020 <hal_usart_peek+0x14>)
 23fd010:	6800      	ldr	r0, [r0, #0]
 23fd012:	4b04      	ldr	r3, [pc, #16]	; (23fd024 <hal_usart_peek+0x18>)
 23fd014:	4403      	add	r3, r0
 23fd016:	681b      	ldr	r3, [r3, #0]
 23fd018:	699b      	ldr	r3, [r3, #24]
 23fd01a:	9302      	str	r3, [sp, #8]
 23fd01c:	bd09      	pop	{r0, r3, pc}
 23fd01e:	0000      	.short	0x0000
 23fd020:	1007ac98 	.word	0x1007ac98
 23fd024:	00000024 	.word	0x00000024

023fd028 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fd028:	b509      	push	{r0, r3, lr}
 23fd02a:	4804      	ldr	r0, [pc, #16]	; (23fd03c <hal_usart_flush+0x14>)
 23fd02c:	6800      	ldr	r0, [r0, #0]
 23fd02e:	4b04      	ldr	r3, [pc, #16]	; (23fd040 <hal_usart_flush+0x18>)
 23fd030:	4403      	add	r3, r0
 23fd032:	681b      	ldr	r3, [r3, #0]
 23fd034:	69db      	ldr	r3, [r3, #28]
 23fd036:	9302      	str	r3, [sp, #8]
 23fd038:	bd09      	pop	{r0, r3, pc}
 23fd03a:	0000      	.short	0x0000
 23fd03c:	1007ac98 	.word	0x1007ac98
 23fd040:	00000024 	.word	0x00000024

023fd044 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fd044:	b509      	push	{r0, r3, lr}
 23fd046:	4804      	ldr	r0, [pc, #16]	; (23fd058 <hal_usart_is_enabled+0x14>)
 23fd048:	6800      	ldr	r0, [r0, #0]
 23fd04a:	4b04      	ldr	r3, [pc, #16]	; (23fd05c <hal_usart_is_enabled+0x18>)
 23fd04c:	4403      	add	r3, r0
 23fd04e:	681b      	ldr	r3, [r3, #0]
 23fd050:	6a1b      	ldr	r3, [r3, #32]
 23fd052:	9302      	str	r3, [sp, #8]
 23fd054:	bd09      	pop	{r0, r3, pc}
 23fd056:	0000      	.short	0x0000
 23fd058:	1007ac98 	.word	0x1007ac98
 23fd05c:	00000024 	.word	0x00000024

023fd060 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fd060:	b509      	push	{r0, r3, lr}
 23fd062:	4804      	ldr	r0, [pc, #16]	; (23fd074 <hal_usart_available_data_for_write+0x14>)
 23fd064:	6800      	ldr	r0, [r0, #0]
 23fd066:	4b04      	ldr	r3, [pc, #16]	; (23fd078 <hal_usart_available_data_for_write+0x18>)
 23fd068:	4403      	add	r3, r0
 23fd06a:	681b      	ldr	r3, [r3, #0]
 23fd06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd06e:	9302      	str	r3, [sp, #8]
 23fd070:	bd09      	pop	{r0, r3, pc}
 23fd072:	0000      	.short	0x0000
 23fd074:	1007ac98 	.word	0x1007ac98
 23fd078:	00000024 	.word	0x00000024

023fd07c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fd07c:	b509      	push	{r0, r3, lr}
 23fd07e:	4804      	ldr	r0, [pc, #16]	; (23fd090 <hal_usart_init_ex+0x14>)
 23fd080:	6800      	ldr	r0, [r0, #0]
 23fd082:	4b04      	ldr	r3, [pc, #16]	; (23fd094 <hal_usart_init_ex+0x18>)
 23fd084:	4403      	add	r3, r0
 23fd086:	681b      	ldr	r3, [r3, #0]
 23fd088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd08a:	9302      	str	r3, [sp, #8]
 23fd08c:	bd09      	pop	{r0, r3, pc}
 23fd08e:	0000      	.short	0x0000
 23fd090:	1007ac98 	.word	0x1007ac98
 23fd094:	00000024 	.word	0x00000024

023fd098 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fd098:	b509      	push	{r0, r3, lr}
 23fd09a:	4804      	ldr	r0, [pc, #16]	; (23fd0ac <HAL_USB_USART_Init+0x14>)
 23fd09c:	6800      	ldr	r0, [r0, #0]
 23fd09e:	4b04      	ldr	r3, [pc, #16]	; (23fd0b0 <HAL_USB_USART_Init+0x18>)
 23fd0a0:	4403      	add	r3, r0
 23fd0a2:	681b      	ldr	r3, [r3, #0]
 23fd0a4:	681b      	ldr	r3, [r3, #0]
 23fd0a6:	9302      	str	r3, [sp, #8]
 23fd0a8:	bd09      	pop	{r0, r3, pc}
 23fd0aa:	0000      	.short	0x0000
 23fd0ac:	1007ac98 	.word	0x1007ac98
 23fd0b0:	00000034 	.word	0x00000034

023fd0b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fd0b4:	b509      	push	{r0, r3, lr}
 23fd0b6:	4804      	ldr	r0, [pc, #16]	; (23fd0c8 <HAL_USB_USART_Begin+0x14>)
 23fd0b8:	6800      	ldr	r0, [r0, #0]
 23fd0ba:	4b04      	ldr	r3, [pc, #16]	; (23fd0cc <HAL_USB_USART_Begin+0x18>)
 23fd0bc:	4403      	add	r3, r0
 23fd0be:	681b      	ldr	r3, [r3, #0]
 23fd0c0:	685b      	ldr	r3, [r3, #4]
 23fd0c2:	9302      	str	r3, [sp, #8]
 23fd0c4:	bd09      	pop	{r0, r3, pc}
 23fd0c6:	0000      	.short	0x0000
 23fd0c8:	1007ac98 	.word	0x1007ac98
 23fd0cc:	00000034 	.word	0x00000034

023fd0d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fd0d0:	b509      	push	{r0, r3, lr}
 23fd0d2:	4804      	ldr	r0, [pc, #16]	; (23fd0e4 <HAL_USB_USART_Available_Data+0x14>)
 23fd0d4:	6800      	ldr	r0, [r0, #0]
 23fd0d6:	4b04      	ldr	r3, [pc, #16]	; (23fd0e8 <HAL_USB_USART_Available_Data+0x18>)
 23fd0d8:	4403      	add	r3, r0
 23fd0da:	681b      	ldr	r3, [r3, #0]
 23fd0dc:	691b      	ldr	r3, [r3, #16]
 23fd0de:	9302      	str	r3, [sp, #8]
 23fd0e0:	bd09      	pop	{r0, r3, pc}
 23fd0e2:	0000      	.short	0x0000
 23fd0e4:	1007ac98 	.word	0x1007ac98
 23fd0e8:	00000034 	.word	0x00000034

023fd0ec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fd0ec:	b509      	push	{r0, r3, lr}
 23fd0ee:	4804      	ldr	r0, [pc, #16]	; (23fd100 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fd0f0:	6800      	ldr	r0, [r0, #0]
 23fd0f2:	4b04      	ldr	r3, [pc, #16]	; (23fd104 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fd0f4:	4403      	add	r3, r0
 23fd0f6:	681b      	ldr	r3, [r3, #0]
 23fd0f8:	695b      	ldr	r3, [r3, #20]
 23fd0fa:	9302      	str	r3, [sp, #8]
 23fd0fc:	bd09      	pop	{r0, r3, pc}
 23fd0fe:	0000      	.short	0x0000
 23fd100:	1007ac98 	.word	0x1007ac98
 23fd104:	00000034 	.word	0x00000034

023fd108 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd108:	b509      	push	{r0, r3, lr}
 23fd10a:	4804      	ldr	r0, [pc, #16]	; (23fd11c <HAL_USB_USART_Receive_Data+0x14>)
 23fd10c:	6800      	ldr	r0, [r0, #0]
 23fd10e:	4b04      	ldr	r3, [pc, #16]	; (23fd120 <HAL_USB_USART_Receive_Data+0x18>)
 23fd110:	4403      	add	r3, r0
 23fd112:	681b      	ldr	r3, [r3, #0]
 23fd114:	699b      	ldr	r3, [r3, #24]
 23fd116:	9302      	str	r3, [sp, #8]
 23fd118:	bd09      	pop	{r0, r3, pc}
 23fd11a:	0000      	.short	0x0000
 23fd11c:	1007ac98 	.word	0x1007ac98
 23fd120:	00000034 	.word	0x00000034

023fd124 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd124:	b509      	push	{r0, r3, lr}
 23fd126:	4804      	ldr	r0, [pc, #16]	; (23fd138 <HAL_USB_USART_Send_Data+0x14>)
 23fd128:	6800      	ldr	r0, [r0, #0]
 23fd12a:	4b04      	ldr	r3, [pc, #16]	; (23fd13c <HAL_USB_USART_Send_Data+0x18>)
 23fd12c:	4403      	add	r3, r0
 23fd12e:	681b      	ldr	r3, [r3, #0]
 23fd130:	69db      	ldr	r3, [r3, #28]
 23fd132:	9302      	str	r3, [sp, #8]
 23fd134:	bd09      	pop	{r0, r3, pc}
 23fd136:	0000      	.short	0x0000
 23fd138:	1007ac98 	.word	0x1007ac98
 23fd13c:	00000034 	.word	0x00000034

023fd140 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fd140:	b509      	push	{r0, r3, lr}
 23fd142:	4804      	ldr	r0, [pc, #16]	; (23fd154 <HAL_USB_USART_Flush_Data+0x14>)
 23fd144:	6800      	ldr	r0, [r0, #0]
 23fd146:	4b04      	ldr	r3, [pc, #16]	; (23fd158 <HAL_USB_USART_Flush_Data+0x18>)
 23fd148:	4403      	add	r3, r0
 23fd14a:	681b      	ldr	r3, [r3, #0]
 23fd14c:	6a1b      	ldr	r3, [r3, #32]
 23fd14e:	9302      	str	r3, [sp, #8]
 23fd150:	bd09      	pop	{r0, r3, pc}
 23fd152:	0000      	.short	0x0000
 23fd154:	1007ac98 	.word	0x1007ac98
 23fd158:	00000034 	.word	0x00000034

023fd15c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fd15c:	b509      	push	{r0, r3, lr}
 23fd15e:	4804      	ldr	r0, [pc, #16]	; (23fd170 <panic_+0x14>)
 23fd160:	6800      	ldr	r0, [r0, #0]
 23fd162:	4b04      	ldr	r3, [pc, #16]	; (23fd174 <panic_+0x18>)
 23fd164:	4403      	add	r3, r0
 23fd166:	681b      	ldr	r3, [r3, #0]
 23fd168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd16a:	9302      	str	r3, [sp, #8]
 23fd16c:	bd09      	pop	{r0, r3, pc}
 23fd16e:	0000      	.short	0x0000
 23fd170:	1007ac98 	.word	0x1007ac98
 23fd174:	00000048 	.word	0x00000048

023fd178 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fd178:	b509      	push	{r0, r3, lr}
 23fd17a:	4804      	ldr	r0, [pc, #16]	; (23fd18c <set_system_mode+0x14>)
 23fd17c:	6800      	ldr	r0, [r0, #0]
 23fd17e:	4b04      	ldr	r3, [pc, #16]	; (23fd190 <set_system_mode+0x18>)
 23fd180:	4403      	add	r3, r0
 23fd182:	681b      	ldr	r3, [r3, #0]
 23fd184:	685b      	ldr	r3, [r3, #4]
 23fd186:	9302      	str	r3, [sp, #8]
 23fd188:	bd09      	pop	{r0, r3, pc}
 23fd18a:	0000      	.short	0x0000
 23fd18c:	1007ac98 	.word	0x1007ac98
 23fd190:	00000008 	.word	0x00000008

023fd194 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fd194:	b509      	push	{r0, r3, lr}
 23fd196:	4804      	ldr	r0, [pc, #16]	; (23fd1a8 <system_delay_ms+0x14>)
 23fd198:	6800      	ldr	r0, [r0, #0]
 23fd19a:	4b04      	ldr	r3, [pc, #16]	; (23fd1ac <system_delay_ms+0x18>)
 23fd19c:	4403      	add	r3, r0
 23fd19e:	681b      	ldr	r3, [r3, #0]
 23fd1a0:	695b      	ldr	r3, [r3, #20]
 23fd1a2:	9302      	str	r3, [sp, #8]
 23fd1a4:	bd09      	pop	{r0, r3, pc}
 23fd1a6:	0000      	.short	0x0000
 23fd1a8:	1007ac98 	.word	0x1007ac98
 23fd1ac:	00000008 	.word	0x00000008

023fd1b0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fd1b0:	b509      	push	{r0, r3, lr}
 23fd1b2:	4804      	ldr	r0, [pc, #16]	; (23fd1c4 <system_ctrl_set_app_request_handler+0x14>)
 23fd1b4:	6800      	ldr	r0, [r0, #0]
 23fd1b6:	4b04      	ldr	r3, [pc, #16]	; (23fd1c8 <system_ctrl_set_app_request_handler+0x18>)
 23fd1b8:	4403      	add	r3, r0
 23fd1ba:	681b      	ldr	r3, [r3, #0]
 23fd1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fd1c0:	9302      	str	r3, [sp, #8]
 23fd1c2:	bd09      	pop	{r0, r3, pc}
 23fd1c4:	1007ac98 	.word	0x1007ac98
 23fd1c8:	00000008 	.word	0x00000008

023fd1cc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fd1cc:	b509      	push	{r0, r3, lr}
 23fd1ce:	4804      	ldr	r0, [pc, #16]	; (23fd1e0 <system_ctrl_set_result+0x14>)
 23fd1d0:	6800      	ldr	r0, [r0, #0]
 23fd1d2:	4b04      	ldr	r3, [pc, #16]	; (23fd1e4 <system_ctrl_set_result+0x18>)
 23fd1d4:	4403      	add	r3, r0
 23fd1d6:	681b      	ldr	r3, [r3, #0]
 23fd1d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fd1dc:	9302      	str	r3, [sp, #8]
 23fd1de:	bd09      	pop	{r0, r3, pc}
 23fd1e0:	1007ac98 	.word	0x1007ac98
 23fd1e4:	00000008 	.word	0x00000008

023fd1e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fd1e8:	b509      	push	{r0, r3, lr}
 23fd1ea:	4804      	ldr	r0, [pc, #16]	; (23fd1fc <spark_set_random_seed_from_cloud_handler+0x14>)
 23fd1ec:	6800      	ldr	r0, [r0, #0]
 23fd1ee:	4b04      	ldr	r3, [pc, #16]	; (23fd200 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fd1f0:	4403      	add	r3, r0
 23fd1f2:	681b      	ldr	r3, [r3, #0]
 23fd1f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd1f6:	9302      	str	r3, [sp, #8]
 23fd1f8:	bd09      	pop	{r0, r3, pc}
 23fd1fa:	0000      	.short	0x0000
 23fd1fc:	1007ac98 	.word	0x1007ac98
 23fd200:	0000002c 	.word	0x0000002c

023fd204 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd204:	b509      	push	{r0, r3, lr}
 23fd206:	4804      	ldr	r0, [pc, #16]	; (23fd218 <network_connect+0x14>)
 23fd208:	6800      	ldr	r0, [r0, #0]
 23fd20a:	4b04      	ldr	r3, [pc, #16]	; (23fd21c <network_connect+0x18>)
 23fd20c:	4403      	add	r3, r0
 23fd20e:	681b      	ldr	r3, [r3, #0]
 23fd210:	685b      	ldr	r3, [r3, #4]
 23fd212:	9302      	str	r3, [sp, #8]
 23fd214:	bd09      	pop	{r0, r3, pc}
 23fd216:	0000      	.short	0x0000
 23fd218:	1007ac98 	.word	0x1007ac98
 23fd21c:	00000028 	.word	0x00000028

023fd220 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fd220:	b509      	push	{r0, r3, lr}
 23fd222:	4804      	ldr	r0, [pc, #16]	; (23fd234 <network_connecting+0x14>)
 23fd224:	6800      	ldr	r0, [r0, #0]
 23fd226:	4b04      	ldr	r3, [pc, #16]	; (23fd238 <network_connecting+0x18>)
 23fd228:	4403      	add	r3, r0
 23fd22a:	681b      	ldr	r3, [r3, #0]
 23fd22c:	689b      	ldr	r3, [r3, #8]
 23fd22e:	9302      	str	r3, [sp, #8]
 23fd230:	bd09      	pop	{r0, r3, pc}
 23fd232:	0000      	.short	0x0000
 23fd234:	1007ac98 	.word	0x1007ac98
 23fd238:	00000028 	.word	0x00000028

023fd23c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fd23c:	b509      	push	{r0, r3, lr}
 23fd23e:	4804      	ldr	r0, [pc, #16]	; (23fd250 <network_disconnect+0x14>)
 23fd240:	6800      	ldr	r0, [r0, #0]
 23fd242:	4b04      	ldr	r3, [pc, #16]	; (23fd254 <network_disconnect+0x18>)
 23fd244:	4403      	add	r3, r0
 23fd246:	681b      	ldr	r3, [r3, #0]
 23fd248:	68db      	ldr	r3, [r3, #12]
 23fd24a:	9302      	str	r3, [sp, #8]
 23fd24c:	bd09      	pop	{r0, r3, pc}
 23fd24e:	0000      	.short	0x0000
 23fd250:	1007ac98 	.word	0x1007ac98
 23fd254:	00000028 	.word	0x00000028

023fd258 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fd258:	b509      	push	{r0, r3, lr}
 23fd25a:	4804      	ldr	r0, [pc, #16]	; (23fd26c <network_ready+0x14>)
 23fd25c:	6800      	ldr	r0, [r0, #0]
 23fd25e:	4b04      	ldr	r3, [pc, #16]	; (23fd270 <network_ready+0x18>)
 23fd260:	4403      	add	r3, r0
 23fd262:	681b      	ldr	r3, [r3, #0]
 23fd264:	691b      	ldr	r3, [r3, #16]
 23fd266:	9302      	str	r3, [sp, #8]
 23fd268:	bd09      	pop	{r0, r3, pc}
 23fd26a:	0000      	.short	0x0000
 23fd26c:	1007ac98 	.word	0x1007ac98
 23fd270:	00000028 	.word	0x00000028

023fd274 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd274:	b509      	push	{r0, r3, lr}
 23fd276:	4804      	ldr	r0, [pc, #16]	; (23fd288 <network_on+0x14>)
 23fd278:	6800      	ldr	r0, [r0, #0]
 23fd27a:	4b04      	ldr	r3, [pc, #16]	; (23fd28c <network_on+0x18>)
 23fd27c:	4403      	add	r3, r0
 23fd27e:	681b      	ldr	r3, [r3, #0]
 23fd280:	695b      	ldr	r3, [r3, #20]
 23fd282:	9302      	str	r3, [sp, #8]
 23fd284:	bd09      	pop	{r0, r3, pc}
 23fd286:	0000      	.short	0x0000
 23fd288:	1007ac98 	.word	0x1007ac98
 23fd28c:	00000028 	.word	0x00000028

023fd290 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd290:	b509      	push	{r0, r3, lr}
 23fd292:	4804      	ldr	r0, [pc, #16]	; (23fd2a4 <network_off+0x14>)
 23fd294:	6800      	ldr	r0, [r0, #0]
 23fd296:	4b04      	ldr	r3, [pc, #16]	; (23fd2a8 <network_off+0x18>)
 23fd298:	4403      	add	r3, r0
 23fd29a:	681b      	ldr	r3, [r3, #0]
 23fd29c:	699b      	ldr	r3, [r3, #24]
 23fd29e:	9302      	str	r3, [sp, #8]
 23fd2a0:	bd09      	pop	{r0, r3, pc}
 23fd2a2:	0000      	.short	0x0000
 23fd2a4:	1007ac98 	.word	0x1007ac98
 23fd2a8:	00000028 	.word	0x00000028

023fd2ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fd2ac:	b509      	push	{r0, r3, lr}
 23fd2ae:	4804      	ldr	r0, [pc, #16]	; (23fd2c0 <network_listen+0x14>)
 23fd2b0:	6800      	ldr	r0, [r0, #0]
 23fd2b2:	4b04      	ldr	r3, [pc, #16]	; (23fd2c4 <network_listen+0x18>)
 23fd2b4:	4403      	add	r3, r0
 23fd2b6:	681b      	ldr	r3, [r3, #0]
 23fd2b8:	69db      	ldr	r3, [r3, #28]
 23fd2ba:	9302      	str	r3, [sp, #8]
 23fd2bc:	bd09      	pop	{r0, r3, pc}
 23fd2be:	0000      	.short	0x0000
 23fd2c0:	1007ac98 	.word	0x1007ac98
 23fd2c4:	00000028 	.word	0x00000028

023fd2c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fd2c8:	b509      	push	{r0, r3, lr}
 23fd2ca:	4804      	ldr	r0, [pc, #16]	; (23fd2dc <network_listening+0x14>)
 23fd2cc:	6800      	ldr	r0, [r0, #0]
 23fd2ce:	4b04      	ldr	r3, [pc, #16]	; (23fd2e0 <network_listening+0x18>)
 23fd2d0:	4403      	add	r3, r0
 23fd2d2:	681b      	ldr	r3, [r3, #0]
 23fd2d4:	6a1b      	ldr	r3, [r3, #32]
 23fd2d6:	9302      	str	r3, [sp, #8]
 23fd2d8:	bd09      	pop	{r0, r3, pc}
 23fd2da:	0000      	.short	0x0000
 23fd2dc:	1007ac98 	.word	0x1007ac98
 23fd2e0:	00000028 	.word	0x00000028

023fd2e4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fd2e4:	b509      	push	{r0, r3, lr}
 23fd2e6:	4804      	ldr	r0, [pc, #16]	; (23fd2f8 <network_set_listen_timeout+0x14>)
 23fd2e8:	6800      	ldr	r0, [r0, #0]
 23fd2ea:	4b04      	ldr	r3, [pc, #16]	; (23fd2fc <network_set_listen_timeout+0x18>)
 23fd2ec:	4403      	add	r3, r0
 23fd2ee:	681b      	ldr	r3, [r3, #0]
 23fd2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd2f2:	9302      	str	r3, [sp, #8]
 23fd2f4:	bd09      	pop	{r0, r3, pc}
 23fd2f6:	0000      	.short	0x0000
 23fd2f8:	1007ac98 	.word	0x1007ac98
 23fd2fc:	00000028 	.word	0x00000028

023fd300 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fd300:	b509      	push	{r0, r3, lr}
 23fd302:	4804      	ldr	r0, [pc, #16]	; (23fd314 <network_get_listen_timeout+0x14>)
 23fd304:	6800      	ldr	r0, [r0, #0]
 23fd306:	4b04      	ldr	r3, [pc, #16]	; (23fd318 <network_get_listen_timeout+0x18>)
 23fd308:	4403      	add	r3, r0
 23fd30a:	681b      	ldr	r3, [r3, #0]
 23fd30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd30e:	9302      	str	r3, [sp, #8]
 23fd310:	bd09      	pop	{r0, r3, pc}
 23fd312:	0000      	.short	0x0000
 23fd314:	1007ac98 	.word	0x1007ac98
 23fd318:	00000028 	.word	0x00000028

023fd31c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fd31c:	b509      	push	{r0, r3, lr}
 23fd31e:	4804      	ldr	r0, [pc, #16]	; (23fd330 <network_is_on+0x14>)
 23fd320:	6800      	ldr	r0, [r0, #0]
 23fd322:	4b04      	ldr	r3, [pc, #16]	; (23fd334 <network_is_on+0x18>)
 23fd324:	4403      	add	r3, r0
 23fd326:	681b      	ldr	r3, [r3, #0]
 23fd328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd32a:	9302      	str	r3, [sp, #8]
 23fd32c:	bd09      	pop	{r0, r3, pc}
 23fd32e:	0000      	.short	0x0000
 23fd330:	1007ac98 	.word	0x1007ac98
 23fd334:	00000028 	.word	0x00000028

023fd338 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fd338:	b509      	push	{r0, r3, lr}
 23fd33a:	4804      	ldr	r0, [pc, #16]	; (23fd34c <network_is_off+0x14>)
 23fd33c:	6800      	ldr	r0, [r0, #0]
 23fd33e:	4b04      	ldr	r3, [pc, #16]	; (23fd350 <network_is_off+0x18>)
 23fd340:	4403      	add	r3, r0
 23fd342:	681b      	ldr	r3, [r3, #0]
 23fd344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd346:	9302      	str	r3, [sp, #8]
 23fd348:	bd09      	pop	{r0, r3, pc}
 23fd34a:	0000      	.short	0x0000
 23fd34c:	1007ac98 	.word	0x1007ac98
 23fd350:	00000028 	.word	0x00000028

023fd354 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fd354:	b509      	push	{r0, r3, lr}
 23fd356:	4804      	ldr	r0, [pc, #16]	; (23fd368 <malloc+0x14>)
 23fd358:	6800      	ldr	r0, [r0, #0]
 23fd35a:	4b04      	ldr	r3, [pc, #16]	; (23fd36c <malloc+0x18>)
 23fd35c:	4403      	add	r3, r0
 23fd35e:	681b      	ldr	r3, [r3, #0]
 23fd360:	681b      	ldr	r3, [r3, #0]
 23fd362:	9302      	str	r3, [sp, #8]
 23fd364:	bd09      	pop	{r0, r3, pc}
 23fd366:	0000      	.short	0x0000
 23fd368:	1007ac98 	.word	0x1007ac98
 23fd36c:	00000004 	.word	0x00000004

023fd370 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fd370:	b509      	push	{r0, r3, lr}
 23fd372:	4804      	ldr	r0, [pc, #16]	; (23fd384 <free+0x14>)
 23fd374:	6800      	ldr	r0, [r0, #0]
 23fd376:	4b04      	ldr	r3, [pc, #16]	; (23fd388 <free+0x18>)
 23fd378:	4403      	add	r3, r0
 23fd37a:	681b      	ldr	r3, [r3, #0]
 23fd37c:	685b      	ldr	r3, [r3, #4]
 23fd37e:	9302      	str	r3, [sp, #8]
 23fd380:	bd09      	pop	{r0, r3, pc}
 23fd382:	0000      	.short	0x0000
 23fd384:	1007ac98 	.word	0x1007ac98
 23fd388:	00000004 	.word	0x00000004

023fd38c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fd38c:	b509      	push	{r0, r3, lr}
 23fd38e:	4804      	ldr	r0, [pc, #16]	; (23fd3a0 <__assert_func+0x14>)
 23fd390:	6800      	ldr	r0, [r0, #0]
 23fd392:	4b04      	ldr	r3, [pc, #16]	; (23fd3a4 <__assert_func+0x18>)
 23fd394:	4403      	add	r3, r0
 23fd396:	681b      	ldr	r3, [r3, #0]
 23fd398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd39a:	9302      	str	r3, [sp, #8]
 23fd39c:	bd09      	pop	{r0, r3, pc}
 23fd39e:	0000      	.short	0x0000
 23fd3a0:	1007ac98 	.word	0x1007ac98
 23fd3a4:	00000004 	.word	0x00000004

023fd3a8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fd3a8:	b509      	push	{r0, r3, lr}
 23fd3aa:	4804      	ldr	r0, [pc, #16]	; (23fd3bc <newlib_impure_ptr_callback+0x14>)
 23fd3ac:	6800      	ldr	r0, [r0, #0]
 23fd3ae:	4b04      	ldr	r3, [pc, #16]	; (23fd3c0 <newlib_impure_ptr_callback+0x18>)
 23fd3b0:	4403      	add	r3, r0
 23fd3b2:	681b      	ldr	r3, [r3, #0]
 23fd3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd3b6:	9302      	str	r3, [sp, #8]
 23fd3b8:	bd09      	pop	{r0, r3, pc}
 23fd3ba:	0000      	.short	0x0000
 23fd3bc:	1007ac98 	.word	0x1007ac98
 23fd3c0:	00000004 	.word	0x00000004

023fd3c4 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 23fd3c4:	428a      	cmp	r2, r1
{
 23fd3c6:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
 23fd3c8:	d007      	beq.n	23fd3da <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 23fd3ca:	1a44      	subs	r4, r0, r1
 23fd3cc:	9802      	ldr	r0, [sp, #8]
 23fd3ce:	1ac0      	subs	r0, r0, r3
 23fd3d0:	4344      	muls	r4, r0
 23fd3d2:	1a50      	subs	r0, r2, r1
 23fd3d4:	fb94 f0f0 	sdiv	r0, r4, r0
 23fd3d8:	4418      	add	r0, r3
}
 23fd3da:	bd10      	pop	{r4, pc}

023fd3dc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fd3dc:	2100      	movs	r1, #0
 23fd3de:	f7ff bed9 	b.w	23fd194 <system_delay_ms>
	...

023fd3e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fd3e4:	2300      	movs	r3, #0
 23fd3e6:	4802      	ldr	r0, [pc, #8]	; (23fd3f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fd3e8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fd3ea:	f7ff bc6b 	b.w	23fccc4 <os_mutex_recursive_create>
 23fd3ee:	bf00      	nop
 23fd3f0:	1007ae8c 	.word	0x1007ae8c

023fd3f4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd3f4:	2200      	movs	r2, #0
 23fd3f6:	6840      	ldr	r0, [r0, #4]
 23fd3f8:	4611      	mov	r1, r2
 23fd3fa:	f7ff bf65 	b.w	23fd2c8 <network_listening>

023fd3fe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd3fe:	2200      	movs	r2, #0
 23fd400:	6840      	ldr	r0, [r0, #4]
 23fd402:	4611      	mov	r1, r2
 23fd404:	f7ff bf7c 	b.w	23fd300 <network_get_listen_timeout>

023fd408 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd408:	2200      	movs	r2, #0
 23fd40a:	6840      	ldr	r0, [r0, #4]
 23fd40c:	f7ff bf6a 	b.w	23fd2e4 <network_set_listen_timeout>

023fd410 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd410:	2200      	movs	r2, #0
 23fd412:	6840      	ldr	r0, [r0, #4]
 23fd414:	f081 0101 	eor.w	r1, r1, #1
 23fd418:	f7ff bf48 	b.w	23fd2ac <network_listen>

023fd41c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd41c:	2300      	movs	r3, #0
 23fd41e:	6840      	ldr	r0, [r0, #4]
 23fd420:	461a      	mov	r2, r3
 23fd422:	4619      	mov	r1, r3
 23fd424:	f7ff bf34 	b.w	23fd290 <network_off>

023fd428 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd428:	2300      	movs	r3, #0
 23fd42a:	6840      	ldr	r0, [r0, #4]
 23fd42c:	461a      	mov	r2, r3
 23fd42e:	4619      	mov	r1, r3
 23fd430:	f7ff bf20 	b.w	23fd274 <network_on>

023fd434 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd434:	2200      	movs	r2, #0
 23fd436:	6840      	ldr	r0, [r0, #4]
 23fd438:	4611      	mov	r1, r2
 23fd43a:	f7ff bf0d 	b.w	23fd258 <network_ready>

023fd43e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd43e:	2200      	movs	r2, #0
 23fd440:	6840      	ldr	r0, [r0, #4]
 23fd442:	4611      	mov	r1, r2
 23fd444:	f7ff beec 	b.w	23fd220 <network_connecting>

023fd448 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd448:	2200      	movs	r2, #0
 23fd44a:	2102      	movs	r1, #2
 23fd44c:	6840      	ldr	r0, [r0, #4]
 23fd44e:	f7ff bef5 	b.w	23fd23c <network_disconnect>

023fd452 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd452:	2300      	movs	r3, #0
 23fd454:	6840      	ldr	r0, [r0, #4]
 23fd456:	461a      	mov	r2, r3
 23fd458:	f7ff bed4 	b.w	23fd204 <network_connect>

023fd45c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd45c:	2203      	movs	r2, #3
 23fd45e:	4b02      	ldr	r3, [pc, #8]	; (23fd468 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd460:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd462:	4a02      	ldr	r2, [pc, #8]	; (23fd46c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd464:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd466:	4770      	bx	lr
 23fd468:	1007ae90 	.word	0x1007ae90
 23fd46c:	023ffde4 	.word	0x023ffde4

023fd470 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fd470:	4770      	bx	lr

023fd472 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fd472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd474:	4606      	mov	r6, r0
 23fd476:	4615      	mov	r5, r2
 23fd478:	460c      	mov	r4, r1
 23fd47a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fd47c:	42bc      	cmp	r4, r7
 23fd47e:	d006      	beq.n	23fd48e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fd480:	6833      	ldr	r3, [r6, #0]
 23fd482:	4630      	mov	r0, r6
 23fd484:	689b      	ldr	r3, [r3, #8]
 23fd486:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fd48a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fd48c:	e7f6      	b.n	23fd47c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fd48e:	4628      	mov	r0, r5
 23fd490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd492 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fd492:	2200      	movs	r2, #0
 23fd494:	7c00      	ldrb	r0, [r0, #16]
 23fd496:	f7ff bc93 	b.w	23fcdc0 <hal_i2c_write>

023fd49a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fd49a:	2100      	movs	r1, #0
 23fd49c:	7c00      	ldrb	r0, [r0, #16]
 23fd49e:	f7ff bc9d 	b.w	23fcddc <hal_i2c_available>

023fd4a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fd4a2:	2100      	movs	r1, #0
 23fd4a4:	7c00      	ldrb	r0, [r0, #16]
 23fd4a6:	f7ff bca7 	b.w	23fcdf8 <hal_i2c_read>

023fd4aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fd4aa:	2100      	movs	r1, #0
 23fd4ac:	7c00      	ldrb	r0, [r0, #16]
 23fd4ae:	f7ff bcb1 	b.w	23fce14 <hal_i2c_peek>

023fd4b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fd4b2:	2100      	movs	r1, #0
 23fd4b4:	7c00      	ldrb	r0, [r0, #16]
 23fd4b6:	f7ff bcbb 	b.w	23fce30 <hal_i2c_flush>

023fd4ba <_ZN7TwoWireD0Ev>:
 23fd4ba:	b510      	push	{r4, lr}
 23fd4bc:	4604      	mov	r4, r0
 23fd4be:	2114      	movs	r1, #20
 23fd4c0:	f7fd ff7d 	bl	23fb3be <_ZdlPvj>
 23fd4c4:	4620      	mov	r0, r4
 23fd4c6:	bd10      	pop	{r4, pc}

023fd4c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd4c8:	b538      	push	{r3, r4, r5, lr}
 23fd4ca:	4604      	mov	r4, r0
 23fd4cc:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fd4ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd4d2:	2200      	movs	r2, #0
 23fd4d4:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fd4d8:	4b09      	ldr	r3, [pc, #36]	; (23fd500 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fd4da:	4608      	mov	r0, r1
  _i2c = i2c;
 23fd4dc:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd4de:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fd4e0:	4629      	mov	r1, r5
 23fd4e2:	f7ff fcc1 	bl	23fce68 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd4e6:	30bf      	adds	r0, #191	; 0xbf
 23fd4e8:	d108      	bne.n	23fd4fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fd4ea:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd4ec:	07db      	lsls	r3, r3, #31
 23fd4ee:	d505      	bpl.n	23fd4fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fd4f0:	6868      	ldr	r0, [r5, #4]
 23fd4f2:	f7ff ff3d 	bl	23fd370 <free>
    free(conf.tx_buffer);
 23fd4f6:	68e8      	ldr	r0, [r5, #12]
 23fd4f8:	f7ff ff3a 	bl	23fd370 <free>
}
 23fd4fc:	4620      	mov	r0, r4
 23fd4fe:	bd38      	pop	{r3, r4, r5, pc}
 23fd500:	023ffe20 	.word	0x023ffe20

023fd504 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fd504:	4770      	bx	lr

023fd506 <_ZN9IPAddressD0Ev>:
 23fd506:	b510      	push	{r4, lr}
 23fd508:	4604      	mov	r4, r0
 23fd50a:	2118      	movs	r1, #24
 23fd50c:	f7fd ff57 	bl	23fb3be <_ZdlPvj>
 23fd510:	4620      	mov	r0, r4
 23fd512:	bd10      	pop	{r4, pc}

023fd514 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fd514:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fd516:	7d03      	ldrb	r3, [r0, #20]
{
 23fd518:	460e      	mov	r6, r1
	if (address.v==6) {
 23fd51a:	2b06      	cmp	r3, #6
 23fd51c:	f04f 0400 	mov.w	r4, #0
{
 23fd520:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd522:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fd526:	d012      	beq.n	23fd54e <_ZNK9IPAddress7printToER5Print+0x3a>
 23fd528:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fd52c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fd530:	220a      	movs	r2, #10
 23fd532:	4630      	mov	r0, r6
 23fd534:	f000 f95d 	bl	23fd7f2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fd538:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fd53a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fd53c:	d019      	beq.n	23fd572 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fd53e:	2c00      	cmp	r4, #0
 23fd540:	d0f4      	beq.n	23fd52c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fd542:	212e      	movs	r1, #46	; 0x2e
 23fd544:	4630      	mov	r0, r6
 23fd546:	f000 f93b 	bl	23fd7c0 <_ZN5Print5printEc>
 23fd54a:	4404      	add	r4, r0
 23fd54c:	e7ee      	b.n	23fd52c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd54e:	232f      	movs	r3, #47	; 0x2f
 23fd550:	466a      	mov	r2, sp
 23fd552:	4639      	mov	r1, r7
 23fd554:	200a      	movs	r0, #10
		buf[0] = 0;
 23fd556:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd55a:	f7ff fc93 	bl	23fce84 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fd55e:	4668      	mov	r0, sp
 23fd560:	f7fd ff06 	bl	23fb370 <strlen>
 23fd564:	6833      	ldr	r3, [r6, #0]
 23fd566:	4602      	mov	r2, r0
 23fd568:	4669      	mov	r1, sp
 23fd56a:	4630      	mov	r0, r6
 23fd56c:	68db      	ldr	r3, [r3, #12]
 23fd56e:	4798      	blx	r3
 23fd570:	4604      	mov	r4, r0
    }
    return n;
}
 23fd572:	4620      	mov	r0, r4
 23fd574:	b00d      	add	sp, #52	; 0x34
 23fd576:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd578 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fd578:	b510      	push	{r4, lr}
 23fd57a:	4604      	mov	r4, r0
 23fd57c:	4b04      	ldr	r3, [pc, #16]	; (23fd590 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fd57e:	2211      	movs	r2, #17
 23fd580:	2100      	movs	r1, #0
 23fd582:	f840 3b04 	str.w	r3, [r0], #4
 23fd586:	f000 fe66 	bl	23fe256 <memset>
}
 23fd58a:	4620      	mov	r0, r4
 23fd58c:	bd10      	pop	{r4, pc}
 23fd58e:	bf00      	nop
 23fd590:	023ffe48 	.word	0x023ffe48

023fd594 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fd594:	4603      	mov	r3, r0
 23fd596:	4a07      	ldr	r2, [pc, #28]	; (23fd5b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fd598:	b510      	push	{r4, lr}
 23fd59a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fd59e:	f101 0210 	add.w	r2, r1, #16
 23fd5a2:	f851 4b04 	ldr.w	r4, [r1], #4
 23fd5a6:	4291      	cmp	r1, r2
 23fd5a8:	f843 4b04 	str.w	r4, [r3], #4
 23fd5ac:	d1f9      	bne.n	23fd5a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fd5ae:	780a      	ldrb	r2, [r1, #0]
 23fd5b0:	701a      	strb	r2, [r3, #0]
}
 23fd5b2:	bd10      	pop	{r4, pc}
 23fd5b4:	023ffe48 	.word	0x023ffe48

023fd5b8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fd5b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fd5ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fd5be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fd5c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fd5c6:	2304      	movs	r3, #4
 23fd5c8:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fd5cc:	6041      	str	r1, [r0, #4]
 23fd5ce:	7503      	strb	r3, [r0, #20]
}
 23fd5d0:	bd10      	pop	{r4, pc}
	...

023fd5d4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fd5d4:	b507      	push	{r0, r1, r2, lr}
 23fd5d6:	4b06      	ldr	r3, [pc, #24]	; (23fd5f0 <_ZN9IPAddressC1EPKh+0x1c>)
 23fd5d8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fd5da:	78cb      	ldrb	r3, [r1, #3]
 23fd5dc:	9300      	str	r3, [sp, #0]
 23fd5de:	788b      	ldrb	r3, [r1, #2]
 23fd5e0:	784a      	ldrb	r2, [r1, #1]
 23fd5e2:	7809      	ldrb	r1, [r1, #0]
 23fd5e4:	f7ff ffe8 	bl	23fd5b8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fd5e8:	b003      	add	sp, #12
 23fd5ea:	f85d fb04 	ldr.w	pc, [sp], #4
 23fd5ee:	bf00      	nop
 23fd5f0:	023ffe48 	.word	0x023ffe48

023fd5f4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23fd5f4:	4b01      	ldr	r3, [pc, #4]	; (23fd5fc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fd5f6:	4a02      	ldr	r2, [pc, #8]	; (23fd600 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fd5f8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fd5fa:	4770      	bx	lr
 23fd5fc:	1007ae98 	.word	0x1007ae98
 23fd600:	023ffe54 	.word	0x023ffe54

023fd604 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fd604:	2300      	movs	r3, #0
 23fd606:	6840      	ldr	r0, [r0, #4]
 23fd608:	461a      	mov	r2, r3
 23fd60a:	f7ff bdfb 	b.w	23fd204 <network_connect>

023fd60e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fd60e:	2200      	movs	r2, #0
 23fd610:	2102      	movs	r1, #2
 23fd612:	6840      	ldr	r0, [r0, #4]
 23fd614:	f7ff be12 	b.w	23fd23c <network_disconnect>

023fd618 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fd618:	2200      	movs	r2, #0
 23fd61a:	6840      	ldr	r0, [r0, #4]
 23fd61c:	4611      	mov	r1, r2
 23fd61e:	f7ff bdff 	b.w	23fd220 <network_connecting>

023fd622 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fd622:	2200      	movs	r2, #0
 23fd624:	6840      	ldr	r0, [r0, #4]
 23fd626:	4611      	mov	r1, r2
 23fd628:	f7ff be16 	b.w	23fd258 <network_ready>

023fd62c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fd62c:	2300      	movs	r3, #0
 23fd62e:	6840      	ldr	r0, [r0, #4]
 23fd630:	461a      	mov	r2, r3
 23fd632:	4619      	mov	r1, r3
 23fd634:	f7ff be1e 	b.w	23fd274 <network_on>

023fd638 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fd638:	2300      	movs	r3, #0
 23fd63a:	6840      	ldr	r0, [r0, #4]
 23fd63c:	461a      	mov	r2, r3
 23fd63e:	4619      	mov	r1, r3
 23fd640:	f7ff be26 	b.w	23fd290 <network_off>

023fd644 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fd644:	2100      	movs	r1, #0
 23fd646:	6840      	ldr	r0, [r0, #4]
 23fd648:	f7ff be68 	b.w	23fd31c <network_is_on>

023fd64c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fd64c:	2100      	movs	r1, #0
 23fd64e:	6840      	ldr	r0, [r0, #4]
 23fd650:	f7ff be72 	b.w	23fd338 <network_is_off>

023fd654 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fd654:	2200      	movs	r2, #0
 23fd656:	6840      	ldr	r0, [r0, #4]
 23fd658:	f081 0101 	eor.w	r1, r1, #1
 23fd65c:	f7ff be26 	b.w	23fd2ac <network_listen>

023fd660 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fd660:	2200      	movs	r2, #0
 23fd662:	6840      	ldr	r0, [r0, #4]
 23fd664:	f7ff be3e 	b.w	23fd2e4 <network_set_listen_timeout>

023fd668 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fd668:	2200      	movs	r2, #0
 23fd66a:	6840      	ldr	r0, [r0, #4]
 23fd66c:	4611      	mov	r1, r2
 23fd66e:	f7ff be47 	b.w	23fd300 <network_get_listen_timeout>

023fd672 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fd672:	2200      	movs	r2, #0
 23fd674:	6840      	ldr	r0, [r0, #4]
 23fd676:	4611      	mov	r1, r2
 23fd678:	f7ff be26 	b.w	23fd2c8 <network_listening>

023fd67c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fd67c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd680:	b095      	sub	sp, #84	; 0x54
 23fd682:	4614      	mov	r4, r2
 23fd684:	460d      	mov	r5, r1
 23fd686:	4607      	mov	r7, r0
    IPAddress addr;
 23fd688:	f7ff ff76 	bl	23fd578 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fd68c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fd68e:	221c      	movs	r2, #28
 23fd690:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fd692:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fd694:	f000 fddf 	bl	23fe256 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fd698:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fd69a:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fd69c:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fd69e:	2100      	movs	r1, #0
 23fd6a0:	466b      	mov	r3, sp
 23fd6a2:	aa0c      	add	r2, sp, #48	; 0x30
 23fd6a4:	f7ff fc0a 	bl	23fcebc <netdb_getaddrinfo>
    if (!r) {
 23fd6a8:	4604      	mov	r4, r0
 23fd6aa:	2800      	cmp	r0, #0
 23fd6ac:	d14b      	bne.n	23fd746 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fd6ae:	4602      	mov	r2, r0
 23fd6b0:	2101      	movs	r1, #1
 23fd6b2:	6868      	ldr	r0, [r5, #4]
 23fd6b4:	f7ff fdd0 	bl	23fd258 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd6b8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fd6ba:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd6bc:	4622      	mov	r2, r4
 23fd6be:	6868      	ldr	r0, [r5, #4]
 23fd6c0:	f7ff fdca 	bl	23fd258 <network_ready>
        bool ok = false;
 23fd6c4:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fd6c6:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fd6c8:	9e00      	ldr	r6, [sp, #0]
 23fd6ca:	2e00      	cmp	r6, #0
 23fd6cc:	d03b      	beq.n	23fd746 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fd6ce:	2900      	cmp	r1, #0
 23fd6d0:	d139      	bne.n	23fd746 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fd6d2:	6873      	ldr	r3, [r6, #4]
 23fd6d4:	2b02      	cmp	r3, #2
 23fd6d6:	d003      	beq.n	23fd6e0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fd6d8:	2b0a      	cmp	r3, #10
 23fd6da:	d011      	beq.n	23fd700 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fd6dc:	69f6      	ldr	r6, [r6, #28]
 23fd6de:	e7f4      	b.n	23fd6ca <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fd6e0:	f1b8 0f00 	cmp.w	r8, #0
 23fd6e4:	d0fa      	beq.n	23fd6dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fd6e6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fd6e8:	a806      	add	r0, sp, #24
 23fd6ea:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fd6ec:	1d3c      	adds	r4, r7, #4
 23fd6ee:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fd6f0:	f7ff ff70 	bl	23fd5d4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fd6f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fd6f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fd6f8:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fd6fa:	4641      	mov	r1, r8
 23fd6fc:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fd6fe:	e7ed      	b.n	23fd6dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fd700:	f1b9 0f00 	cmp.w	r9, #0
 23fd704:	d0ea      	beq.n	23fd6dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fd706:	2210      	movs	r2, #16
 23fd708:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fd70a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fd70c:	f000 fda3 	bl	23fe256 <memset>
                    a.v = 6;
 23fd710:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fd712:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fd714:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fd718:	f104 0308 	add.w	r3, r4, #8
 23fd71c:	3418      	adds	r4, #24
 23fd71e:	462a      	mov	r2, r5
 23fd720:	6818      	ldr	r0, [r3, #0]
 23fd722:	6859      	ldr	r1, [r3, #4]
 23fd724:	3308      	adds	r3, #8
 23fd726:	c203      	stmia	r2!, {r0, r1}
 23fd728:	42a3      	cmp	r3, r4
 23fd72a:	4615      	mov	r5, r2
 23fd72c:	d1f7      	bne.n	23fd71e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fd72e:	a901      	add	r1, sp, #4
 23fd730:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fd732:	1d3c      	adds	r4, r7, #4
 23fd734:	ad07      	add	r5, sp, #28
 23fd736:	f7ff ff2d 	bl	23fd594 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fd73a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fd73c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fd73e:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fd740:	4649      	mov	r1, r9
 23fd742:	7023      	strb	r3, [r4, #0]
                    break;
 23fd744:	e7ca      	b.n	23fd6dc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fd746:	9800      	ldr	r0, [sp, #0]
 23fd748:	f7ff fbaa 	bl	23fcea0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fd74c:	4638      	mov	r0, r7
 23fd74e:	b015      	add	sp, #84	; 0x54
 23fd750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fd754 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fd754:	4b02      	ldr	r3, [pc, #8]	; (23fd760 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fd756:	4a03      	ldr	r2, [pc, #12]	; (23fd764 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fd758:	601a      	str	r2, [r3, #0]
 23fd75a:	2200      	movs	r2, #0
 23fd75c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fd75e:	4770      	bx	lr
 23fd760:	1007ae9c 	.word	0x1007ae9c
 23fd764:	023ffe60 	.word	0x023ffe60

023fd768 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fd768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd76a:	4606      	mov	r6, r0
 23fd76c:	460d      	mov	r5, r1
  size_t n = 0;
 23fd76e:	2400      	movs	r4, #0
 23fd770:	188f      	adds	r7, r1, r2
  while (size--) {
 23fd772:	42bd      	cmp	r5, r7
 23fd774:	d00c      	beq.n	23fd790 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fd776:	6833      	ldr	r3, [r6, #0]
 23fd778:	4630      	mov	r0, r6
 23fd77a:	689b      	ldr	r3, [r3, #8]
 23fd77c:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fd780:	4798      	blx	r3
     if (chunk>=0)
 23fd782:	1e03      	subs	r3, r0, #0
 23fd784:	db01      	blt.n	23fd78a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fd786:	441c      	add	r4, r3
  while (size--) {
 23fd788:	e7f3      	b.n	23fd772 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fd78a:	2c00      	cmp	r4, #0
 23fd78c:	bf08      	it	eq
 23fd78e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fd790:	4620      	mov	r0, r4
 23fd792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd794 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fd794:	b513      	push	{r0, r1, r4, lr}
 23fd796:	4604      	mov	r4, r0
    }
 23fd798:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fd79a:	b159      	cbz	r1, 23fd7b4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fd79c:	9101      	str	r1, [sp, #4]
 23fd79e:	f7fd fde7 	bl	23fb370 <strlen>
 23fd7a2:	4602      	mov	r2, r0
 23fd7a4:	4620      	mov	r0, r4
 23fd7a6:	6823      	ldr	r3, [r4, #0]
 23fd7a8:	9901      	ldr	r1, [sp, #4]
 23fd7aa:	68db      	ldr	r3, [r3, #12]
    }
 23fd7ac:	b002      	add	sp, #8
 23fd7ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fd7b2:	4718      	bx	r3
    }
 23fd7b4:	b002      	add	sp, #8
 23fd7b6:	bd10      	pop	{r4, pc}

023fd7b8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23fd7b8:	b508      	push	{r3, lr}
  return write(str);
 23fd7ba:	f7ff ffeb 	bl	23fd794 <_ZN5Print5writeEPKc>
}
 23fd7be:	bd08      	pop	{r3, pc}

023fd7c0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23fd7c0:	6803      	ldr	r3, [r0, #0]
 23fd7c2:	689b      	ldr	r3, [r3, #8]
 23fd7c4:	4718      	bx	r3

023fd7c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fd7c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fd7c8:	210d      	movs	r1, #13
{
 23fd7ca:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fd7cc:	f7ff fff8 	bl	23fd7c0 <_ZN5Print5printEc>
  n += print('\n');
 23fd7d0:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fd7d2:	4604      	mov	r4, r0
  n += print('\n');
 23fd7d4:	4628      	mov	r0, r5
 23fd7d6:	f7ff fff3 	bl	23fd7c0 <_ZN5Print5printEc>
  return n;
}
 23fd7da:	4420      	add	r0, r4
 23fd7dc:	bd38      	pop	{r3, r4, r5, pc}

023fd7de <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23fd7de:	b538      	push	{r3, r4, r5, lr}
 23fd7e0:	4605      	mov	r5, r0
  return write(str);
 23fd7e2:	f7ff ffd7 	bl	23fd794 <_ZN5Print5writeEPKc>
 23fd7e6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23fd7e8:	4628      	mov	r0, r5
 23fd7ea:	f7ff ffec 	bl	23fd7c6 <_ZN5Print7printlnEv>
  return n;
}
 23fd7ee:	4420      	add	r0, r4
 23fd7f0:	bd38      	pop	{r3, r4, r5, pc}

023fd7f2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fd7f2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fd7f4:	2a01      	cmp	r2, #1
 23fd7f6:	bf98      	it	ls
 23fd7f8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fd7fa:	b530      	push	{r4, r5, lr}
 23fd7fc:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fd7fe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fd802:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fd804:	460d      	mov	r5, r1
 23fd806:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fd80a:	fb01 5312 	mls	r3, r1, r2, r5
 23fd80e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd812:	2b09      	cmp	r3, #9
 23fd814:	bf94      	ite	ls
 23fd816:	3330      	addls	r3, #48	; 0x30
 23fd818:	3337      	addhi	r3, #55	; 0x37
 23fd81a:	b2db      	uxtb	r3, r3
  } while(n);
 23fd81c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd81e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fd822:	d9ef      	bls.n	23fd804 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fd824:	4621      	mov	r1, r4
 23fd826:	f7ff ffb5 	bl	23fd794 <_ZN5Print5writeEPKc>
}
 23fd82a:	b00b      	add	sp, #44	; 0x2c
 23fd82c:	bd30      	pop	{r4, r5, pc}
	...

023fd830 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 23fd830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd834:	ec55 4b10 	vmov	r4, r5, d0
 23fd838:	4606      	mov	r6, r0
 23fd83a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
 23fd83c:	ee10 2a10 	vmov	r2, s0
 23fd840:	462b      	mov	r3, r5
 23fd842:	ee10 0a10 	vmov	r0, s0
 23fd846:	4629      	mov	r1, r5
 23fd848:	f7fd fce4 	bl	23fb214 <__aeabi_dcmpun>
 23fd84c:	b140      	cbz	r0, 23fd860 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
 23fd84e:	4953      	ldr	r1, [pc, #332]	; (23fd99c <_ZN5Print10printFloatEdh+0x16c>)
 23fd850:	4630      	mov	r0, r6
 23fd852:	f7ff ff9f 	bl	23fd794 <_ZN5Print5writeEPKc>
 23fd856:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 23fd858:	4650      	mov	r0, sl
 23fd85a:	b003      	add	sp, #12
 23fd85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 23fd860:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 23fd864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fd868:	4620      	mov	r0, r4
 23fd86a:	4649      	mov	r1, r9
 23fd86c:	4b4c      	ldr	r3, [pc, #304]	; (23fd9a0 <_ZN5Print10printFloatEdh+0x170>)
 23fd86e:	f7fd fcd1 	bl	23fb214 <__aeabi_dcmpun>
 23fd872:	b948      	cbnz	r0, 23fd888 <_ZN5Print10printFloatEdh+0x58>
 23fd874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fd878:	4620      	mov	r0, r4
 23fd87a:	4649      	mov	r1, r9
 23fd87c:	4b48      	ldr	r3, [pc, #288]	; (23fd9a0 <_ZN5Print10printFloatEdh+0x170>)
 23fd87e:	f7fd fcab 	bl	23fb1d8 <__aeabi_dcmple>
 23fd882:	b908      	cbnz	r0, 23fd888 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
 23fd884:	4947      	ldr	r1, [pc, #284]	; (23fd9a4 <_ZN5Print10printFloatEdh+0x174>)
 23fd886:	e7e3      	b.n	23fd850 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 23fd888:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23fd88c:	4620      	mov	r0, r4
 23fd88e:	4629      	mov	r1, r5
 23fd890:	4b45      	ldr	r3, [pc, #276]	; (23fd9a8 <_ZN5Print10printFloatEdh+0x178>)
 23fd892:	f7fd fcb5 	bl	23fb200 <__aeabi_dcmpgt>
 23fd896:	b108      	cbz	r0, 23fd89c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
 23fd898:	4944      	ldr	r1, [pc, #272]	; (23fd9ac <_ZN5Print10printFloatEdh+0x17c>)
 23fd89a:	e7d9      	b.n	23fd850 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 23fd89c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23fd8a0:	4620      	mov	r0, r4
 23fd8a2:	4629      	mov	r1, r5
 23fd8a4:	4b42      	ldr	r3, [pc, #264]	; (23fd9b0 <_ZN5Print10printFloatEdh+0x180>)
 23fd8a6:	f7fd fc8d 	bl	23fb1c4 <__aeabi_dcmplt>
 23fd8aa:	2800      	cmp	r0, #0
 23fd8ac:	d1f4      	bne.n	23fd898 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
 23fd8ae:	2200      	movs	r2, #0
 23fd8b0:	2300      	movs	r3, #0
 23fd8b2:	4620      	mov	r0, r4
 23fd8b4:	4629      	mov	r1, r5
 23fd8b6:	f7fd fc85 	bl	23fb1c4 <__aeabi_dcmplt>
 23fd8ba:	b1d0      	cbz	r0, 23fd8f2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
 23fd8bc:	212d      	movs	r1, #45	; 0x2d
 23fd8be:	4630      	mov	r0, r6
 23fd8c0:	f7ff ff7e 	bl	23fd7c0 <_ZN5Print5printEc>
     number = -number;
 23fd8c4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
 23fd8c8:	4682      	mov	sl, r0
     number = -number;
 23fd8ca:	461d      	mov	r5, r3
  size_t n = 0;
 23fd8cc:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 23fd8d0:	2000      	movs	r0, #0
    rounding /= 10.0;
 23fd8d2:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 23fd8d6:	4937      	ldr	r1, [pc, #220]	; (23fd9b4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
 23fd8d8:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 23fd9bc <_ZN5Print10printFloatEdh+0x18c>
  for (uint8_t i=0; i<digits; ++i)
 23fd8dc:	fa5f f38b 	uxtb.w	r3, fp
 23fd8e0:	429f      	cmp	r7, r3
 23fd8e2:	d908      	bls.n	23fd8f6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
 23fd8e4:	4642      	mov	r2, r8
 23fd8e6:	464b      	mov	r3, r9
 23fd8e8:	f7fd fb24 	bl	23faf34 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 23fd8ec:	f10b 0b01 	add.w	fp, fp, #1
 23fd8f0:	e7f4      	b.n	23fd8dc <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
 23fd8f2:	4682      	mov	sl, r0
 23fd8f4:	e7ea      	b.n	23fd8cc <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
 23fd8f6:	4622      	mov	r2, r4
 23fd8f8:	462b      	mov	r3, r5
 23fd8fa:	f7fd f83b 	bl	23fa974 <__adddf3>
 23fd8fe:	460d      	mov	r5, r1
 23fd900:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
 23fd902:	f7fd fcc5 	bl	23fb290 <__aeabi_d2uiz>
 23fd906:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
 23fd908:	f7fd f970 	bl	23fabec <__aeabi_ui2d>
 23fd90c:	4602      	mov	r2, r0
 23fd90e:	460b      	mov	r3, r1
 23fd910:	4620      	mov	r0, r4
 23fd912:	4629      	mov	r1, r5
 23fd914:	f7fd f82c 	bl	23fa970 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23fd918:	220a      	movs	r2, #10
 23fd91a:	4604      	mov	r4, r0
 23fd91c:	460d      	mov	r5, r1
 23fd91e:	4630      	mov	r0, r6
 23fd920:	4641      	mov	r1, r8
 23fd922:	f7ff ff66 	bl	23fd7f2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 23fd926:	4482      	add	sl, r0
  if (digits > 0) {
 23fd928:	2f00      	cmp	r7, #0
 23fd92a:	d095      	beq.n	23fd858 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
 23fd92c:	4630      	mov	r0, r6
 23fd92e:	4922      	ldr	r1, [pc, #136]	; (23fd9b8 <_ZN5Print10printFloatEdh+0x188>)
 23fd930:	f7ff ff30 	bl	23fd794 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 23fd934:	f04f 0800 	mov.w	r8, #0
 23fd938:	f8df 9080 	ldr.w	r9, [pc, #128]	; 23fd9bc <_ZN5Print10printFloatEdh+0x18c>
    n += print(".");
 23fd93c:	4482      	add	sl, r0
  while (digits-- > 0)
 23fd93e:	2f00      	cmp	r7, #0
 23fd940:	d08a      	beq.n	23fd858 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
 23fd942:	4642      	mov	r2, r8
 23fd944:	464b      	mov	r3, r9
 23fd946:	4620      	mov	r0, r4
 23fd948:	4629      	mov	r1, r5
 23fd94a:	f7fd f9c9 	bl	23face0 <__aeabi_dmul>
 23fd94e:	4604      	mov	r4, r0
 23fd950:	460d      	mov	r5, r1
    int toPrint = int(remainder);
 23fd952:	f7fd fc75 	bl	23fb240 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 23fd956:	f1b0 0b00 	subs.w	fp, r0, #0
 23fd95a:	da1c      	bge.n	23fd996 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
 23fd95c:	212d      	movs	r1, #45	; 0x2d
 23fd95e:	4630      	mov	r0, r6
 23fd960:	f7ff ff2e 	bl	23fd7c0 <_ZN5Print5printEc>
 23fd964:	4603      	mov	r3, r0
            val = -n;
 23fd966:	f1cb 0100 	rsb	r1, fp, #0
        return printNumber(val, base) + t;
 23fd96a:	220a      	movs	r2, #10
 23fd96c:	4630      	mov	r0, r6
 23fd96e:	9301      	str	r3, [sp, #4]
 23fd970:	f7ff ff3f 	bl	23fd7f2 <_ZN5Print11printNumberEmh>
 23fd974:	9b01      	ldr	r3, [sp, #4]
 23fd976:	3f01      	subs	r7, #1
 23fd978:	4418      	add	r0, r3
    n += print(toPrint);
 23fd97a:	4482      	add	sl, r0
    remainder -= toPrint;
 23fd97c:	4658      	mov	r0, fp
 23fd97e:	f7fd f945 	bl	23fac0c <__aeabi_i2d>
 23fd982:	4602      	mov	r2, r0
 23fd984:	460b      	mov	r3, r1
 23fd986:	4620      	mov	r0, r4
 23fd988:	4629      	mov	r1, r5
 23fd98a:	f7fc fff1 	bl	23fa970 <__aeabi_dsub>
 23fd98e:	b2ff      	uxtb	r7, r7
 23fd990:	4604      	mov	r4, r0
 23fd992:	460d      	mov	r5, r1
  while (digits-- > 0)
 23fd994:	e7d3      	b.n	23fd93e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
 23fd996:	4659      	mov	r1, fp
        size_t t = 0;
 23fd998:	2300      	movs	r3, #0
 23fd99a:	e7e6      	b.n	23fd96a <_ZN5Print10printFloatEdh+0x13a>
 23fd99c:	023ffe94 	.word	0x023ffe94
 23fd9a0:	7fefffff 	.word	0x7fefffff
 23fd9a4:	023ffe98 	.word	0x023ffe98
 23fd9a8:	41efffff 	.word	0x41efffff
 23fd9ac:	023ffe9c 	.word	0x023ffe9c
 23fd9b0:	c1efffff 	.word	0xc1efffff
 23fd9b4:	3fe00000 	.word	0x3fe00000
 23fd9b8:	023ffea0 	.word	0x023ffea0
 23fd9bc:	40240000 	.word	0x40240000

023fd9c0 <_ZN5Print5printEfi>:
{
 23fd9c0:	b538      	push	{r3, r4, r5, lr}
 23fd9c2:	4604      	mov	r4, r0
 23fd9c4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
 23fd9c8:	b2cd      	uxtb	r5, r1
 23fd9ca:	f7fd f931 	bl	23fac30 <__aeabi_f2d>
 23fd9ce:	ec41 0b10 	vmov	d0, r0, r1
 23fd9d2:	4629      	mov	r1, r5
 23fd9d4:	4620      	mov	r0, r4
}
 23fd9d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
 23fd9da:	f7ff bf29 	b.w	23fd830 <_ZN5Print10printFloatEdh>

023fd9de <_ZN5Print7printlnEdi>:
{
 23fd9de:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
 23fd9e0:	b2c9      	uxtb	r1, r1
{
 23fd9e2:	4605      	mov	r5, r0
  return printFloat(n, digits);
 23fd9e4:	f7ff ff24 	bl	23fd830 <_ZN5Print10printFloatEdh>
 23fd9e8:	4604      	mov	r4, r0
  n += println();
 23fd9ea:	4628      	mov	r0, r5
 23fd9ec:	f7ff feeb 	bl	23fd7c6 <_ZN5Print7printlnEv>
}
 23fd9f0:	4420      	add	r0, r4
 23fd9f2:	bd38      	pop	{r3, r4, r5, pc}

023fd9f4 <_ZN5Print7printlnEfi>:
{
 23fd9f4:	b538      	push	{r3, r4, r5, lr}
 23fd9f6:	4604      	mov	r4, r0
 23fd9f8:	ee10 0a10 	vmov	r0, s0
 23fd9fc:	460d      	mov	r5, r1
    return println((double)num, digits);
 23fd9fe:	f7fd f917 	bl	23fac30 <__aeabi_f2d>
 23fda02:	ec41 0b10 	vmov	d0, r0, r1
 23fda06:	4629      	mov	r1, r5
 23fda08:	4620      	mov	r0, r4
}
 23fda0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
 23fda0e:	f7ff bfe6 	b.w	23fd9de <_ZN5Print7printlnEdi>
	...

023fda14 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fda14:	2200      	movs	r2, #0
 23fda16:	4b01      	ldr	r3, [pc, #4]	; (23fda1c <_GLOBAL__sub_I_RGB+0x8>)
 23fda18:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fda1a:	4770      	bx	lr
 23fda1c:	1007aea4 	.word	0x1007aea4

023fda20 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fda20:	2100      	movs	r1, #0
 23fda22:	f7ff babb 	b.w	23fcf9c <hal_spi_release>

023fda26 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fda26:	2100      	movs	r1, #0
 23fda28:	f7ff baaa 	b.w	23fcf80 <hal_spi_acquire>

023fda2c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fda2c:	b510      	push	{r4, lr}
 23fda2e:	4604      	mov	r4, r0
 23fda30:	4608      	mov	r0, r1
{
    _spi = spi;
 23fda32:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fda34:	f7ff fa6c 	bl	23fcf10 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fda38:	2300      	movs	r3, #0
}
 23fda3a:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fda3c:	6063      	str	r3, [r4, #4]
}
 23fda3e:	bd10      	pop	{r4, pc}

023fda40 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fda40:	b513      	push	{r0, r1, r4, lr}
 23fda42:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fda44:	7800      	ldrb	r0, [r0, #0]
 23fda46:	f7ff ffee 	bl	23fda26 <_ZN8SPIClass4lockEv.isra.0>
 23fda4a:	b958      	cbnz	r0, 23fda64 <_ZN8SPIClass5beginEv+0x24>
 23fda4c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fda4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fda52:	9001      	str	r0, [sp, #4]
 23fda54:	f7ff fa40 	bl	23fced8 <hal_spi_begin>
        unlock();
 23fda58:	9801      	ldr	r0, [sp, #4]
    }
}
 23fda5a:	b002      	add	sp, #8
 23fda5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fda60:	f7ff bfde 	b.w	23fda20 <_ZN8SPIClass6unlockEv.isra.0>
 23fda64:	b002      	add	sp, #8
 23fda66:	bd10      	pop	{r4, pc}

023fda68 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23fda68:	7800      	ldrb	r0, [r0, #0]
 23fda6a:	f7ff bfd9 	b.w	23fda20 <_ZN8SPIClass6unlockEv.isra.0>
	...

023fda70 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fda70:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fda72:	2400      	movs	r4, #0
 23fda74:	0840      	lsrs	r0, r0, #1
 23fda76:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fda78:	6818      	ldr	r0, [r3, #0]
 23fda7a:	b2e5      	uxtb	r5, r4
 23fda7c:	4288      	cmp	r0, r1
 23fda7e:	d906      	bls.n	23fda8e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fda80:	3401      	adds	r4, #1
 23fda82:	2c08      	cmp	r4, #8
 23fda84:	d002      	beq.n	23fda8c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fda86:	0840      	lsrs	r0, r0, #1
 23fda88:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fda8a:	e7f5      	b.n	23fda78 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fda8c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fda8e:	4b02      	ldr	r3, [pc, #8]	; (23fda98 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fda90:	5d5b      	ldrb	r3, [r3, r5]
 23fda92:	7013      	strb	r3, [r2, #0]
}
 23fda94:	bd30      	pop	{r4, r5, pc}
 23fda96:	bf00      	nop
 23fda98:	023ffea2 	.word	0x023ffea2

023fda9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23fda9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fdaa0:	4606      	mov	r6, r0
 23fdaa2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23fdaa4:	7800      	ldrb	r0, [r0, #0]
{
 23fdaa6:	460c      	mov	r4, r1
    CHECK(lock());
 23fdaa8:	f7ff ffbd 	bl	23fda26 <_ZN8SPIClass4lockEv.isra.0>
 23fdaac:	2800      	cmp	r0, #0
 23fdaae:	db1b      	blt.n	23fdae8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fdab0:	2214      	movs	r2, #20
 23fdab2:	2100      	movs	r1, #0
 23fdab4:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23fdab6:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fdab8:	f000 fbcd 	bl	23fe256 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fdabc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fdabe:	2200      	movs	r2, #0
 23fdac0:	4628      	mov	r0, r5
 23fdac2:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23fdac4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23fdac8:	f7ff fa3e 	bl	23fcf48 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23fdacc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23fdad0:	b113      	cbz	r3, 23fdad8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23fdad2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23fdad6:	b155      	cbz	r5, 23fdaee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23fdad8:	2700      	movs	r7, #0
 23fdada:	2501      	movs	r5, #1
 23fdadc:	46b9      	mov	r9, r7
 23fdade:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23fdae0:	7923      	ldrb	r3, [r4, #4]
 23fdae2:	b15d      	cbz	r5, 23fdafc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23fdae4:	b1c3      	cbz	r3, 23fdb18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23fdae6:	2000      	movs	r0, #0
}
 23fdae8:	b00f      	add	sp, #60	; 0x3c
 23fdaea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23fdaee:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23fdaf2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23fdaf6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23fdafa:	e7f1      	b.n	23fdae0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23fdafc:	2b00      	cmp	r3, #0
 23fdafe:	d135      	bne.n	23fdb6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23fdb00:	68a3      	ldr	r3, [r4, #8]
 23fdb02:	4543      	cmp	r3, r8
 23fdb04:	d108      	bne.n	23fdb18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23fdb06:	f88d 9020 	strb.w	r9, [sp, #32]
 23fdb0a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fdb0e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fdb12:	89a3      	ldrh	r3, [r4, #12]
 23fdb14:	429a      	cmp	r2, r3
 23fdb16:	d0e6      	beq.n	23fdae6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23fdb18:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fdb1a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23fdb1c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fdb20:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fdb22:	ab04      	add	r3, sp, #16
 23fdb24:	f10d 020f 	add.w	r2, sp, #15
 23fdb28:	f7ff ffa2 	bl	23fda70 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23fdb2c:	7921      	ldrb	r1, [r4, #4]
 23fdb2e:	b985      	cbnz	r5, 23fdb52 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23fdb30:	b989      	cbnz	r1, 23fdb56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fdb32:	68a3      	ldr	r3, [r4, #8]
 23fdb34:	4543      	cmp	r3, r8
 23fdb36:	d30e      	bcc.n	23fdb56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23fdb38:	f88d 9020 	strb.w	r9, [sp, #32]
 23fdb3c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fdb40:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fdb44:	89a3      	ldrh	r3, [r4, #12]
 23fdb46:	429a      	cmp	r2, r3
 23fdb48:	d105      	bne.n	23fdb56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23fdb4a:	9b04      	ldr	r3, [sp, #16]
 23fdb4c:	4543      	cmp	r3, r8
 23fdb4e:	d102      	bne.n	23fdb56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fdb50:	e7c9      	b.n	23fdae6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23fdb52:	2900      	cmp	r1, #0
 23fdb54:	d1f9      	bne.n	23fdb4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23fdb56:	2300      	movs	r3, #0
 23fdb58:	9301      	str	r3, [sp, #4]
 23fdb5a:	7b63      	ldrb	r3, [r4, #13]
 23fdb5c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23fdb60:	9300      	str	r3, [sp, #0]
 23fdb62:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23fdb64:	7830      	ldrb	r0, [r6, #0]
 23fdb66:	f7ff f9fd 	bl	23fcf64 <hal_spi_set_settings>
 23fdb6a:	e7bc      	b.n	23fdae6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23fdb6c:	462b      	mov	r3, r5
 23fdb6e:	462a      	mov	r2, r5
 23fdb70:	2101      	movs	r1, #1
 23fdb72:	e9cd 5500 	strd	r5, r5, [sp]
 23fdb76:	e7f5      	b.n	23fdb64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023fdb78 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23fdb78:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fdb7a:	7800      	ldrb	r0, [r0, #0]
 23fdb7c:	f7ff f9ba 	bl	23fcef4 <hal_spi_transfer>
}
 23fdb80:	b2c0      	uxtb	r0, r0
 23fdb82:	bd08      	pop	{r3, pc}

023fdb84 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fdb84:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fdb86:	2000      	movs	r0, #0
 23fdb88:	4b04      	ldr	r3, [pc, #16]	; (23fdb9c <_GLOBAL__sub_I_System+0x18>)
 23fdb8a:	601a      	str	r2, [r3, #0]
 23fdb8c:	4b04      	ldr	r3, [pc, #16]	; (23fdba0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fdb8e:	4a05      	ldr	r2, [pc, #20]	; (23fdba4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fdb90:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fdb94:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fdb96:	f7ff baef 	b.w	23fd178 <set_system_mode>
 23fdb9a:	bf00      	nop
 23fdb9c:	1007aec0 	.word	0x1007aec0
 23fdba0:	1007aeb4 	.word	0x1007aeb4
 23fdba4:	ffff0000 	.word	0xffff0000

023fdba8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fdba8:	4b02      	ldr	r3, [pc, #8]	; (23fdbb4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fdbaa:	681a      	ldr	r2, [r3, #0]
 23fdbac:	4b02      	ldr	r3, [pc, #8]	; (23fdbb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fdbae:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fdbb0:	4770      	bx	lr
 23fdbb2:	bf00      	nop
 23fdbb4:	1007aca0 	.word	0x1007aca0
 23fdbb8:	1007aec4 	.word	0x1007aec4

023fdbbc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fdbbc:	4770      	bx	lr

023fdbbe <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fdbbe:	7441      	strb	r1, [r0, #17]
}
 23fdbc0:	4770      	bx	lr

023fdbc2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fdbc2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fdbc4:	7c00      	ldrb	r0, [r0, #16]
 23fdbc6:	f7ff fa4b 	bl	23fd060 <hal_usart_available_data_for_write>
}
 23fdbca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdbce:	bd08      	pop	{r3, pc}

023fdbd0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fdbd0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fdbd2:	7c00      	ldrb	r0, [r0, #16]
 23fdbd4:	f7ff f9fe 	bl	23fcfd4 <hal_usart_available>
}
 23fdbd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdbdc:	bd08      	pop	{r3, pc}

023fdbde <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fdbde:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fdbe0:	7c00      	ldrb	r0, [r0, #16]
 23fdbe2:	f7ff fa13 	bl	23fd00c <hal_usart_peek>
}
 23fdbe6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdbea:	bd08      	pop	{r3, pc}

023fdbec <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fdbec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fdbee:	7c00      	ldrb	r0, [r0, #16]
 23fdbf0:	f7ff f9fe 	bl	23fcff0 <hal_usart_read>
}
 23fdbf4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdbf8:	bd08      	pop	{r3, pc}

023fdbfa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fdbfa:	7c00      	ldrb	r0, [r0, #16]
 23fdbfc:	f7ff ba14 	b.w	23fd028 <hal_usart_flush>

023fdc00 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fdc00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fdc02:	7c45      	ldrb	r5, [r0, #17]
{
 23fdc04:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fdc06:	b12d      	cbz	r5, 23fdc14 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fdc08:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fdc0a:	b003      	add	sp, #12
 23fdc0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fdc10:	f7ff b9d2 	b.w	23fcfb8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fdc14:	7c00      	ldrb	r0, [r0, #16]
 23fdc16:	9101      	str	r1, [sp, #4]
 23fdc18:	f7ff fa22 	bl	23fd060 <hal_usart_available_data_for_write>
 23fdc1c:	2800      	cmp	r0, #0
 23fdc1e:	9901      	ldr	r1, [sp, #4]
 23fdc20:	dcf2      	bgt.n	23fdc08 <_ZN11USARTSerial5writeEh+0x8>
}
 23fdc22:	4628      	mov	r0, r5
 23fdc24:	b003      	add	sp, #12
 23fdc26:	bd30      	pop	{r4, r5, pc}

023fdc28 <_ZN11USARTSerialD0Ev>:
 23fdc28:	b510      	push	{r4, lr}
 23fdc2a:	4604      	mov	r4, r0
 23fdc2c:	2114      	movs	r1, #20
 23fdc2e:	f7fd fbc6 	bl	23fb3be <_ZdlPvj>
 23fdc32:	4620      	mov	r0, r4
 23fdc34:	bd10      	pop	{r4, pc}
	...

023fdc38 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fdc38:	b510      	push	{r4, lr}
 23fdc3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fdc3e:	4604      	mov	r4, r0
 23fdc40:	4608      	mov	r0, r1
 23fdc42:	4611      	mov	r1, r2
 23fdc44:	2200      	movs	r2, #0
 23fdc46:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fdc4a:	4b04      	ldr	r3, [pc, #16]	; (23fdc5c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fdc4c:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fdc4e:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fdc50:	2301      	movs	r3, #1
 23fdc52:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fdc54:	f7ff fa12 	bl	23fd07c <hal_usart_init_ex>
}
 23fdc58:	4620      	mov	r0, r4
 23fdc5a:	bd10      	pop	{r4, pc}
 23fdc5c:	023ffed0 	.word	0x023ffed0

023fdc60 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fdc60:	7c00      	ldrb	r0, [r0, #16]
 23fdc62:	f7ff b9ef 	b.w	23fd044 <hal_usart_is_enabled>

023fdc66 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fdc66:	7441      	strb	r1, [r0, #17]
}
 23fdc68:	4770      	bx	lr

023fdc6a <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fdc6a:	4770      	bx	lr

023fdc6c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fdc6c:	4770      	bx	lr

023fdc6e <_ZN9USBSerial4readEv>:
{
 23fdc6e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fdc70:	2100      	movs	r1, #0
 23fdc72:	7c00      	ldrb	r0, [r0, #16]
 23fdc74:	f7ff fa48 	bl	23fd108 <HAL_USB_USART_Receive_Data>
}
 23fdc78:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdc7c:	bd08      	pop	{r3, pc}

023fdc7e <_ZN9USBSerial4peekEv>:
{
 23fdc7e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fdc80:	2101      	movs	r1, #1
 23fdc82:	7c00      	ldrb	r0, [r0, #16]
 23fdc84:	f7ff fa40 	bl	23fd108 <HAL_USB_USART_Receive_Data>
}
 23fdc88:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdc8c:	bd08      	pop	{r3, pc}

023fdc8e <_ZN9USBSerial17availableForWriteEv>:
{
 23fdc8e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fdc90:	7c00      	ldrb	r0, [r0, #16]
 23fdc92:	f7ff fa2b 	bl	23fd0ec <HAL_USB_USART_Available_Data_For_Write>
}
 23fdc96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdc9a:	bd08      	pop	{r3, pc}

023fdc9c <_ZN9USBSerial9availableEv>:
{
 23fdc9c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fdc9e:	7c00      	ldrb	r0, [r0, #16]
 23fdca0:	f7ff fa16 	bl	23fd0d0 <HAL_USB_USART_Available_Data>
}
 23fdca4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdca8:	bd08      	pop	{r3, pc}

023fdcaa <_ZN9USBSerial5writeEh>:
{
 23fdcaa:	b513      	push	{r0, r1, r4, lr}
 23fdcac:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fdcae:	7c00      	ldrb	r0, [r0, #16]
{
 23fdcb0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fdcb2:	f7ff fa1b 	bl	23fd0ec <HAL_USB_USART_Available_Data_For_Write>
 23fdcb6:	2800      	cmp	r0, #0
 23fdcb8:	9901      	ldr	r1, [sp, #4]
 23fdcba:	dc01      	bgt.n	23fdcc0 <_ZN9USBSerial5writeEh+0x16>
 23fdcbc:	7c60      	ldrb	r0, [r4, #17]
 23fdcbe:	b120      	cbz	r0, 23fdcca <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fdcc0:	7c20      	ldrb	r0, [r4, #16]
 23fdcc2:	f7ff fa2f 	bl	23fd124 <HAL_USB_USART_Send_Data>
 23fdcc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fdcca:	b002      	add	sp, #8
 23fdccc:	bd10      	pop	{r4, pc}

023fdcce <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fdcce:	7c00      	ldrb	r0, [r0, #16]
 23fdcd0:	f7ff ba36 	b.w	23fd140 <HAL_USB_USART_Flush_Data>

023fdcd4 <_ZN9USBSerialD0Ev>:
 23fdcd4:	b510      	push	{r4, lr}
 23fdcd6:	4604      	mov	r4, r0
 23fdcd8:	2114      	movs	r1, #20
 23fdcda:	f7fd fb70 	bl	23fb3be <_ZdlPvj>
 23fdcde:	4620      	mov	r0, r4
 23fdce0:	bd10      	pop	{r4, pc}
	...

023fdce4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fdce4:	b510      	push	{r4, lr}
 23fdce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fdcea:	4604      	mov	r4, r0
 23fdcec:	4608      	mov	r0, r1
 23fdcee:	2100      	movs	r1, #0
 23fdcf0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fdcf4:	4b04      	ldr	r3, [pc, #16]	; (23fdd08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fdcf6:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fdcf8:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fdcfa:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fdcfc:	4611      	mov	r1, r2
  _blocking = true;
 23fdcfe:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fdd00:	f7ff f9ca 	bl	23fd098 <HAL_USB_USART_Init>
}
 23fdd04:	4620      	mov	r0, r4
 23fdd06:	bd10      	pop	{r4, pc}
 23fdd08:	023fff00 	.word	0x023fff00

023fdd0c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fdd0c:	2200      	movs	r2, #0
 23fdd0e:	7c00      	ldrb	r0, [r0, #16]
 23fdd10:	f7ff b9d0 	b.w	23fd0b4 <HAL_USB_USART_Begin>

023fdd14 <_Z19acquireSerialBufferv>:
{
 23fdd14:	b510      	push	{r4, lr}
 23fdd16:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fdd18:	2214      	movs	r2, #20
 23fdd1a:	2100      	movs	r1, #0
 23fdd1c:	f000 fa9b 	bl	23fe256 <memset>
}
 23fdd20:	4620      	mov	r0, r4
 23fdd22:	bd10      	pop	{r4, pc}

023fdd24 <_Z16_fetch_usbserialv>:
{
 23fdd24:	b510      	push	{r4, lr}
 23fdd26:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fdd28:	a803      	add	r0, sp, #12
 23fdd2a:	f7ff fff3 	bl	23fdd14 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fdd2e:	4c0c      	ldr	r4, [pc, #48]	; (23fdd60 <_Z16_fetch_usbserialv+0x3c>)
 23fdd30:	e8d4 1f8f 	ldab	r1, [r4]
 23fdd34:	f011 0101 	ands.w	r1, r1, #1
 23fdd38:	d10f      	bne.n	23fdd5a <_Z16_fetch_usbserialv+0x36>
 23fdd3a:	4620      	mov	r0, r4
 23fdd3c:	9101      	str	r1, [sp, #4]
 23fdd3e:	f7fd fb4d 	bl	23fb3dc <__cxa_guard_acquire>
 23fdd42:	9901      	ldr	r1, [sp, #4]
 23fdd44:	b148      	cbz	r0, 23fdd5a <_Z16_fetch_usbserialv+0x36>
 23fdd46:	aa03      	add	r2, sp, #12
 23fdd48:	4806      	ldr	r0, [pc, #24]	; (23fdd64 <_Z16_fetch_usbserialv+0x40>)
 23fdd4a:	f7ff ffcb 	bl	23fdce4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fdd4e:	4620      	mov	r0, r4
 23fdd50:	f7fd fb49 	bl	23fb3e6 <__cxa_guard_release>
 23fdd54:	4804      	ldr	r0, [pc, #16]	; (23fdd68 <_Z16_fetch_usbserialv+0x44>)
 23fdd56:	f000 fa6b 	bl	23fe230 <atexit>
	return _usbserial;
}
 23fdd5a:	4802      	ldr	r0, [pc, #8]	; (23fdd64 <_Z16_fetch_usbserialv+0x40>)
 23fdd5c:	b008      	add	sp, #32
 23fdd5e:	bd10      	pop	{r4, pc}
 23fdd60:	1007aec8 	.word	0x1007aec8
 23fdd64:	1007aecc 	.word	0x1007aecc
 23fdd68:	023fdc6b 	.word	0x023fdc6b

023fdd6c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fdd6c:	2200      	movs	r2, #0
 23fdd6e:	6840      	ldr	r0, [r0, #4]
 23fdd70:	4611      	mov	r1, r2
 23fdd72:	f7ff ba71 	b.w	23fd258 <network_ready>

023fdd76 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fdd76:	2200      	movs	r2, #0
 23fdd78:	6840      	ldr	r0, [r0, #4]
 23fdd7a:	4611      	mov	r1, r2
 23fdd7c:	f7ff baa4 	b.w	23fd2c8 <network_listening>

023fdd80 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fdd80:	2200      	movs	r2, #0
 23fdd82:	6840      	ldr	r0, [r0, #4]
 23fdd84:	4611      	mov	r1, r2
 23fdd86:	f7ff babb 	b.w	23fd300 <network_get_listen_timeout>

023fdd8a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fdd8a:	2200      	movs	r2, #0
 23fdd8c:	6840      	ldr	r0, [r0, #4]
 23fdd8e:	f7ff baa9 	b.w	23fd2e4 <network_set_listen_timeout>

023fdd92 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fdd92:	2200      	movs	r2, #0
 23fdd94:	6840      	ldr	r0, [r0, #4]
 23fdd96:	f081 0101 	eor.w	r1, r1, #1
 23fdd9a:	f7ff ba87 	b.w	23fd2ac <network_listen>

023fdd9e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fdd9e:	2300      	movs	r3, #0
 23fdda0:	6840      	ldr	r0, [r0, #4]
 23fdda2:	461a      	mov	r2, r3
 23fdda4:	4619      	mov	r1, r3
 23fdda6:	f7ff ba73 	b.w	23fd290 <network_off>

023fddaa <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fddaa:	2300      	movs	r3, #0
 23fddac:	6840      	ldr	r0, [r0, #4]
 23fddae:	461a      	mov	r2, r3
 23fddb0:	4619      	mov	r1, r3
 23fddb2:	f7ff ba5f 	b.w	23fd274 <network_on>

023fddb6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fddb6:	2200      	movs	r2, #0
 23fddb8:	6840      	ldr	r0, [r0, #4]
 23fddba:	4611      	mov	r1, r2
 23fddbc:	f7ff ba30 	b.w	23fd220 <network_connecting>

023fddc0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fddc0:	2200      	movs	r2, #0
 23fddc2:	2102      	movs	r1, #2
 23fddc4:	6840      	ldr	r0, [r0, #4]
 23fddc6:	f7ff ba39 	b.w	23fd23c <network_disconnect>

023fddca <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fddca:	2300      	movs	r3, #0
 23fddcc:	6840      	ldr	r0, [r0, #4]
 23fddce:	461a      	mov	r2, r3
 23fddd0:	f7ff ba18 	b.w	23fd204 <network_connect>

023fddd4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fddd4:	2204      	movs	r2, #4
 23fddd6:	4b02      	ldr	r3, [pc, #8]	; (23fdde0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fddd8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fddda:	4a02      	ldr	r2, [pc, #8]	; (23fdde4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fdddc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fddde:	4770      	bx	lr
 23fdde0:	1007aee0 	.word	0x1007aee0
 23fdde4:	023fff30 	.word	0x023fff30

023fdde8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fdde8:	4b01      	ldr	r3, [pc, #4]	; (23fddf0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fddea:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fddec:	4770      	bx	lr
 23fddee:	bf00      	nop
 23fddf0:	1007aca4 	.word	0x1007aca4

023fddf4 <serialEventRun>:
{
 23fddf4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fddf6:	4b0f      	ldr	r3, [pc, #60]	; (23fde34 <serialEventRun+0x40>)
 23fddf8:	b143      	cbz	r3, 23fde0c <serialEventRun+0x18>
 23fddfa:	f7ff ff93 	bl	23fdd24 <_Z16_fetch_usbserialv>
 23fddfe:	6803      	ldr	r3, [r0, #0]
 23fde00:	691b      	ldr	r3, [r3, #16]
 23fde02:	4798      	blx	r3
 23fde04:	2800      	cmp	r0, #0
 23fde06:	dd01      	ble.n	23fde0c <serialEventRun+0x18>
        serialEvent();
 23fde08:	e000      	b.n	23fde0c <serialEventRun+0x18>
 23fde0a:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fde0c:	4b0a      	ldr	r3, [pc, #40]	; (23fde38 <serialEventRun+0x44>)
 23fde0e:	b143      	cbz	r3, 23fde22 <serialEventRun+0x2e>
 23fde10:	f000 f97c 	bl	23fe10c <_Z22__fetch_global_Serial1v>
 23fde14:	6803      	ldr	r3, [r0, #0]
 23fde16:	691b      	ldr	r3, [r3, #16]
 23fde18:	4798      	blx	r3
 23fde1a:	2800      	cmp	r0, #0
 23fde1c:	dd01      	ble.n	23fde22 <serialEventRun+0x2e>
        serialEvent1();
 23fde1e:	e000      	b.n	23fde22 <serialEventRun+0x2e>
 23fde20:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fde22:	4b06      	ldr	r3, [pc, #24]	; (23fde3c <serialEventRun+0x48>)
 23fde24:	b10b      	cbz	r3, 23fde2a <serialEventRun+0x36>
 23fde26:	f000 f9b7 	bl	23fe198 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fde2a:	4b05      	ldr	r3, [pc, #20]	; (23fde40 <serialEventRun+0x4c>)
 23fde2c:	b10b      	cbz	r3, 23fde32 <serialEventRun+0x3e>
 23fde2e:	f000 f9e9 	bl	23fe204 <_Z15serialEventRun3v>
}
 23fde32:	bd08      	pop	{r3, pc}
	...

023fde44 <_post_loop>:
{
 23fde44:	b508      	push	{r3, lr}
	serialEventRun();
 23fde46:	f7ff ffd5 	bl	23fddf4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fde4a:	f7fe ff65 	bl	23fcd18 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fde4e:	4b01      	ldr	r3, [pc, #4]	; (23fde54 <_post_loop+0x10>)
 23fde50:	6018      	str	r0, [r3, #0]
}
 23fde52:	bd08      	pop	{r3, pc}
 23fde54:	1007aef0 	.word	0x1007aef0

023fde58 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fde58:	4805      	ldr	r0, [pc, #20]	; (23fde70 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fde5a:	4a06      	ldr	r2, [pc, #24]	; (23fde74 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fde5c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fde5e:	1a12      	subs	r2, r2, r0
 23fde60:	4905      	ldr	r1, [pc, #20]	; (23fde78 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fde62:	f000 f9eb 	bl	23fe23c <memcpy>
    __backup_sram_signature = signature;
 23fde66:	4b05      	ldr	r3, [pc, #20]	; (23fde7c <_Z33system_initialize_user_backup_ramv+0x24>)
 23fde68:	4a05      	ldr	r2, [pc, #20]	; (23fde80 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fde6a:	601a      	str	r2, [r3, #0]
}
 23fde6c:	bd08      	pop	{r3, pc}
 23fde6e:	bf00      	nop
 23fde70:	1007b400 	.word	0x1007b400
 23fde74:	1007b404 	.word	0x1007b404
 23fde78:	085ff798 	.word	0x085ff798
 23fde7c:	1007b400 	.word	0x1007b400
 23fde80:	9a271c1e 	.word	0x9a271c1e

023fde84 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fde84:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fde86:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fde88:	461a      	mov	r2, r3
 23fde8a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fde8e:	9300      	str	r3, [sp, #0]
 23fde90:	f7ff f99c 	bl	23fd1cc <system_ctrl_set_result>
}
 23fde94:	b003      	add	sp, #12
 23fde96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fde9c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fde9c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fde9e:	8843      	ldrh	r3, [r0, #2]
 23fdea0:	2b0a      	cmp	r3, #10
 23fdea2:	d008      	beq.n	23fdeb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fdea4:	2b50      	cmp	r3, #80	; 0x50
 23fdea6:	d10b      	bne.n	23fdec0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fdea8:	4b09      	ldr	r3, [pc, #36]	; (23fded0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fdeaa:	681b      	ldr	r3, [r3, #0]
 23fdeac:	b14b      	cbz	r3, 23fdec2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fdeae:	b003      	add	sp, #12
 23fdeb0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fdeb4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fdeb6:	f7ff ffe5 	bl	23fde84 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fdeba:	b003      	add	sp, #12
 23fdebc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdec0:	2300      	movs	r3, #0
 23fdec2:	461a      	mov	r2, r3
 23fdec4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fdec8:	9300      	str	r3, [sp, #0]
 23fdeca:	f7ff f97f 	bl	23fd1cc <system_ctrl_set_result>
}
 23fdece:	e7f4      	b.n	23fdeba <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fded0:	1007aeec 	.word	0x1007aeec

023fded4 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fded4:	2100      	movs	r1, #0
{
 23fded6:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fded8:	4811      	ldr	r0, [pc, #68]	; (23fdf20 <module_user_init_hook+0x4c>)
 23fdeda:	f7ff fa65 	bl	23fd3a8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fdede:	4b11      	ldr	r3, [pc, #68]	; (23fdf24 <module_user_init_hook+0x50>)
 23fdee0:	681a      	ldr	r2, [r3, #0]
 23fdee2:	4b11      	ldr	r3, [pc, #68]	; (23fdf28 <module_user_init_hook+0x54>)
 23fdee4:	429a      	cmp	r2, r3
 23fdee6:	bf0c      	ite	eq
 23fdee8:	2201      	moveq	r2, #1
 23fdeea:	2200      	movne	r2, #0
 23fdeec:	4b0f      	ldr	r3, [pc, #60]	; (23fdf2c <module_user_init_hook+0x58>)
 23fdeee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fdef0:	d001      	beq.n	23fdef6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fdef2:	f7ff ffb1 	bl	23fde58 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fdef6:	f7fe fef3 	bl	23fcce0 <HAL_RNG_GetRandomNumber>
 23fdefa:	4604      	mov	r4, r0
    srand(seed);
 23fdefc:	f000 f9b4 	bl	23fe268 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fdf00:	4b0b      	ldr	r3, [pc, #44]	; (23fdf30 <module_user_init_hook+0x5c>)
 23fdf02:	b113      	cbz	r3, 23fdf0a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fdf04:	4620      	mov	r0, r4
 23fdf06:	e000      	b.n	23fdf0a <module_user_init_hook+0x36>
 23fdf08:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fdf0a:	2100      	movs	r1, #0
 23fdf0c:	4808      	ldr	r0, [pc, #32]	; (23fdf30 <module_user_init_hook+0x5c>)
 23fdf0e:	f7ff f96b 	bl	23fd1e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fdf12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fdf16:	2100      	movs	r1, #0
 23fdf18:	4806      	ldr	r0, [pc, #24]	; (23fdf34 <module_user_init_hook+0x60>)
 23fdf1a:	f7ff b949 	b.w	23fd1b0 <system_ctrl_set_app_request_handler>
 23fdf1e:	bf00      	nop
 23fdf20:	023fdde9 	.word	0x023fdde9
 23fdf24:	1007b400 	.word	0x1007b400
 23fdf28:	9a271c1e 	.word	0x9a271c1e
 23fdf2c:	1007aee8 	.word	0x1007aee8
 23fdf30:	00000000 	.word	0x00000000
 23fdf34:	023fde9d 	.word	0x023fde9d

023fdf38 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fdf38:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fdf3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdf3c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fdf3e:	d902      	bls.n	23fdf46 <pinAvailable+0xe>
    return false;
 23fdf40:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fdf42:	b003      	add	sp, #12
 23fdf44:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fdf46:	f1a0 030f 	sub.w	r3, r0, #15
 23fdf4a:	2b02      	cmp	r3, #2
 23fdf4c:	d90b      	bls.n	23fdf66 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fdf4e:	2801      	cmp	r0, #1
 23fdf50:	d821      	bhi.n	23fdf96 <pinAvailable+0x5e>
 23fdf52:	f000 f887 	bl	23fe064 <_Z19__fetch_global_Wirev>
 23fdf56:	2100      	movs	r1, #0
 23fdf58:	7c00      	ldrb	r0, [r0, #16]
 23fdf5a:	f7fe ff77 	bl	23fce4c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fdf5e:	f080 0001 	eor.w	r0, r0, #1
 23fdf62:	b2c0      	uxtb	r0, r0
 23fdf64:	e7ed      	b.n	23fdf42 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fdf66:	4d11      	ldr	r5, [pc, #68]	; (23fdfac <pinAvailable+0x74>)
 23fdf68:	e8d5 1f8f 	ldab	r1, [r5]
 23fdf6c:	f011 0101 	ands.w	r1, r1, #1
 23fdf70:	d10b      	bne.n	23fdf8a <pinAvailable+0x52>
 23fdf72:	4628      	mov	r0, r5
 23fdf74:	9101      	str	r1, [sp, #4]
 23fdf76:	f7fd fa31 	bl	23fb3dc <__cxa_guard_acquire>
 23fdf7a:	9901      	ldr	r1, [sp, #4]
 23fdf7c:	b128      	cbz	r0, 23fdf8a <pinAvailable+0x52>
 23fdf7e:	480c      	ldr	r0, [pc, #48]	; (23fdfb0 <pinAvailable+0x78>)
 23fdf80:	f7ff fd54 	bl	23fda2c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fdf84:	4628      	mov	r0, r5
 23fdf86:	f7fd fa2e 	bl	23fb3e6 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fdf8a:	4b09      	ldr	r3, [pc, #36]	; (23fdfb0 <pinAvailable+0x78>)
 23fdf8c:	7818      	ldrb	r0, [r3, #0]
 23fdf8e:	f7fe ffcd 	bl	23fcf2c <hal_spi_is_enabled>
 23fdf92:	2800      	cmp	r0, #0
 23fdf94:	d1d4      	bne.n	23fdf40 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fdf96:	3c08      	subs	r4, #8
 23fdf98:	2c01      	cmp	r4, #1
 23fdf9a:	d805      	bhi.n	23fdfa8 <pinAvailable+0x70>
 23fdf9c:	f000 f8b6 	bl	23fe10c <_Z22__fetch_global_Serial1v>
 23fdfa0:	7c00      	ldrb	r0, [r0, #16]
 23fdfa2:	f7ff f84f 	bl	23fd044 <hal_usart_is_enabled>
 23fdfa6:	e7da      	b.n	23fdf5e <pinAvailable+0x26>
  return true; // 'pin' is available
 23fdfa8:	2001      	movs	r0, #1
 23fdfaa:	e7ca      	b.n	23fdf42 <pinAvailable+0xa>
 23fdfac:	1007ae80 	.word	0x1007ae80
 23fdfb0:	1007ae84 	.word	0x1007ae84

023fdfb4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fdfb4:	281b      	cmp	r0, #27
{
 23fdfb6:	b538      	push	{r3, r4, r5, lr}
 23fdfb8:	4604      	mov	r4, r0
 23fdfba:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fdfbc:	d80a      	bhi.n	23fdfd4 <pinMode+0x20>
 23fdfbe:	29ff      	cmp	r1, #255	; 0xff
 23fdfc0:	d008      	beq.n	23fdfd4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fdfc2:	f7ff ffb9 	bl	23fdf38 <pinAvailable>
 23fdfc6:	b128      	cbz	r0, 23fdfd4 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fdfc8:	4629      	mov	r1, r5
 23fdfca:	4620      	mov	r0, r4
}
 23fdfcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fdfd0:	f7fe bebe 	b.w	23fcd50 <hal_gpio_mode>
}
 23fdfd4:	bd38      	pop	{r3, r4, r5, pc}

023fdfd6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fdfd6:	b538      	push	{r3, r4, r5, lr}
 23fdfd8:	4604      	mov	r4, r0
 23fdfda:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fdfdc:	f7fe fec6 	bl	23fcd6c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fdfe0:	28ff      	cmp	r0, #255	; 0xff
 23fdfe2:	d010      	beq.n	23fe006 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fdfe4:	2806      	cmp	r0, #6
 23fdfe6:	d804      	bhi.n	23fdff2 <digitalWrite+0x1c>
 23fdfe8:	234d      	movs	r3, #77	; 0x4d
 23fdfea:	fa23 f000 	lsr.w	r0, r3, r0
 23fdfee:	07c3      	lsls	r3, r0, #31
 23fdff0:	d409      	bmi.n	23fe006 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fdff2:	4620      	mov	r0, r4
 23fdff4:	f7ff ffa0 	bl	23fdf38 <pinAvailable>
 23fdff8:	b128      	cbz	r0, 23fe006 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fdffa:	4629      	mov	r1, r5
 23fdffc:	4620      	mov	r0, r4
}
 23fdffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fe002:	f7fe bec1 	b.w	23fcd88 <hal_gpio_write>
}
 23fe006:	bd38      	pop	{r3, r4, r5, pc}

023fe008 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23fe008:	b510      	push	{r4, lr}
 23fe00a:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23fe00c:	f7ff ff94 	bl	23fdf38 <pinAvailable>
 23fe010:	b150      	cbz	r0, 23fe028 <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23fe012:	2103      	movs	r1, #3
 23fe014:	4620      	mov	r0, r4
 23fe016:	f7fe fe8d 	bl	23fcd34 <hal_pin_validate_function>
 23fe01a:	2803      	cmp	r0, #3
 23fe01c:	d104      	bne.n	23fe028 <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23fe01e:	4620      	mov	r0, r4
}
 23fe020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23fe024:	f7fe bebe 	b.w	23fcda4 <hal_adc_read>
}
 23fe028:	2000      	movs	r0, #0
 23fe02a:	bd10      	pop	{r4, pc}

023fe02c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe02c:	4770      	bx	lr
	...

023fe030 <_Z17acquireWireBufferv>:
{
 23fe030:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fe032:	4b0a      	ldr	r3, [pc, #40]	; (23fe05c <_Z17acquireWireBufferv+0x2c>)
{
 23fe034:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fe036:	6003      	str	r3, [r0, #0]
 23fe038:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe03a:	4909      	ldr	r1, [pc, #36]	; (23fe060 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fe03c:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe03e:	2020      	movs	r0, #32
 23fe040:	f000 f8f4 	bl	23fe22c <_ZnajRKSt9nothrow_t>
	};
 23fe044:	2520      	movs	r5, #32
 23fe046:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe048:	4905      	ldr	r1, [pc, #20]	; (23fe060 <_Z17acquireWireBufferv+0x30>)
 23fe04a:	4628      	mov	r0, r5
	};
 23fe04c:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe04e:	f000 f8ed 	bl	23fe22c <_ZnajRKSt9nothrow_t>
	};
 23fe052:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fe056:	4620      	mov	r0, r4
 23fe058:	bd38      	pop	{r3, r4, r5, pc}
 23fe05a:	bf00      	nop
 23fe05c:	00010018 	.word	0x00010018
 23fe060:	023fff64 	.word	0x023fff64

023fe064 <_Z19__fetch_global_Wirev>:
{
 23fe064:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe066:	4d0e      	ldr	r5, [pc, #56]	; (23fe0a0 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fe068:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe06a:	e8d5 1f8f 	ldab	r1, [r5]
 23fe06e:	f011 0401 	ands.w	r4, r1, #1
 23fe072:	d111      	bne.n	23fe098 <_Z19__fetch_global_Wirev+0x34>
 23fe074:	4628      	mov	r0, r5
 23fe076:	f7fd f9b1 	bl	23fb3dc <__cxa_guard_acquire>
 23fe07a:	b168      	cbz	r0, 23fe098 <_Z19__fetch_global_Wirev+0x34>
 23fe07c:	4668      	mov	r0, sp
 23fe07e:	f7ff ffd7 	bl	23fe030 <_Z17acquireWireBufferv>
 23fe082:	466a      	mov	r2, sp
 23fe084:	4621      	mov	r1, r4
 23fe086:	4807      	ldr	r0, [pc, #28]	; (23fe0a4 <_Z19__fetch_global_Wirev+0x40>)
 23fe088:	f7ff fa1e 	bl	23fd4c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fe08c:	4628      	mov	r0, r5
 23fe08e:	f7fd f9aa 	bl	23fb3e6 <__cxa_guard_release>
 23fe092:	4805      	ldr	r0, [pc, #20]	; (23fe0a8 <_Z19__fetch_global_Wirev+0x44>)
 23fe094:	f000 f8cc 	bl	23fe230 <atexit>
	return wire;
}
 23fe098:	4802      	ldr	r0, [pc, #8]	; (23fe0a4 <_Z19__fetch_global_Wirev+0x40>)
 23fe09a:	b007      	add	sp, #28
 23fe09c:	bd30      	pop	{r4, r5, pc}
 23fe09e:	bf00      	nop
 23fe0a0:	1007aef4 	.word	0x1007aef4
 23fe0a4:	1007aef8 	.word	0x1007aef8
 23fe0a8:	023fe02d 	.word	0x023fe02d

023fe0ac <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe0ac:	4770      	bx	lr
	...

023fe0b0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe0b0:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fe0b2:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe0b4:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fe0b6:	462a      	mov	r2, r5
 23fe0b8:	2100      	movs	r1, #0
 23fe0ba:	f000 f8cc 	bl	23fe256 <memset>
 23fe0be:	8025      	strh	r5, [r4, #0]
 23fe0c0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe0c2:	4907      	ldr	r1, [pc, #28]	; (23fe0e0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fe0c4:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fe0c6:	8125      	strh	r5, [r4, #8]
 23fe0c8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe0ca:	f000 f8af 	bl	23fe22c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe0ce:	4904      	ldr	r1, [pc, #16]	; (23fe0e0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fe0d0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe0d2:	4628      	mov	r0, r5
 23fe0d4:	f000 f8aa 	bl	23fe22c <_ZnajRKSt9nothrow_t>
    };
 23fe0d8:	60e0      	str	r0, [r4, #12]
}
 23fe0da:	4620      	mov	r0, r4
 23fe0dc:	bd38      	pop	{r3, r4, r5, pc}
 23fe0de:	bf00      	nop
 23fe0e0:	023fff64 	.word	0x023fff64

023fe0e4 <__tcf_2>:
 23fe0e4:	4770      	bx	lr

023fe0e6 <__tcf_1>:
 23fe0e6:	4770      	bx	lr

023fe0e8 <_Z20acquireSerial1Bufferv>:
{
 23fe0e8:	b510      	push	{r4, lr}
 23fe0ea:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fe0ec:	f7ff ffe0 	bl	23fe0b0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fe0f0:	4620      	mov	r0, r4
 23fe0f2:	bd10      	pop	{r4, pc}

023fe0f4 <_Z20acquireSerial2Bufferv>:
 23fe0f4:	b510      	push	{r4, lr}
 23fe0f6:	4604      	mov	r4, r0
 23fe0f8:	f7ff ffda 	bl	23fe0b0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe0fc:	4620      	mov	r0, r4
 23fe0fe:	bd10      	pop	{r4, pc}

023fe100 <_Z20acquireSerial3Bufferv>:
 23fe100:	b510      	push	{r4, lr}
 23fe102:	4604      	mov	r4, r0
 23fe104:	f7ff ffd4 	bl	23fe0b0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe108:	4620      	mov	r0, r4
 23fe10a:	bd10      	pop	{r4, pc}

023fe10c <_Z22__fetch_global_Serial1v>:
{
 23fe10c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe10e:	4d0e      	ldr	r5, [pc, #56]	; (23fe148 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fe110:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe112:	e8d5 1f8f 	ldab	r1, [r5]
 23fe116:	f011 0401 	ands.w	r4, r1, #1
 23fe11a:	d111      	bne.n	23fe140 <_Z22__fetch_global_Serial1v+0x34>
 23fe11c:	4628      	mov	r0, r5
 23fe11e:	f7fd f95d 	bl	23fb3dc <__cxa_guard_acquire>
 23fe122:	b168      	cbz	r0, 23fe140 <_Z22__fetch_global_Serial1v+0x34>
 23fe124:	a801      	add	r0, sp, #4
 23fe126:	f7ff ffdf 	bl	23fe0e8 <_Z20acquireSerial1Bufferv>
 23fe12a:	4621      	mov	r1, r4
 23fe12c:	aa01      	add	r2, sp, #4
 23fe12e:	4807      	ldr	r0, [pc, #28]	; (23fe14c <_Z22__fetch_global_Serial1v+0x40>)
 23fe130:	f7ff fd82 	bl	23fdc38 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe134:	4628      	mov	r0, r5
 23fe136:	f7fd f956 	bl	23fb3e6 <__cxa_guard_release>
 23fe13a:	4805      	ldr	r0, [pc, #20]	; (23fe150 <_Z22__fetch_global_Serial1v+0x44>)
 23fe13c:	f000 f878 	bl	23fe230 <atexit>
    return serial1;
}
 23fe140:	4802      	ldr	r0, [pc, #8]	; (23fe14c <_Z22__fetch_global_Serial1v+0x40>)
 23fe142:	b007      	add	sp, #28
 23fe144:	bd30      	pop	{r4, r5, pc}
 23fe146:	bf00      	nop
 23fe148:	1007af0c 	.word	0x1007af0c
 23fe14c:	1007af18 	.word	0x1007af18
 23fe150:	023fe0ad 	.word	0x023fe0ad

023fe154 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fe154:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe156:	4c0d      	ldr	r4, [pc, #52]	; (23fe18c <_Z22__fetch_global_Serial2v+0x38>)
{
 23fe158:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe15a:	e8d4 3f8f 	ldab	r3, [r4]
 23fe15e:	07db      	lsls	r3, r3, #31
 23fe160:	d411      	bmi.n	23fe186 <_Z22__fetch_global_Serial2v+0x32>
 23fe162:	4620      	mov	r0, r4
 23fe164:	f7fd f93a 	bl	23fb3dc <__cxa_guard_acquire>
 23fe168:	b168      	cbz	r0, 23fe186 <_Z22__fetch_global_Serial2v+0x32>
 23fe16a:	a801      	add	r0, sp, #4
 23fe16c:	f7ff ffc2 	bl	23fe0f4 <_Z20acquireSerial2Bufferv>
 23fe170:	2101      	movs	r1, #1
 23fe172:	aa01      	add	r2, sp, #4
 23fe174:	4806      	ldr	r0, [pc, #24]	; (23fe190 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe176:	f7ff fd5f 	bl	23fdc38 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe17a:	4620      	mov	r0, r4
 23fe17c:	f7fd f933 	bl	23fb3e6 <__cxa_guard_release>
 23fe180:	4804      	ldr	r0, [pc, #16]	; (23fe194 <_Z22__fetch_global_Serial2v+0x40>)
 23fe182:	f000 f855 	bl	23fe230 <atexit>
	return serial2;
}
 23fe186:	4802      	ldr	r0, [pc, #8]	; (23fe190 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe188:	b006      	add	sp, #24
 23fe18a:	bd10      	pop	{r4, pc}
 23fe18c:	1007af10 	.word	0x1007af10
 23fe190:	1007af2c 	.word	0x1007af2c
 23fe194:	023fe0e7 	.word	0x023fe0e7

023fe198 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fe198:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fe19a:	f7ff ffdb 	bl	23fe154 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe19e:	4b07      	ldr	r3, [pc, #28]	; (23fe1bc <_Z15serialEventRun2v+0x24>)
 23fe1a0:	4604      	mov	r4, r0
 23fe1a2:	b153      	cbz	r3, 23fe1ba <_Z15serialEventRun2v+0x22>
 23fe1a4:	f7ff fd5c 	bl	23fdc60 <_ZN11USARTSerial9isEnabledEv>
 23fe1a8:	b138      	cbz	r0, 23fe1ba <_Z15serialEventRun2v+0x22>
 23fe1aa:	6823      	ldr	r3, [r4, #0]
 23fe1ac:	4620      	mov	r0, r4
 23fe1ae:	691b      	ldr	r3, [r3, #16]
 23fe1b0:	4798      	blx	r3
 23fe1b2:	2800      	cmp	r0, #0
 23fe1b4:	dd01      	ble.n	23fe1ba <_Z15serialEventRun2v+0x22>
        handler();
 23fe1b6:	e000      	b.n	23fe1ba <_Z15serialEventRun2v+0x22>
 23fe1b8:	bf00      	nop
}
 23fe1ba:	bd10      	pop	{r4, pc}
 23fe1bc:	00000000 	.word	0x00000000

023fe1c0 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fe1c0:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe1c2:	4c0d      	ldr	r4, [pc, #52]	; (23fe1f8 <_Z22__fetch_global_Serial3v+0x38>)
{
 23fe1c4:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe1c6:	e8d4 3f8f 	ldab	r3, [r4]
 23fe1ca:	07db      	lsls	r3, r3, #31
 23fe1cc:	d411      	bmi.n	23fe1f2 <_Z22__fetch_global_Serial3v+0x32>
 23fe1ce:	4620      	mov	r0, r4
 23fe1d0:	f7fd f904 	bl	23fb3dc <__cxa_guard_acquire>
 23fe1d4:	b168      	cbz	r0, 23fe1f2 <_Z22__fetch_global_Serial3v+0x32>
 23fe1d6:	a801      	add	r0, sp, #4
 23fe1d8:	f7ff ff92 	bl	23fe100 <_Z20acquireSerial3Bufferv>
 23fe1dc:	2102      	movs	r1, #2
 23fe1de:	aa01      	add	r2, sp, #4
 23fe1e0:	4806      	ldr	r0, [pc, #24]	; (23fe1fc <_Z22__fetch_global_Serial3v+0x3c>)
 23fe1e2:	f7ff fd29 	bl	23fdc38 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe1e6:	4620      	mov	r0, r4
 23fe1e8:	f7fd f8fd 	bl	23fb3e6 <__cxa_guard_release>
 23fe1ec:	4804      	ldr	r0, [pc, #16]	; (23fe200 <_Z22__fetch_global_Serial3v+0x40>)
 23fe1ee:	f000 f81f 	bl	23fe230 <atexit>
	return serial3;
}
 23fe1f2:	4802      	ldr	r0, [pc, #8]	; (23fe1fc <_Z22__fetch_global_Serial3v+0x3c>)
 23fe1f4:	b006      	add	sp, #24
 23fe1f6:	bd10      	pop	{r4, pc}
 23fe1f8:	1007af14 	.word	0x1007af14
 23fe1fc:	1007af40 	.word	0x1007af40
 23fe200:	023fe0e5 	.word	0x023fe0e5

023fe204 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fe204:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fe206:	f7ff ffdb 	bl	23fe1c0 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe20a:	4b07      	ldr	r3, [pc, #28]	; (23fe228 <_Z15serialEventRun3v+0x24>)
 23fe20c:	4604      	mov	r4, r0
 23fe20e:	b153      	cbz	r3, 23fe226 <_Z15serialEventRun3v+0x22>
 23fe210:	f7ff fd26 	bl	23fdc60 <_ZN11USARTSerial9isEnabledEv>
 23fe214:	b138      	cbz	r0, 23fe226 <_Z15serialEventRun3v+0x22>
 23fe216:	6823      	ldr	r3, [r4, #0]
 23fe218:	4620      	mov	r0, r4
 23fe21a:	691b      	ldr	r3, [r3, #16]
 23fe21c:	4798      	blx	r3
 23fe21e:	2800      	cmp	r0, #0
 23fe220:	dd01      	ble.n	23fe226 <_Z15serialEventRun3v+0x22>
        handler();
 23fe222:	e000      	b.n	23fe226 <_Z15serialEventRun3v+0x22>
 23fe224:	bf00      	nop
}
 23fe226:	bd10      	pop	{r4, pc}
 23fe228:	00000000 	.word	0x00000000

023fe22c <_ZnajRKSt9nothrow_t>:
 23fe22c:	f7fd b8c5 	b.w	23fb3ba <_Znaj>

023fe230 <atexit>:
 23fe230:	2300      	movs	r3, #0
 23fe232:	4601      	mov	r1, r0
 23fe234:	461a      	mov	r2, r3
 23fe236:	4618      	mov	r0, r3
 23fe238:	f000 b844 	b.w	23fe2c4 <__register_exitproc>

023fe23c <memcpy>:
 23fe23c:	440a      	add	r2, r1
 23fe23e:	1e43      	subs	r3, r0, #1
 23fe240:	4291      	cmp	r1, r2
 23fe242:	d100      	bne.n	23fe246 <memcpy+0xa>
 23fe244:	4770      	bx	lr
 23fe246:	b510      	push	{r4, lr}
 23fe248:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fe24c:	4291      	cmp	r1, r2
 23fe24e:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fe252:	d1f9      	bne.n	23fe248 <memcpy+0xc>
 23fe254:	bd10      	pop	{r4, pc}

023fe256 <memset>:
 23fe256:	4402      	add	r2, r0
 23fe258:	4603      	mov	r3, r0
 23fe25a:	4293      	cmp	r3, r2
 23fe25c:	d100      	bne.n	23fe260 <memset+0xa>
 23fe25e:	4770      	bx	lr
 23fe260:	f803 1b01 	strb.w	r1, [r3], #1
 23fe264:	e7f9      	b.n	23fe25a <memset+0x4>
	...

023fe268 <srand>:
 23fe268:	b538      	push	{r3, r4, r5, lr}
 23fe26a:	4b10      	ldr	r3, [pc, #64]	; (23fe2ac <srand+0x44>)
 23fe26c:	4604      	mov	r4, r0
 23fe26e:	681d      	ldr	r5, [r3, #0]
 23fe270:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fe272:	b9b3      	cbnz	r3, 23fe2a2 <srand+0x3a>
 23fe274:	2018      	movs	r0, #24
 23fe276:	f7ff f86d 	bl	23fd354 <malloc>
 23fe27a:	4602      	mov	r2, r0
 23fe27c:	63a8      	str	r0, [r5, #56]	; 0x38
 23fe27e:	b920      	cbnz	r0, 23fe28a <srand+0x22>
 23fe280:	4b0b      	ldr	r3, [pc, #44]	; (23fe2b0 <srand+0x48>)
 23fe282:	2142      	movs	r1, #66	; 0x42
 23fe284:	480b      	ldr	r0, [pc, #44]	; (23fe2b4 <srand+0x4c>)
 23fe286:	f7ff f881 	bl	23fd38c <__assert_func>
 23fe28a:	490b      	ldr	r1, [pc, #44]	; (23fe2b8 <srand+0x50>)
 23fe28c:	4b0b      	ldr	r3, [pc, #44]	; (23fe2bc <srand+0x54>)
 23fe28e:	e9c0 1300 	strd	r1, r3, [r0]
 23fe292:	4b0b      	ldr	r3, [pc, #44]	; (23fe2c0 <srand+0x58>)
 23fe294:	2100      	movs	r1, #0
 23fe296:	6083      	str	r3, [r0, #8]
 23fe298:	230b      	movs	r3, #11
 23fe29a:	8183      	strh	r3, [r0, #12]
 23fe29c:	2001      	movs	r0, #1
 23fe29e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fe2a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fe2a4:	2200      	movs	r2, #0
 23fe2a6:	611c      	str	r4, [r3, #16]
 23fe2a8:	615a      	str	r2, [r3, #20]
 23fe2aa:	bd38      	pop	{r3, r4, r5, pc}
 23fe2ac:	1007aca4 	.word	0x1007aca4
 23fe2b0:	023fff65 	.word	0x023fff65
 23fe2b4:	023fff7c 	.word	0x023fff7c
 23fe2b8:	abcd330e 	.word	0xabcd330e
 23fe2bc:	e66d1234 	.word	0xe66d1234
 23fe2c0:	0005deec 	.word	0x0005deec

023fe2c4 <__register_exitproc>:
 23fe2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fe2c8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fe388 <__register_exitproc+0xc4>
 23fe2cc:	4606      	mov	r6, r0
 23fe2ce:	461f      	mov	r7, r3
 23fe2d0:	460d      	mov	r5, r1
 23fe2d2:	f8d8 0000 	ldr.w	r0, [r8]
 23fe2d6:	4691      	mov	r9, r2
 23fe2d8:	f000 f858 	bl	23fe38c <__retarget_lock_acquire_recursive>
 23fe2dc:	4b26      	ldr	r3, [pc, #152]	; (23fe378 <__register_exitproc+0xb4>)
 23fe2de:	681c      	ldr	r4, [r3, #0]
 23fe2e0:	b934      	cbnz	r4, 23fe2f0 <__register_exitproc+0x2c>
 23fe2e2:	4c26      	ldr	r4, [pc, #152]	; (23fe37c <__register_exitproc+0xb8>)
 23fe2e4:	601c      	str	r4, [r3, #0]
 23fe2e6:	4b26      	ldr	r3, [pc, #152]	; (23fe380 <__register_exitproc+0xbc>)
 23fe2e8:	b113      	cbz	r3, 23fe2f0 <__register_exitproc+0x2c>
 23fe2ea:	681b      	ldr	r3, [r3, #0]
 23fe2ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fe2f0:	6863      	ldr	r3, [r4, #4]
 23fe2f2:	2b1f      	cmp	r3, #31
 23fe2f4:	dd07      	ble.n	23fe306 <__register_exitproc+0x42>
 23fe2f6:	f8d8 0000 	ldr.w	r0, [r8]
 23fe2fa:	f000 f849 	bl	23fe390 <__retarget_lock_release_recursive>
 23fe2fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fe306:	b35e      	cbz	r6, 23fe360 <__register_exitproc+0x9c>
 23fe308:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fe30c:	b988      	cbnz	r0, 23fe332 <__register_exitproc+0x6e>
 23fe30e:	4b1d      	ldr	r3, [pc, #116]	; (23fe384 <__register_exitproc+0xc0>)
 23fe310:	b923      	cbnz	r3, 23fe31c <__register_exitproc+0x58>
 23fe312:	f8d8 0000 	ldr.w	r0, [r8]
 23fe316:	f000 f83a 	bl	23fe38e <__retarget_lock_release>
 23fe31a:	e7f0      	b.n	23fe2fe <__register_exitproc+0x3a>
 23fe31c:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fe320:	f7ff f818 	bl	23fd354 <malloc>
 23fe324:	2800      	cmp	r0, #0
 23fe326:	d0f4      	beq.n	23fe312 <__register_exitproc+0x4e>
 23fe328:	2300      	movs	r3, #0
 23fe32a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fe32e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fe332:	6863      	ldr	r3, [r4, #4]
 23fe334:	2201      	movs	r2, #1
 23fe336:	2e02      	cmp	r6, #2
 23fe338:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fe33c:	fa02 f203 	lsl.w	r2, r2, r3
 23fe340:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fe344:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fe348:	ea43 0302 	orr.w	r3, r3, r2
 23fe34c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fe350:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fe354:	bf02      	ittt	eq
 23fe356:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fe35a:	4313      	orreq	r3, r2
 23fe35c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fe360:	6863      	ldr	r3, [r4, #4]
 23fe362:	f8d8 0000 	ldr.w	r0, [r8]
 23fe366:	1c5a      	adds	r2, r3, #1
 23fe368:	3302      	adds	r3, #2
 23fe36a:	6062      	str	r2, [r4, #4]
 23fe36c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fe370:	f000 f80e 	bl	23fe390 <__retarget_lock_release_recursive>
 23fe374:	2000      	movs	r0, #0
 23fe376:	e7c4      	b.n	23fe302 <__register_exitproc+0x3e>
 23fe378:	1007afe0 	.word	0x1007afe0
 23fe37c:	1007af54 	.word	0x1007af54
 23fe380:	00000000 	.word	0x00000000
 23fe384:	023fd355 	.word	0x023fd355
 23fe388:	1007ad08 	.word	0x1007ad08

023fe38c <__retarget_lock_acquire_recursive>:
 23fe38c:	4770      	bx	lr

023fe38e <__retarget_lock_release>:
 23fe38e:	4770      	bx	lr

023fe390 <__retarget_lock_release_recursive>:
 23fe390:	4770      	bx	lr
	...

023fe394 <dynalib_user>:
 23fe394:	b381 023f b3a9 023f b3ad 023f 0000 0000     ..?...?...?.....
 23fe3a4:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23fe3b4:	7574 6c61 4500 3a43 2020 2800 536d 6d2f     tual.EC:  .(mS/m
 23fe3c4:	0029 4454 3a53 2020 2800 7070 2f6d 296d     ).TDS:  .(ppm/m)
 23fe3d4:	5400 7275 6962 6964 7974 203a 0020 4e28     .Turbidity:  .(N
 23fe3e4:	5554 0029 4c43 4145 3a4e 0020 4c43 4145     TU).CLEAN: .CLEA
 23fe3f4:	004e 554d 4b52 3a59 0020 554d 4b52 0059     N.MURKY: .MURKY.
 23fe404:	4944 5452 3a59 0020 4944 5452 0059 4454     DIRTY: .DIRTY.TD
 23fe414:	2053 6156 756c 3a65 7000 6d70 4500 2043     S Value:.ppm.EC 
 23fe424:	6156 756c 3a65 6d00 2f53 006d               Value:.mS/m.

023fe430 <_ZL13FreeSans9pt7b>:
 23fe430:	e740 023f e448 023f 7e20 0016               @.?.H.?. ~..

023fe43c <_ZL18FreeSansBold12pt7b>:
 23fe43c:	eeb6 023f ebbe 023f 7e20 001d               ..?...?. ~..

023fe448 <_ZL19FreeSans9pt7bGlyphs>:
 23fe448:	0000 0000 0005 0001 0000 0d02 0206 00f4     ................
 23fe458:	0004 0405 0106 00f4 0007 0c0a 000a 00f5     ................
 23fe468:	0016 1009 010a 00f3 0028 0d10 0110 00f4     ........(.......
 23fe478:	0042 0d0b 010c 00f4 0054 0402 0104 00f4     B.......T.......
 23fe488:	0055 1104 0106 00f4 005e 1104 0106 00f4     U.......^.......
 23fe498:	0067 0505 0107 00f4 006b 0806 030b 00f9     g.......k.......
 23fe4a8:	0071 0402 0205 0000 0072 0104 0106 00fc     q.......r.......
 23fe4b8:	0073 0102 0105 0000 0074 0d05 0005 00f4     s.......t.......
 23fe4c8:	007d 0d08 010a 00f4 008a 0d04 030a 00f4     }...............
 23fe4d8:	0091 0d09 010a 00f4 00a0 0d08 010a 00f4     ................
 23fe4e8:	00ad 0d07 020a 00f4 00b9 0d09 010a 00f4     ................
 23fe4f8:	00c8 0d09 010a 00f4 00d7 0d08 000a 00f4     ................
 23fe508:	00e4 0d09 010a 00f4 00f3 0d08 010a 00f4     ................
 23fe518:	0100 0a02 0105 00f7 0103 0c03 0105 00f8     ................
 23fe528:	0108 0909 010b 00f8 0113 0409 010b 00fb     ................
 23fe538:	0118 0909 010b 00f8 0123 0d09 010a 00f4     ........#.......
 23fe548:	0132 1011 0112 00f4 0154 0d0c 000c 00f4     2.......T.......
 23fe558:	0168 0d0b 010c 00f4 017a 0d0b 010d 00f4     h.......z.......
 23fe568:	018c 0d0b 010d 00f4 019e 0d09 010b 00f4     ................
 23fe578:	01ad 0d08 010b 00f4 01ba 0d0c 010e 00f4     ................
 23fe588:	01ce 0d0b 010d 00f4 01e0 0d02 0205 00f4     ................
 23fe598:	01e4 0d07 010a 00f4 01f0 0d0b 010c 00f4     ................
 23fe5a8:	0202 0d08 010a 00f4 020f 0d0d 010f 00f4     ................
 23fe5b8:	0225 0d0b 010d 00f4 0237 0d0d 010e 00f4     %.......7.......
 23fe5c8:	024d 0d0a 010c 00f4 025e 0e0d 010e 00f4     M.......^.......
 23fe5d8:	0275 0d0c 010d 00f4 0289 0d0a 010c 00f4     u...............
 23fe5e8:	029a 0d09 010b 00f4 02a9 0d0b 010d 00f4     ................
 23fe5f8:	02bb 0d0b 000c 00f4 02cd 0d11 0011 00f4     ................
 23fe608:	02e9 0d0c 000c 00f4 02fd 0d0c 000c 00f4     ................
 23fe618:	0311 0d0a 010b 00f4 0322 1103 0105 00f4     ........".......
 23fe628:	0329 0d05 0005 00f4 0332 1103 0005 00f4     ).......2.......
 23fe638:	0339 0707 0108 00f4 0340 010a 000a 0003     9.......@.......
 23fe648:	0342 0304 0005 00f4 0344 0a09 010a 00f7     B.......D.......
 23fe658:	0350 0d09 010a 00f4 035f 0a08 0109 00f7     P......._.......
 23fe668:	0369 0d08 010a 00f4 0376 0a08 010a 00f7     i.......v.......
 23fe678:	0380 0d04 0105 00f4 0387 0e08 010a 00f7     ................
 23fe688:	0395 0d08 010a 00f4 03a2 0d02 0104 00f4     ................
 23fe698:	03a6 1104 0004 00f4 03af 0d09 0109 00f4     ................
 23fe6a8:	03be 0d02 0104 00f4 03c2 0a0d 010f 00f7     ................
 23fe6b8:	03d3 0a08 010a 00f7 03dd 0a08 010a 00f7     ................
 23fe6c8:	03e7 0d09 010a 00f7 03f6 0d08 010a 00f7     ................
 23fe6d8:	0403 0a05 0106 00f7 040a 0a08 0109 00f7     ................
 23fe6e8:	0414 0c04 0105 00f5 041a 0a08 010a 00f7     ................
 23fe6f8:	0424 0a09 0009 00f7 0430 0a0d 000d 00f7     $.......0.......
 23fe708:	0441 0a08 0009 00f7 044b 0e09 0009 00f7     A.......K.......
 23fe718:	045b 0a07 0109 00f7 0464 1104 0106 00f4     [.......d.......
 23fe728:	046d 1102 0204 00f4 0472 1104 0106 00f4     m.......r.......
 23fe738:	047b 0307 0109 00f9                         {.......

023fe740 <_ZL20FreeSans9pt7bBitmaps>:
 23fe740:	ffff c0f8 f7de 0920 4186 ff91 0413 20c3     ...... ..A..... 
 23fe750:	ffc8 8289 9061 1f10 da14 1e3d 4083 1778     ....a.....=..@x.
 23fe760:	f408 357a f033 2040 1038 20ec 20c6 40c6     ..z53.@ 8.. . .@
 23fe770:	40c6 806c 0039 3c01 7702 6302 6304 7704     .@l.9..<.w.c.c.w
 23fe780:	3c08 060e cc60 8119 18e0 030f c236 73d8     .<..`.......6..s
 23fe790:	3106 c4e3 13fe 6c26 cccc 66c4 1023 468c     .1....&l...f#..F
 23fe7a0:	3363 3233 4c66 2580 a57e 3000 3fc3 c330     c332fL.%~..0.?0.
 23fe7b0:	d60c c0f0 4408 1021 4284 0811 3c00 4266     .....D!..B...<fB
 23fe7c0:	c3c3 c3c3 c3c3 42c3 3c66 3f11 3333 3333     .......Bf<.?3333
 23fe7d0:	3e30 b031 3078 1c18 1c1c 1818 0810 f807     0>1.x0..........
 23fe7e0:	663c c3c3 0603 071c c303 66c3 0c3c 7118     <f.........f<..q
 23fe7f0:	c962 46a3 18fe 6030 7fc0 1020 0808 f307     b..F..0`.. .....
 23fe800:	038c 8001 6cf0 e063 311e 7898 060c 8df3     .....lc..1.x....
 23fe810:	c183 d0e0 636c ffe0 0203 0406 080c 1818     ....lc..........
 23fe820:	1018 3030 313e 78b0 1b3c f818 c1c6 f0e0     ..00>1.x<.......
 23fe830:	636c 3ce0 c266 c3c3 67c3 033b c203 3c66     lc.<f....g;...f<
 23fe840:	00c0 c030 0000 a064 8100 8ec7 070c 7080     ..0...d........p
 23fe850:	010e ff80 0080 f01f 7000 010e 18c0 7138     .........p....8q
 23fe860:	80c0 3e00 b031 3078 1818 1838 0c18 0000     ...>1.x0..8.....
 23fe870:	8001 f003 0e06 0106 0086 1d66 31bb 18cf     ..........f..1..
 23fe880:	98c7 cc63 e631 b311 cc99 86f7 0100 0080     ..c.1...........
 23fe890:	4070 e00f 0006 0ff0 9000 8119 1098 0c83     p@..............
 23fe8a0:	c23f 6004 0666 30c0 18ff 0333 6c60 830d     ?..`f..0..3.`l..
 23fe8b0:	c63f c006 0f78 e001 f86f 861f 8119 3ca0     ?...x...o......<
 23fe8c0:	8001 0630 c000 0d68 1883 f061 18ff 0333     ..0...h...a...3.
 23fe8d0:	3c60 8007 1ef0 c003 0f78 6003 f0cf e0ff     `<......x..`....
 23fe8e0:	1830 060c fd03 c080 3060 0f18 fff8 c0c0     0.......`0......
 23fe8f0:	c0c0 fec0 c0c0 c0c0 c0c0 830f 600e 0366     .............`f.
 23fe900:	0cc0 c100 03fc 36c0 6003 0f73 100f 78c0     .......6.`s....x
 23fe910:	010f 3ce0 8007 feff c003 0f78 e001 063c     ...<......x...<.
 23fe920:	ffff c0ff 0c06 3018 c160 0783 1e8f 8027     .......0`.....'.
 23fe930:	d8c0 0c33 0c63 b8c1 073f c330 6318 6006     ..3.c...?.0..c.`
 23fe940:	0c6c c0c0 c0c0 c0c0 c0c0 c0c0 c0c0 e0ff     l...............
 23fe950:	013f 1ffc fde0 ec05 636f 1379 9ecd f16c     ?.......ocy...l.
 23fe960:	8e47 713c e080 0f7c e8c1 873d f198 331e     G.<q..|...=....3
 23fe970:	78c3 076f 7ce0 0f0e 8381 0c18 6cc0 e001     .xo..|.......l..
 23fe980:	000f 0378 1bc0 9801 600c f8c0 ff00 6c30     ..x......`....0l
 23fe990:	030f f0c0 f36f c000 0c30 0003 00c0 810f     ....o...0.......
 23fe9a0:	1883 c00c 016c 0fe0 7800 c003 011b 6c98     ....l....x.....l
 23fe9b0:	c060 00fb ff08 0e8c 6cc0 c006 0c6c 8cff     `........l..l...
 23fe9c0:	c00e 066c 6cc0 c006 3f70 6c18 030f 1ec0     ..l..l..p?.l....
 23fe9d0:	f001 000e 3cf0 860d 003f 86ff 0103 c080     .....<..?.......
 23fe9e0:	3060 0c18 0306 8001 c0c0 0f78 e001 073c     `0........x...<.
 23fe9f0:	f080 031e 78c0 010f 61b0 c0f0 0d6c 1081     .....x...a..l...
 23fea00:	0c63 0461 cc60 0119 3c60 0007 c160 3081     c.a.`...`<..`..0
 23fea10:	98e1 cc70 6628 2126 3013 98c8 4c6c 3414     ..p.(f&!.0..lL.4
 23fea20:	1a0a 0707 0303 8180 6080 0c63 c130 0f98     .........`c.0...
 23fea30:	e000 0006 19f0 9801 c630 600e c060 0636     ........0..``.6.
 23fea40:	c330 190c d881 000f 0660 6000 0006 0660     0.......`..`..`.
 23fea50:	ff00 60c0 0c30 0306 c001 3060 0618 0003     ...`0.....`0....
 23fea60:	c0ff 6dfb dbb6 b66d 84e0 8410 8410 8410     ...m..m.........
 23fea70:	8010 b6ed 6ddb dbb6 30e0 a260 d844 80a1     .....m...0`.D...
 23fea80:	c0ff 30c6 717e c0b0 f360 0ddb c786 c03d     ...0~q..`.....=.
 23fea90:	60c0 1b30 36ce 070f c183 f0e0 6d7c 3ce0     .`0..6......|m.<
 23feaa0:	c366 c0c0 c0c0 66c3 033c 0303 673b c3c3     f......f<...;g..
 23feab0:	c3c3 c3c3 3b67 663c c3c3 c0ff c3c0 3c66     ....g;<f......f<
 23feac0:	6f36 6666 6666 3b60 c367 c3c3 c3c3 67c3     6offff`;g......g
 23fead0:	033b c603 c07c c0c0 e3de c3c3 c3c3 c3c3     ;...|...........
 23feae0:	c3c3 ffc3 c0ff 0330 3333 3333 3333 c0e0     ......0.333333..
 23feaf0:	3060 4c18 6346 f061 62ec 9831 306c ffff     `0.LFca..b1.l0..
 23feb00:	c0ff f7de f01c 86c7 313c 8fe1 780c c363     ........<1...xc.
 23feb10:	181e dec0 c3e3 c3c3 c3c3 c3c3 3cc3 c366     .............<f.
 23feb20:	c3c3 c3c3 66c3 de3c b071 3c78 0f1e 8307     .....f<.q.x<....
 23feb30:	6fe3 1830 000c 673b c3c3 c3c3 c3c3 3b67     .o0...;g......g;
 23feb40:	0303 df03 8c31 1863 00c6 e33e c0c0 3ce0     ....1.c...>....<
 23feb50:	c307 7ee3 f666 6666 6766 c3c3 c3c3 c3c3     ...~f.fffg......
 23feb60:	c3c3 7bc7 a0c1 cc98 2142 d0b0 1c28 000c     ...{....B!..(...
 23feb70:	1ec6 9138 cac4 d366 d016 87a6 381c c6c0     ..8...f......8..
 23feb80:	4300 3662 181c 3c1c 6226 c143 9821 42cc     .Cb6...<&bC.!..B
 23feb90:	b061 38d0 0c1c 0306 0301 fe00 300c 86c1     a..8.........0..
 23feba0:	2018 fcc1 6636 6e66 66ce 6666 ff30 ffff     . ..6ffn.fff0...
 23febb0:	c0ff 66c6 6766 6637 6666 61c0 3824          ...ffg7fff.a$8

023febbe <_ZL24FreeSansBold12pt7bGlyphs>:
 23febbe:	0000 0000 0007 0001 0000 1104 0308 00f0     ................
 23febce:	0009 060a 010b 00ef 0011 100d 000d 00f1     ................
 23febde:	002b 140d 000d 00ef 004c 1113 0115 00f0     +.......L.......
 23febee:	0075 1110 0111 00f0 0097 0604 0106 00ef     u...............
 23febfe:	009a 1606 0108 00ef 00ab 1606 0108 00ef     ................
 23fec0e:	00bc 0807 0109 00ef 00c3 0b0b 020e 00f6     ................
 23fec1e:	00d3 0704 0106 00fe 00d7 0306 0108 00f9     ................
 23fec2e:	00da 0304 0106 00fe 00dc 1106 0007 00f0     ................
 23fec3e:	00e9 110c 010d 00f0 0103 1107 030e 00f0     ................
 23fec4e:	0112 110c 010d 00f0 012c 110c 010d 00f0     ........,.......
 23fec5e:	0146 110b 010d 00f0 015e 110c 010d 00f0     F.......^.......
 23fec6e:	0178 110c 010d 00f0 0192 110b 010d 00f0     x...............
 23fec7e:	01aa 110c 010d 00f0 01c4 110c 010d 00f0     ................
 23fec8e:	01de 0c04 0106 00f5 01e4 1004 0106 00f5     ................
 23fec9e:	01ec 0c0c 010e 00f5 01fe 090c 010e 00f7     ................
 23fecae:	020c 0c0c 010e 00f5 021e 120c 020f 00ef     ................
 23fecbe:	0239 1515 0117 00ef 0271 1210 0011 00ef     9.......q.......
 23fecce:	0295 120e 0211 00ef 02b5 1210 0111 00ef     ................
 23fecde:	02d9 120f 0211 00ef 02fb 120d 0210 00ef     ................
 23fecee:	0319 120c 020f 00ef 0334 1210 0112 00ef     ........4.......
 23fecfe:	0358 120e 0212 00ef 0378 1204 0207 00ef     X.......x.......
 23fed0e:	0381 120b 010e 00ef 039a 1210 0211 00ef     ................
 23fed1e:	03be 120b 020f 00ef 03d7 1211 0215 00ef     ................
 23fed2e:	03fe 120f 0212 00ef 0420 1211 0113 00ef     ........ .......
 23fed3e:	0447 120e 0210 00ef 0467 1311 0113 00ef     G.......g.......
 23fed4e:	0490 1210 0211 00ef 04b4 120f 0110 00ef     ................
 23fed5e:	04d6 120c 020f 00ef 04f1 120e 0212 00ef     ................
 23fed6e:	0511 120f 0010 00ef 0533 1217 0017 00ef     ........3.......
 23fed7e:	0567 120f 0110 00ef 0589 1210 000f 00ef     g...............
 23fed8e:	05ad 120d 010f 00ef 05cb 1706 0208 00ef     ................
 23fed9e:	05dd 1107 0007 00f0 05ec 1706 0008 00ef     ................
 23fedae:	05fe 0b0c 010e 00f0 060f 020f ff0d 0004     ................
 23fedbe:	0613 0304 0006 00ef 0615 0d0d 010e 00f4     ................
 23fedce:	062b 120d 020f 00ef 0649 0d0c 010d 00f4     +.......I.......
 23fedde:	065d 120d 010f 00ef 067b 0d0d 010e 00f4     ].......{.......
 23fedee:	0691 1207 0108 00ef 06a1 120d 010f 00f4     ................
 23fedfe:	06bf 120c 020e 00ef 06da 1204 0207 00ef     ................
 23fee0e:	06e3 1706 0007 00ef 06f5 120c 020e 00ef     ................
 23fee1e:	0710 1204 0206 00ef 0719 0d13 0215 00f4     ................
 23fee2e:	0738 0d0c 020f 00f4 074c 0d0d 010f 00f4     8.......L.......
 23fee3e:	0762 120d 020f 00f4 0780 120d 010f 00f4     b...............
 23fee4e:	079e 0d08 0209 00f4 07ab 0d0c 010d 00f4     ................
 23fee5e:	07bf 0f06 0108 00f2 07cb 0d0c 020f 00f4     ................
 23fee6e:	07df 0d0d 000d 00f4 07f5 0d12 0013 00f4     ................
 23fee7e:	0813 0d0d 000d 00f4 0829 120d 000d 00f4     ........).......
 23fee8e:	0847 0d0a 010c 00f4 0858 1706 0109 00ef     G.......X.......
 23fee9e:	086a 1602 0207 00ef 0870 1706 0309 00ef     j.......p.......
 23feeae:	0882 050c 000c 00f9                         ........

023feeb6 <_ZL25FreeSansBold12pt7bBitmaps>:
 23feeb6:	ffff ffff 6676 ff60 f3f0 fffc cf3f 9861     ....vf`.....?.a.
 23feec6:	0e60 7370 1883 f7ff bfff 73fc 1883 c718     `.ps.......s....
 23feed6:	bfff fffd 18e3 c139 0ece 0270 7e00 f80f     ......9...p..~..
 23feee6:	e77f b9af c83d 400f 003f 00ff 05fc 27ff     ....=..@?......'
 23feef6:	3ff9 efeb 3ffe 7ce0 8000 0004 063c c10f     .?...?.|....<...
 23fef06:	fc81 7330 0c8c 8131 60ce cc1f f303 3c00     ..0s..1..`.....<
 23fef16:	8067 f819 7f02 ce80 1170 0686 c139 f887     g.......p...9...
 23fef26:	7e30 070c 0780 1f80 3fc0 3ce0 3ce0 3ee0     0~.......?.<.<.>
 23fef36:	0fe0 07c0 3f00 7f8c f1cc f0fc f0f8 f878     .....?........x.
 23fef46:	7ff8 3ffc 1fde ff8e 66ff 730c 718e 38c7     ...?.....f.s.q.8
 23fef56:	8ee3 e338 1c8e c371 188e c370 1c87 e338     ..8...q...p...8.
 23fef66:	1c87 c771 711c 38ce 1ce7 8063 2310 f35f     ..q..q.8..c..#_.
 23fef76:	1b87 0e14 c001 0738 ff0f ffff 70f8 010e     ......8......p..
 23fef86:	38c0 ff00 36f3 ffc0 c0ff f0ff 300c 1886     .8...6.......0..
 23fef96:	0c61 c230 6118 3084 1fc0 fc83 e77f f09e     a.0..a.0........
 23fefa6:	0fff fff0 f00f 0fff fff0 f00f 9ef7 e37f     ................
 23fefb6:	0ffc 0600 7f1c e3ff 8fc7 3c1e f178 c7e3     ...........<x...
 23fefc6:	1e8f 831f 7ffc 9fef fff0 000f 0ff0 e001     ................
 23fefd6:	0f3c e081 033c 7f80 fff7 f07f 071f fffc     <...<...........
 23fefe6:	1eef e0f1 031e 78c0 c007 001e 0ff0 fff0     .......x........
 23feff6:	7f1f fce7 801f c003 1ff8 e107 27bc f38c     .............'..
 23ff006:	631e 7bd8 ffff feff 8007 1ef0 c003 e73f     .c.{..........?.
 23ff016:	7ffe 00e7 0660 7ff8 fecf f0f1 000f 0ff0     ....`...........
 23ff026:	fe00 ff1e fce7 003f 830f 7ffc 9fe7 0ff0     ......?.........
 23ff036:	ff78 fecf fff9 f00f 0fff f7f0 7f9f fce3     x...............
 23ff046:	800f ffff ffff e080 071c e001 0f38 c001     ............8...
 23ff056:	0f78 e001 0f38 e001 003c 030f 7ffc 9ec7     x...8...<.......
 23ff066:	e770 390e f8c1 c73f f09e 0fff fff0 7f9f     p..9..?.........
 23ff076:	fce3 801f 031f 7ffc 9eef eff0 f00f 0fff     ................
 23ff086:	f7f9 3fff eff1 ef00 7f1e fce7 001f f0ff     ...?............
 23ff096:	0000 ff0f f0ff 0000 ff0f 6c11 1000 0307     ...........l....
 23ff0a6:	fcf1 0f7e e080 c00f 803f 007f 03f0 ffff     ..~.....?.......
 23ff0b6:	ffff 00f0 0000 ff00 ffff f0ff 0e00 fc00     ................
 23ff0c6:	f007 e00f 001f 7ff0 8f1f f0e0 0008 071f     ................
 23ff0d6:	7ffc 9fef fff0 000f 0ff0 e001 073c f080     ............<...
 23ff0e6:	000e 00e0 f000 000f 00f0 00fe fc1f c003     ................
 23ff0f6:	38f0 c301 0780 3d18 8799 6cec c371 06c3     .8.....=...lq...
 23ff106:	181e f130 8781 188c 607c 63c3 3b8e df8f     ..0.....|`.c.;..
 23ff116:	3c8c 70f0 0100 00c0 8007 1f80 00fe c01f     .<.p............
 23ff126:	0300 03e0 03e0 07e0 07f0 07f0 0f70 0e78     ............p.x.
 23ff136:	0e78 1e38 1c3c 3f3c 3ffc 3ffe 78fe 780e     x.8.<.<?.?.?.x.x
 23ff146:	700f f00f ff07 ffc3 ffcf 3e3c 7bf0 efc1     .p........<>.{..
 23ff156:	bf0f fffc ffe3 07cf 0fbc 3ff0 ffc0 ff07     ...........?....
 23ff166:	fffe fffb 0780 1fe0 3ff8 7cfc 783e f81f     .........?.|>x..
 23ff176:	f00f f000 f000 f000 f000 f000 f800 780f     ...............x
 23ff186:	7c1f 3f3e 1ffe 07fc fff0 ffe1 ffe3 83e7     .|>?............
 23ff196:	03ef 07de 07fc 0ff8 1ff0 3fe0 7fc0 ff80     ...........?....
 23ff1a6:	fe03 bc07 7f1f fffc fff1 ff80 fff7 fdbf     ................
 23ff1b6:	0fe0 7800 c003 fc1f e7ff 3cff e001 000f     ...x.......<....
 23ff1c6:	0378 1fc0 ffff ffff ffc0 ffff ffff f000     x...............
 23ff1d6:	000f 0ff0 fffe feef 0ff0 f000 000f 0ff0     ................
 23ff1e6:	f000 000f f003 fc0f fe3f 1f3e 0778 0078     ........?.>.x.x.
 23ff1f6:	00f0 00f0 7ff0 7ff0 7ff0 07f0 0778 0f7c     ............x.|.
 23ff206:	1f3e fb3f fb0f e303 3ff0 ffc0 fc03 f00f     >.?......?......
 23ff216:	c03f 03ff ffff ffff ffff fc03 f00f c03f     ?.............?.
 23ff226:	03ff 0ffc 3ff0 f0c0 ffff ffff ffff ffff     .....?..........
 23ff236:	01ff 3ce0 8007 1ef0 c003 0f78 e001 073c     ...<......x...<.
 23ff246:	fff8 e31f 7bfc 7ffe e0c3 3ef0 3cf0 78f0     .....{.....>.<.x
 23ff256:	f0f0 e0f1 c0f3 80f7 00ff 80ff 80ff c0fb     ................
 23ff266:	e0f1 f0f0 f0f0 78f0 3cf0 3ef0 1ef0 1ef0     .......x.<.>....
 23ff276:	c003 0f78 e001 073c f080 031e 78c0 010f     ..x...<......x..
 23ff286:	3ce0 ff07 ffff f8fc fe1f ff0f ff0f ff87     .<..............
 23ff296:	ffc3 ffe1 fff9 effc 77fe 3bfb ddfd fcfe     .........w.;....
 23ff2a6:	7eff 9f7f cf3f e79f f38f f8c7 c0e3 1ff0     .~..?...........
 23ff2b6:	3ff0 7ff0 ffe0 ffe1 fdc3 fbc7 f38f e79f     .?..............
 23ff2c6:	c73f 8f7f 0fff 1ffe 1ffc 1ff8 3ff0 3ce0     ?............?.<
 23ff2d6:	e003 fc0f ff0f c787 80c7 c0f3 c07b e01f     ............{...
 23ff2e6:	f00f f807 fc03 fe01 f700 f380 78c0 f8f0     .............x..
 23ff2f6:	fc7f fc1f f803 ff00 ffe3 ffef 1fbc 3ff0     ...............?
 23ff306:	ffc0 fc03 ff1f fffb fecf 003c 03f0 0fc0     ..........<.....
 23ff316:	3c00 f000 c003 0300 0fe0 0ffc 87ff c7c7     .<..............
 23ff326:	f380 7bc0 1fc0 0fe0 07f0 03f8 01fc 04fe     ...{............
 23ff336:	87f7 c3f3 f0f8 7ff8 1ffc 83ff 80f1 0000     ................
 23ff346:	f8ff fcff fcff 3ef0 1ef0 1ef0 1ef0 3cf0     .......>.......<
 23ff356:	f8ff f0ff f8ff 3cf0 3cf0 3cf0 3cf0 3cf0     .......<.<.<.<.<
 23ff366:	3cf0 1ff0 c00f e17f e7ff efc3 de03 3c00     .<.............<
 23ff376:	7f00 7f00 3ff0 0ff8 01f8 01f0 03fe 0fde     .....?..........
 23ff386:	febf f83f c01f ffff ffff f0f0 000f 0ff0     ..?.............
 23ff396:	f000 000f 0ff0 f000 000f 0ff0 f000 000f     ................
 23ff3a6:	f0f0 c03f 03ff 0ffc 3ff0 ffc0 fc03 f00f     ..?......?......
 23ff3b6:	c03f 03ff 0ffc 3ff0 f7c0 9f87 3ffe 3ff0     ?......?.....?.?
 23ff3c6:	7000 f00e e03d c079 81e3 87c7 0e87 1c0e     .p..=.y.........
 23ff3d6:	781e e01c c039 8073 007e 01fc 01f8 03e0     .x..9.s.~.......
 23ff3e6:	07c0 7080 1c38 f0e0 e179 f3f0 e1c3 87e3     ...p8...y.......
 23ff3f6:	87c3 870f 3b0e 1e9e 3877 ee1c 3970 e0cc     .....;..w8..p9..
 23ff406:	9973 6ec0 003f 7efc f801 03fc f8f0 e103     s..n?..~........
 23ff416:	07e0 c083 070f f080 f03c e1f9 e7e1 cf83     ........<.......
 23ff426:	fc03 f003 e007 8007 000f 003f 01ff 07fe     ..........?.....
 23ff436:	0f9e 3c1e f83c e03d f078 781e 781e 3c3c     ...<<.=.x..x.x<<
 23ff446:	3c3c 1e78 0e78 0f70 07f0 07e0 03e0 03c0     <<x.x.p.........
 23ff456:	03c0 03c0 03c0 03c0 03c0 03c0 ffc0 ffff     ................
 23ff466:	feff f001 000f 0ff0 f800 8007 0778 7c80     ............x..|
 23ff476:	c003 033c 1fc0 ffff ffff ffc0 fcff cff3     ..<.............
 23ff486:	f33c 3ccf cff3 f33c 3ccf ffff c1c0 0381     <..<..<..<......
 23ff496:	0406 180c 3010 4060 81c1 0603 ffff 3ccf     .....0`@.......<
 23ff4a6:	cff3 f33c 3ccf cff3 f33c ffcf c0ff 000f     ..<..<..<.......
 23ff4b6:	0ff0 f801 831b 399c 0cc3 e770 e00e ff70     .......9..p...p.
 23ff4c6:	ffff e6fc 1f30 ff83 fd1f e0e1 030f fff9     ....0...........
 23ff4d6:	1edf f7f0 bf8f fffc cfe3 f080 8007 013c     ..............<.
 23ff4e6:	0fe0 7b00 ffc3 fe9f f7f8 fc83 e01f 07ff     ...{............
 23ff4f6:	3ff8 dfe3 fffe bee7 0f00 fe83 f77f f08f     .?..............
 23ff506:	007f 0ff0 f000 8f77 f37f 0ffe 0080 0378     ......w.......x.
 23ff516:	1ec0 f000 8f07 ffbc ffef ff78 fc83 e01f     ..........x.....
 23ff526:	07ff 3df8 efe3 3fff fbf8 1fc0 fe81 f91f     ...=...?........
 23ff536:	cff1 7f07 fffb 00de 03f0 9fc3 7ffc f8c0     ................
 23ff546:	3e00 fbfd 9fc7 3cbf f178 c7e3 1e8f 783c     .>.....<x.....<x
 23ff556:	1ef0 fb79 fedf fff1 f807 c13f 0ffe 7ff0     ..y.......?.....
 23ff566:	dfc7 7ffe f7f1 3c80 ff01 7f1e fef0 f000     .......<........
 23ff576:	000f 0ff0 f000 7c0f efff f9ff 0fff fff0     .......|........
 23ff586:	f00f 0fff fff0 f00f 0fff f0ff ff0f ffff     ................
 23ff596:	ffff 3cff c0f3 f300 3ccf cff3 f33c 3ccf     ...<.....<..<..<
 23ff5a6:	cff3 ffff f080 000f 0ff0 f000 0f0f eff1     ................
 23ff5b6:	f73c f08f 0fff fff8 3c8f cff1 f01e 0fef     <........<......
 23ff5c6:	ffff ffff ffff ffff f7ff 9f8f fbfb ffff     ................
 23ff5d6:	f8fc 1eff e31f fcc3 7f78 0f8f e1f1 3cfe     ........x......<
 23ff5e6:	c73f f887 fff0 1e1e cff7 fffe 9fff fff0     ?...............
 23ff5f6:	f00f 0fff fff0 f00f 0fff f0f0 810f 1fff     ................
 23ff606:	f1fc 07ef 3ff8 fec1 f00f c77b fc9f c07f     .....?....{.....
 23ff616:	00f8 c7f7 3fff f1fd 07ef 3ff8 fec1 f00f     .....?.....?....
 23ff626:	c77f fdbf cfff 7878 c003 001e 07f0 0080     ......xx........
 23ff636:	790f dfff f1fe 07ff 3ff8 fec1 f00f c77b     .y.......?....{.
 23ff646:	fedf f17f 80f7 013c 0fe0 7800 c003 f7f3     ......<....x....
 23ff656:	f8ff f0f0 f0f0 f0f0 f0f0 1ff0 fc87 efff     ................
 23ff666:	f80f f00f e07f 01ff 0fff e7ff 1ffe 7980     ...............y
 23ff676:	bfe7 e7fd 799e 9ee7 f37d f0c0 0fff fff0     .....y..}.......
 23ff686:	f00f 0fff fff0 f00f 1fff f7ff 3eff f0f0     .............>..
 23ff696:	837b 1c9e e3f1 1c8e 7770 b883 c01d 037e     {.......pw....~.
 23ff6a6:	1fe0 7000 f000 dce1 7778 3d1f cfe7 b379     ...p....xw.=..y.
 23ff6b6:	6c8e bbe3 ee38 1ffc 073f c1c7 f0f1 787c     .l..8...?.....|x
 23ff6c6:	1e0e 7800 c7f3 788f 813b 07fc 1ec0 f001     ...x...x;.......
 23ff6d6:	c01f 0fef f178 87e7 f000 837b 1c9e e371     ....x.....{...q.
 23ff6e6:	1e8e 7370 b883 c01f 037e 0fe0 7000 8003     ..ps....~....p..
 23ff6f6:	073c 3ec0 e001 ff00 ffff 0ffc 8307 e0c1     <..>............
 23ff706:	78f0 0f3c ffff c0ff f31c 38ce 8ee3 e338     .x<........8..8.
 23ff716:	f0bc 8ee3 e338 3c8e c0f1 ffff ffff f0ff     ....8..<........
 23ff726:	8fe3 711c 1cc7 c771 3d0f 1cc7 c771 f31c     ...q..q..=..q...
 23ff736:	00ce 0f78 cfe0 7f30 e001                    ..x...0...

023ff740 <_ZL4font>:
 23ff740:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 23ff750:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 23ff760:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 23ff770:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 23ff780:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 23ff790:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 23ff7a0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 23ff7b0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 23ff7c0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 23ff7d0:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 23ff7e0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 23ff7f0:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 23ff800:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 23ff810:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 23ff820:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 23ff830:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 23ff840:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 23ff850:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 23ff860:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 23ff870:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 23ff880:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 23ff890:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 23ff8a0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 23ff8b0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 23ff8c0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 23ff8d0:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 23ff8e0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 23ff8f0:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 23ff900:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 23ff910:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 23ff920:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 23ff930:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 23ff940:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 23ff950:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 23ff960:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 23ff970:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 23ff980:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 23ff990:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 23ff9a0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 23ff9b0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 23ff9c0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 23ff9d0:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 23ff9e0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 23ff9f0:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 23ffa00:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 23ffa10:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 23ffa20:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 23ffa30:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 23ffa40:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 23ffa50:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 23ffa60:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 23ffa70:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 23ffa80:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 23ffa90:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 23ffaa0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 23ffab0:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 23ffac0:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 23ffad0:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 23ffae0:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 23ffaf0:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 23ffb00:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 23ffb10:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 23ffb20:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 23ffb30:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 23ffb40:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 23ffb50:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 23ffb60:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 23ffb70:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 23ffb80:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 23ffb90:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 23ffba0:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 23ffbb0:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 23ffbc0:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 23ffbd0:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 23ffbe0:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 23ffbf0:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 23ffc00:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 23ffc10:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 23ffc20:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 23ffc30:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

023ffc40 <_ZTV12Adafruit_GFX>:
	...
 23ffc50:	c0dd 023f d769 023f b3c5 023f bb8f 023f     ..?.i.?...?...?.
 23ffc60:	bb91 023f bbc3 023f bb9f 023f bbb1 023f     ..?...?...?...?.
 23ffc70:	bad1 023f bb8f 023f bdb9 023f bdb7 023f     ..?...?...?...?.
 23ffc80:	bbdb 023f bc19 023f bc53 023f bc99 023f     ..?...?.S.?...?.
 23ffc90:	bcb5 023f bd37 023f                         ..?.7.?.

023ffc98 <_ZTV15Adafruit_SPITFT>:
	...
 23ffca8:	c0dd 023f d769 023f c981 023f c417 023f     ..?.i.?...?...?.
 23ffcb8:	c943 023f c537 023f c7ef 023f c797 023f     C.?.7.?...?...?.
 23ffcc8:	bad1 023f c443 023f bdb9 023f c8bd 023f     ..?.C.?...?...?.
 23ffcd8:	c71b 023f c69b 023f c5d7 023f bc99 023f     ..?...?...?...?.
 23ffce8:	bcb5 023f bd37 023f b3c5 023f b3c5 023f     ..?.7.?...?...?.

023ffcf8 <_ZL11cmd_240x240>:
 23ffcf8:	0109 9680 8011 3aff 5581 360a 0801 042a     .......:.U.6..*.
 23ffd08:	0000 f000 042b 0000 f000 8021 130a 0a80     ....+.....!.....
 23ffd18:	8029 00ff                                   )...

023ffd1c <_ZTV15Adafruit_ST7789>:
	...
 23ffd24:	ca47 023f caaf 023f c0dd 023f d769 023f     G.?...?...?.i.?.
 23ffd34:	c981 023f c417 023f c943 023f c537 023f     ..?...?.C.?.7.?.
 23ffd44:	c7ef 023f c797 023f bad1 023f c443 023f     ..?...?...?.C.?.
 23ffd54:	ca49 023f c8bd 023f c71b 023f c69b 023f     I.?...?...?...?.
 23ffd64:	c5d7 023f bc99 023f bcb5 023f bd37 023f     ..?...?...?.7.?.
 23ffd74:	cb79 023f cb99 023f                         y.?...?.

023ffd7c <_ZTV15Adafruit_ST77xx>:
	...
 23ffd84:	cb05 023f cbeb 023f c0dd 023f d769 023f     ..?...?...?.i.?.
 23ffd94:	c981 023f c417 023f c943 023f c537 023f     ..?...?.C.?.7.?.
 23ffda4:	c7ef 023f c797 023f bad1 023f c443 023f     ..?...?...?.C.?.
 23ffdb4:	cb07 023f c8bd 023f c71b 023f c69b 023f     ..?...?...?...?.
 23ffdc4:	c5d7 023f bc99 023f bcb5 023f bd37 023f     ..?...?...?.7.?.
 23ffdd4:	cb79 023f cb99 023f                         y.?...?.

023ffddc <_ZTVN5spark13EthernetClassE>:
	...
 23ffde4:	d453 023f d449 023f d43f 023f d435 023f     S.?.I.?.?.?.5.?.
 23ffdf4:	d429 023f d41d 023f d645 023f d64d 023f     ).?...?.E.?.M.?.
 23ffe04:	d411 023f d409 023f d3ff 023f d3f5 023f     ..?...?...?...?.
 23ffe14:	d67d 023f                                   }.?.

023ffe18 <_ZTV7TwoWire>:
	...
 23ffe20:	d471 023f d4bb 023f d493 023f d473 023f     q.?...?...?.s.?.
 23ffe30:	d49b 023f d4a3 023f d4ab 023f d4b3 023f     ..?...?...?...?.

023ffe40 <_ZTV9IPAddress>:
	...
 23ffe48:	d515 023f d505 023f d507 023f 7061 0070     ..?...?...?.app.

023ffe58 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe60:	d605 023f d60f 023f d619 023f d623 023f     ..?...?...?.#.?.
 23ffe70:	d62d 023f d639 023f d645 023f d64d 023f     -.?.9.?.E.?.M.?.
 23ffe80:	d655 023f d661 023f d669 023f d673 023f     U.?.a.?.i.?.s.?.
 23ffe90:	d67d 023f 616e 006e 6e69 0066 766f 0066     }.?.nan.inf.ovf.
 23ffea0:	002e                                        ..

023ffea2 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffea2:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 23ffeb2:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 23ffec2:	6d69 0065 0000                              ime...

023ffec8 <_ZTV11USARTSerial>:
	...
 23ffed0:	dbbd 023f dc29 023f dc01 023f d769 023f     ..?.).?...?.i.?.
 23ffee0:	dbd1 023f dbed 023f dbdf 023f dbfb 023f     ..?...?...?...?.
 23ffef0:	dbbf 023f dbc3 023f                         ..?...?.

023ffef8 <_ZTV9USBSerial>:
	...
 23fff00:	dc6d 023f dcd5 023f dcab 023f d769 023f     m.?...?...?.i.?.
 23fff10:	dc9d 023f dc6f 023f dc7f 023f dccf 023f     ..?.o.?...?...?.
 23fff20:	dc8f 023f dc67 023f                         ..?.g.?.

023fff28 <_ZTVN5spark9WiFiClassE>:
	...
 23fff30:	ddcb 023f ddc1 023f ddb7 023f dd6d 023f     ..?...?...?.m.?.
 23fff40:	ddab 023f dd9f 023f d645 023f d64d 023f     ..?...?.E.?.M.?.
 23fff50:	dd93 023f dd8b 023f dd81 023f dd77 023f     ..?...?...?.w.?.
 23fff60:	d67d 023f                                   }.?.

023fff64 <_ZSt7nothrow>:
 23fff64:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff74:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff84:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff94:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fffa4:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffb4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffc4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffd5 <link_const_data_end>:
 23fffd5:	00          	.byte	0x00
	...

023fffd8 <link_constructors_location>:
 23fffd8:	023fbac1 	.word	0x023fbac1
 23fffdc:	023fd3e5 	.word	0x023fd3e5
 23fffe0:	023fd45d 	.word	0x023fd45d
 23fffe4:	023fd5f5 	.word	0x023fd5f5
 23fffe8:	023fd755 	.word	0x023fd755
 23fffec:	023fda15 	.word	0x023fda15
 23ffff0:	023fdb85 	.word	0x023fdb85
 23ffff4:	023fdba9 	.word	0x023fdba9
 23ffff8:	023fddd5 	.word	0x023fddd5
