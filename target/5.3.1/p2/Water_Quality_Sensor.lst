
/Users/friedl/Desktop/Projects/Water_Quality_Sensor/target/5.3.1/p2/Water_Quality_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fc000  085fc000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fc018  085fc018  0000c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085fc084  085fc084  0000c084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023fcd80  085fc090  0000cd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   00003274  023fcd88  085fc098  0000cd88  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  5 .data_alt     00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  7 .data         00000074  1007acf4  085ff30c  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000280  1007ad68  1007ad68  0002ad68  2**2
                  ALLOC
  9 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ff380  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 00000c34  085ff384  085ff384  0001f384  2**0
                  ALLOC
 12 .module_info_product 00000006  085fffb8  085fffb8  0001f384  2**0
                  ALLOC
 13 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   0011ad14  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000125de  00000000  00000000  0013ad14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0003c1da  00000000  00000000  0014d2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002b50  00000000  00000000  001894cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000b248  00000000  00000000  0018c01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002344d  00000000  00000000  00197264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003d549  00000000  00000000  001ba6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000c8a50  00000000  00000000  001f7bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00007dac  00000000  00000000  002c064c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fc018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc018:	480e      	ldr	r0, [pc, #56]	; (85fc054 <module_user_pre_init+0x3c>)
 85fc01a:	490f      	ldr	r1, [pc, #60]	; (85fc058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fc01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc01e:	4288      	cmp	r0, r1
 85fc020:	d005      	beq.n	85fc02e <module_user_pre_init+0x16>
 85fc022:	4a0e      	ldr	r2, [pc, #56]	; (85fc05c <module_user_pre_init+0x44>)
 85fc024:	4282      	cmp	r2, r0
 85fc026:	d002      	beq.n	85fc02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fc028:	4b0d      	ldr	r3, [pc, #52]	; (85fc060 <module_user_pre_init+0x48>)
 85fc02a:	1a12      	subs	r2, r2, r0
 85fc02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fc02e:	480d      	ldr	r0, [pc, #52]	; (85fc064 <module_user_pre_init+0x4c>)
 85fc030:	4a0d      	ldr	r2, [pc, #52]	; (85fc068 <module_user_pre_init+0x50>)
 85fc032:	2100      	movs	r1, #0
 85fc034:	4b0d      	ldr	r3, [pc, #52]	; (85fc06c <module_user_pre_init+0x54>)
 85fc036:	1a12      	subs	r2, r2, r0
 85fc038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fc03a:	480d      	ldr	r0, [pc, #52]	; (85fc070 <module_user_pre_init+0x58>)
 85fc03c:	490d      	ldr	r1, [pc, #52]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc03e:	4288      	cmp	r0, r1
 85fc040:	d005      	beq.n	85fc04e <module_user_pre_init+0x36>
 85fc042:	4a0d      	ldr	r2, [pc, #52]	; (85fc078 <module_user_pre_init+0x60>)
 85fc044:	4282      	cmp	r2, r0
 85fc046:	d002      	beq.n	85fc04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fc048:	4b05      	ldr	r3, [pc, #20]	; (85fc060 <module_user_pre_init+0x48>)
 85fc04a:	1a12      	subs	r2, r2, r0
 85fc04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fc04e:	4801      	ldr	r0, [pc, #4]	; (85fc054 <module_user_pre_init+0x3c>)
 85fc050:	bd08      	pop	{r3, pc}
 85fc052:	bf00      	nop
 85fc054:	1007acf4 	.word	0x1007acf4
 85fc058:	085ff30c 	.word	0x085ff30c
 85fc05c:	1007ad68 	.word	0x1007ad68
 85fc060:	10110d2d 	.word	0x10110d2d
 85fc064:	1007ad68 	.word	0x1007ad68
 85fc068:	1007afe8 	.word	0x1007afe8
 85fc06c:	10110ea1 	.word	0x10110ea1
 85fc070:	023fcd80 	.word	0x023fcd80
 85fc074:	085fc090 	.word	0x085fc090
 85fc078:	023ffffc 	.word	0x023ffffc

085fc07c <dynalib_preinit>:
 85fc07c:	085fc019 00000000                       .._.....

Disassembly of section .psram_text:

023fcd88 <__aeabi_drsub>:
 23fcd88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fcd8c:	e002      	b.n	23fcd94 <__adddf3>
 23fcd8e:	bf00      	nop

023fcd90 <__aeabi_dsub>:
 23fcd90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fcd94 <__adddf3>:
 23fcd94:	b530      	push	{r4, r5, lr}
 23fcd96:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fcd9a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fcd9e:	ea94 0f05 	teq	r4, r5
 23fcda2:	bf08      	it	eq
 23fcda4:	ea90 0f02 	teqeq	r0, r2
 23fcda8:	bf1f      	itttt	ne
 23fcdaa:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fcdae:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fcdb2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fcdb6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fcdba:	f000 80e2 	beq.w	23fcf82 <__adddf3+0x1ee>
 23fcdbe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fcdc2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fcdc6:	bfb8      	it	lt
 23fcdc8:	426d      	neglt	r5, r5
 23fcdca:	dd0c      	ble.n	23fcde6 <__adddf3+0x52>
 23fcdcc:	442c      	add	r4, r5
 23fcdce:	ea80 0202 	eor.w	r2, r0, r2
 23fcdd2:	ea81 0303 	eor.w	r3, r1, r3
 23fcdd6:	ea82 0000 	eor.w	r0, r2, r0
 23fcdda:	ea83 0101 	eor.w	r1, r3, r1
 23fcdde:	ea80 0202 	eor.w	r2, r0, r2
 23fcde2:	ea81 0303 	eor.w	r3, r1, r3
 23fcde6:	2d36      	cmp	r5, #54	; 0x36
 23fcde8:	bf88      	it	hi
 23fcdea:	bd30      	pophi	{r4, r5, pc}
 23fcdec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fcdf0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fcdf4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fcdf8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fcdfc:	d002      	beq.n	23fce04 <__adddf3+0x70>
 23fcdfe:	4240      	negs	r0, r0
 23fce00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fce04:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fce08:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fce0c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fce10:	d002      	beq.n	23fce18 <__adddf3+0x84>
 23fce12:	4252      	negs	r2, r2
 23fce14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fce18:	ea94 0f05 	teq	r4, r5
 23fce1c:	f000 80a7 	beq.w	23fcf6e <__adddf3+0x1da>
 23fce20:	f1a4 0401 	sub.w	r4, r4, #1
 23fce24:	f1d5 0e20 	rsbs	lr, r5, #32
 23fce28:	db0d      	blt.n	23fce46 <__adddf3+0xb2>
 23fce2a:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fce2e:	fa22 f205 	lsr.w	r2, r2, r5
 23fce32:	1880      	adds	r0, r0, r2
 23fce34:	f141 0100 	adc.w	r1, r1, #0
 23fce38:	fa03 f20e 	lsl.w	r2, r3, lr
 23fce3c:	1880      	adds	r0, r0, r2
 23fce3e:	fa43 f305 	asr.w	r3, r3, r5
 23fce42:	4159      	adcs	r1, r3
 23fce44:	e00e      	b.n	23fce64 <__adddf3+0xd0>
 23fce46:	f1a5 0520 	sub.w	r5, r5, #32
 23fce4a:	f10e 0e20 	add.w	lr, lr, #32
 23fce4e:	2a01      	cmp	r2, #1
 23fce50:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fce54:	bf28      	it	cs
 23fce56:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fce5a:	fa43 f305 	asr.w	r3, r3, r5
 23fce5e:	18c0      	adds	r0, r0, r3
 23fce60:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fce64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fce68:	d507      	bpl.n	23fce7a <__adddf3+0xe6>
 23fce6a:	f04f 0e00 	mov.w	lr, #0
 23fce6e:	f1dc 0c00 	rsbs	ip, ip, #0
 23fce72:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fce76:	eb6e 0101 	sbc.w	r1, lr, r1
 23fce7a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fce7e:	d31b      	bcc.n	23fceb8 <__adddf3+0x124>
 23fce80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fce84:	d30c      	bcc.n	23fcea0 <__adddf3+0x10c>
 23fce86:	0849      	lsrs	r1, r1, #1
 23fce88:	ea5f 0030 	movs.w	r0, r0, rrx
 23fce8c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fce90:	f104 0401 	add.w	r4, r4, #1
 23fce94:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fce98:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fce9c:	f080 809a 	bcs.w	23fcfd4 <__adddf3+0x240>
 23fcea0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fcea4:	bf08      	it	eq
 23fcea6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fceaa:	f150 0000 	adcs.w	r0, r0, #0
 23fceae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fceb2:	ea41 0105 	orr.w	r1, r1, r5
 23fceb6:	bd30      	pop	{r4, r5, pc}
 23fceb8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fcebc:	4140      	adcs	r0, r0
 23fcebe:	eb41 0101 	adc.w	r1, r1, r1
 23fcec2:	3c01      	subs	r4, #1
 23fcec4:	bf28      	it	cs
 23fcec6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fceca:	d2e9      	bcs.n	23fcea0 <__adddf3+0x10c>
 23fcecc:	f091 0f00 	teq	r1, #0
 23fced0:	bf04      	itt	eq
 23fced2:	4601      	moveq	r1, r0
 23fced4:	2000      	moveq	r0, #0
 23fced6:	fab1 f381 	clz	r3, r1
 23fceda:	bf08      	it	eq
 23fcedc:	3320      	addeq	r3, #32
 23fcede:	f1a3 030b 	sub.w	r3, r3, #11
 23fcee2:	f1b3 0220 	subs.w	r2, r3, #32
 23fcee6:	da0c      	bge.n	23fcf02 <__adddf3+0x16e>
 23fcee8:	320c      	adds	r2, #12
 23fceea:	dd08      	ble.n	23fcefe <__adddf3+0x16a>
 23fceec:	f102 0c14 	add.w	ip, r2, #20
 23fcef0:	f1c2 020c 	rsb	r2, r2, #12
 23fcef4:	fa01 f00c 	lsl.w	r0, r1, ip
 23fcef8:	fa21 f102 	lsr.w	r1, r1, r2
 23fcefc:	e00c      	b.n	23fcf18 <__adddf3+0x184>
 23fcefe:	f102 0214 	add.w	r2, r2, #20
 23fcf02:	bfd8      	it	le
 23fcf04:	f1c2 0c20 	rsble	ip, r2, #32
 23fcf08:	fa01 f102 	lsl.w	r1, r1, r2
 23fcf0c:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fcf10:	bfdc      	itt	le
 23fcf12:	ea41 010c 	orrle.w	r1, r1, ip
 23fcf16:	4090      	lslle	r0, r2
 23fcf18:	1ae4      	subs	r4, r4, r3
 23fcf1a:	bfa2      	ittt	ge
 23fcf1c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fcf20:	4329      	orrge	r1, r5
 23fcf22:	bd30      	popge	{r4, r5, pc}
 23fcf24:	ea6f 0404 	mvn.w	r4, r4
 23fcf28:	3c1f      	subs	r4, #31
 23fcf2a:	da1c      	bge.n	23fcf66 <__adddf3+0x1d2>
 23fcf2c:	340c      	adds	r4, #12
 23fcf2e:	dc0e      	bgt.n	23fcf4e <__adddf3+0x1ba>
 23fcf30:	f104 0414 	add.w	r4, r4, #20
 23fcf34:	f1c4 0220 	rsb	r2, r4, #32
 23fcf38:	fa20 f004 	lsr.w	r0, r0, r4
 23fcf3c:	fa01 f302 	lsl.w	r3, r1, r2
 23fcf40:	ea40 0003 	orr.w	r0, r0, r3
 23fcf44:	fa21 f304 	lsr.w	r3, r1, r4
 23fcf48:	ea45 0103 	orr.w	r1, r5, r3
 23fcf4c:	bd30      	pop	{r4, r5, pc}
 23fcf4e:	f1c4 040c 	rsb	r4, r4, #12
 23fcf52:	f1c4 0220 	rsb	r2, r4, #32
 23fcf56:	fa20 f002 	lsr.w	r0, r0, r2
 23fcf5a:	fa01 f304 	lsl.w	r3, r1, r4
 23fcf5e:	ea40 0003 	orr.w	r0, r0, r3
 23fcf62:	4629      	mov	r1, r5
 23fcf64:	bd30      	pop	{r4, r5, pc}
 23fcf66:	fa21 f004 	lsr.w	r0, r1, r4
 23fcf6a:	4629      	mov	r1, r5
 23fcf6c:	bd30      	pop	{r4, r5, pc}
 23fcf6e:	f094 0f00 	teq	r4, #0
 23fcf72:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fcf76:	bf06      	itte	eq
 23fcf78:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fcf7c:	3401      	addeq	r4, #1
 23fcf7e:	3d01      	subne	r5, #1
 23fcf80:	e74e      	b.n	23fce20 <__adddf3+0x8c>
 23fcf82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fcf86:	bf18      	it	ne
 23fcf88:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fcf8c:	d029      	beq.n	23fcfe2 <__adddf3+0x24e>
 23fcf8e:	ea94 0f05 	teq	r4, r5
 23fcf92:	bf08      	it	eq
 23fcf94:	ea90 0f02 	teqeq	r0, r2
 23fcf98:	d005      	beq.n	23fcfa6 <__adddf3+0x212>
 23fcf9a:	ea54 0c00 	orrs.w	ip, r4, r0
 23fcf9e:	bf04      	itt	eq
 23fcfa0:	4619      	moveq	r1, r3
 23fcfa2:	4610      	moveq	r0, r2
 23fcfa4:	bd30      	pop	{r4, r5, pc}
 23fcfa6:	ea91 0f03 	teq	r1, r3
 23fcfaa:	bf1e      	ittt	ne
 23fcfac:	2100      	movne	r1, #0
 23fcfae:	2000      	movne	r0, #0
 23fcfb0:	bd30      	popne	{r4, r5, pc}
 23fcfb2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fcfb6:	d105      	bne.n	23fcfc4 <__adddf3+0x230>
 23fcfb8:	0040      	lsls	r0, r0, #1
 23fcfba:	4149      	adcs	r1, r1
 23fcfbc:	bf28      	it	cs
 23fcfbe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fcfc2:	bd30      	pop	{r4, r5, pc}
 23fcfc4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fcfc8:	bf3c      	itt	cc
 23fcfca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fcfce:	bd30      	popcc	{r4, r5, pc}
 23fcfd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fcfd4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fcfd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fcfdc:	f04f 0000 	mov.w	r0, #0
 23fcfe0:	bd30      	pop	{r4, r5, pc}
 23fcfe2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fcfe6:	bf1a      	itte	ne
 23fcfe8:	4619      	movne	r1, r3
 23fcfea:	4610      	movne	r0, r2
 23fcfec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fcff0:	bf1c      	itt	ne
 23fcff2:	460b      	movne	r3, r1
 23fcff4:	4602      	movne	r2, r0
 23fcff6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fcffa:	bf06      	itte	eq
 23fcffc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fd000:	ea91 0f03 	teqeq	r1, r3
 23fd004:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fd008:	bd30      	pop	{r4, r5, pc}
 23fd00a:	bf00      	nop

023fd00c <__aeabi_ui2d>:
 23fd00c:	f090 0f00 	teq	r0, #0
 23fd010:	bf04      	itt	eq
 23fd012:	2100      	moveq	r1, #0
 23fd014:	4770      	bxeq	lr
 23fd016:	b530      	push	{r4, r5, lr}
 23fd018:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fd01c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fd020:	f04f 0500 	mov.w	r5, #0
 23fd024:	f04f 0100 	mov.w	r1, #0
 23fd028:	e750      	b.n	23fcecc <__adddf3+0x138>
 23fd02a:	bf00      	nop

023fd02c <__aeabi_i2d>:
 23fd02c:	f090 0f00 	teq	r0, #0
 23fd030:	bf04      	itt	eq
 23fd032:	2100      	moveq	r1, #0
 23fd034:	4770      	bxeq	lr
 23fd036:	b530      	push	{r4, r5, lr}
 23fd038:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fd03c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fd040:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fd044:	bf48      	it	mi
 23fd046:	4240      	negmi	r0, r0
 23fd048:	f04f 0100 	mov.w	r1, #0
 23fd04c:	e73e      	b.n	23fcecc <__adddf3+0x138>
 23fd04e:	bf00      	nop

023fd050 <__aeabi_f2d>:
 23fd050:	0042      	lsls	r2, r0, #1
 23fd052:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fd056:	ea4f 0131 	mov.w	r1, r1, rrx
 23fd05a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fd05e:	bf1f      	itttt	ne
 23fd060:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fd064:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fd068:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fd06c:	4770      	bxne	lr
 23fd06e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fd072:	bf08      	it	eq
 23fd074:	4770      	bxeq	lr
 23fd076:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fd07a:	bf04      	itt	eq
 23fd07c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fd080:	4770      	bxeq	lr
 23fd082:	b530      	push	{r4, r5, lr}
 23fd084:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fd088:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fd08c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fd090:	e71c      	b.n	23fcecc <__adddf3+0x138>
 23fd092:	bf00      	nop

023fd094 <__aeabi_ul2d>:
 23fd094:	ea50 0201 	orrs.w	r2, r0, r1
 23fd098:	bf08      	it	eq
 23fd09a:	4770      	bxeq	lr
 23fd09c:	b530      	push	{r4, r5, lr}
 23fd09e:	f04f 0500 	mov.w	r5, #0
 23fd0a2:	e00a      	b.n	23fd0ba <__aeabi_l2d+0x16>

023fd0a4 <__aeabi_l2d>:
 23fd0a4:	ea50 0201 	orrs.w	r2, r0, r1
 23fd0a8:	bf08      	it	eq
 23fd0aa:	4770      	bxeq	lr
 23fd0ac:	b530      	push	{r4, r5, lr}
 23fd0ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fd0b2:	d502      	bpl.n	23fd0ba <__aeabi_l2d+0x16>
 23fd0b4:	4240      	negs	r0, r0
 23fd0b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fd0ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fd0be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fd0c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fd0c6:	f43f aed8 	beq.w	23fce7a <__adddf3+0xe6>
 23fd0ca:	f04f 0203 	mov.w	r2, #3
 23fd0ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fd0d2:	bf18      	it	ne
 23fd0d4:	3203      	addne	r2, #3
 23fd0d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fd0da:	bf18      	it	ne
 23fd0dc:	3203      	addne	r2, #3
 23fd0de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fd0e2:	f1c2 0320 	rsb	r3, r2, #32
 23fd0e6:	fa00 fc03 	lsl.w	ip, r0, r3
 23fd0ea:	fa20 f002 	lsr.w	r0, r0, r2
 23fd0ee:	fa01 fe03 	lsl.w	lr, r1, r3
 23fd0f2:	ea40 000e 	orr.w	r0, r0, lr
 23fd0f6:	fa21 f102 	lsr.w	r1, r1, r2
 23fd0fa:	4414      	add	r4, r2
 23fd0fc:	e6bd      	b.n	23fce7a <__adddf3+0xe6>
 23fd0fe:	bf00      	nop

023fd100 <__aeabi_dmul>:
 23fd100:	b570      	push	{r4, r5, r6, lr}
 23fd102:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fd106:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fd10a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fd10e:	bf1d      	ittte	ne
 23fd110:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fd114:	ea94 0f0c 	teqne	r4, ip
 23fd118:	ea95 0f0c 	teqne	r5, ip
 23fd11c:	f000 f8de 	bleq	23fd2dc <__aeabi_dmul+0x1dc>
 23fd120:	442c      	add	r4, r5
 23fd122:	ea81 0603 	eor.w	r6, r1, r3
 23fd126:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fd12a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fd12e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fd132:	bf18      	it	ne
 23fd134:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fd138:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fd13c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fd140:	d038      	beq.n	23fd1b4 <__aeabi_dmul+0xb4>
 23fd142:	fba0 ce02 	umull	ip, lr, r0, r2
 23fd146:	f04f 0500 	mov.w	r5, #0
 23fd14a:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fd14e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fd152:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fd156:	f04f 0600 	mov.w	r6, #0
 23fd15a:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fd15e:	f09c 0f00 	teq	ip, #0
 23fd162:	bf18      	it	ne
 23fd164:	f04e 0e01 	orrne.w	lr, lr, #1
 23fd168:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fd16c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fd170:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fd174:	d204      	bcs.n	23fd180 <__aeabi_dmul+0x80>
 23fd176:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fd17a:	416d      	adcs	r5, r5
 23fd17c:	eb46 0606 	adc.w	r6, r6, r6
 23fd180:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fd184:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fd188:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fd18c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fd190:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fd194:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fd198:	bf88      	it	hi
 23fd19a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fd19e:	d81e      	bhi.n	23fd1de <__aeabi_dmul+0xde>
 23fd1a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fd1a4:	bf08      	it	eq
 23fd1a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fd1aa:	f150 0000 	adcs.w	r0, r0, #0
 23fd1ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fd1b2:	bd70      	pop	{r4, r5, r6, pc}
 23fd1b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fd1b8:	ea46 0101 	orr.w	r1, r6, r1
 23fd1bc:	ea40 0002 	orr.w	r0, r0, r2
 23fd1c0:	ea81 0103 	eor.w	r1, r1, r3
 23fd1c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fd1c8:	bfc2      	ittt	gt
 23fd1ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fd1ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fd1d2:	bd70      	popgt	{r4, r5, r6, pc}
 23fd1d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fd1d8:	f04f 0e00 	mov.w	lr, #0
 23fd1dc:	3c01      	subs	r4, #1
 23fd1de:	f300 80ab 	bgt.w	23fd338 <__aeabi_dmul+0x238>
 23fd1e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fd1e6:	bfde      	ittt	le
 23fd1e8:	2000      	movle	r0, #0
 23fd1ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fd1ee:	bd70      	pople	{r4, r5, r6, pc}
 23fd1f0:	f1c4 0400 	rsb	r4, r4, #0
 23fd1f4:	3c20      	subs	r4, #32
 23fd1f6:	da35      	bge.n	23fd264 <__aeabi_dmul+0x164>
 23fd1f8:	340c      	adds	r4, #12
 23fd1fa:	dc1b      	bgt.n	23fd234 <__aeabi_dmul+0x134>
 23fd1fc:	f104 0414 	add.w	r4, r4, #20
 23fd200:	f1c4 0520 	rsb	r5, r4, #32
 23fd204:	fa00 f305 	lsl.w	r3, r0, r5
 23fd208:	fa20 f004 	lsr.w	r0, r0, r4
 23fd20c:	fa01 f205 	lsl.w	r2, r1, r5
 23fd210:	ea40 0002 	orr.w	r0, r0, r2
 23fd214:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fd218:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fd21c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fd220:	fa21 f604 	lsr.w	r6, r1, r4
 23fd224:	eb42 0106 	adc.w	r1, r2, r6
 23fd228:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fd22c:	bf08      	it	eq
 23fd22e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fd232:	bd70      	pop	{r4, r5, r6, pc}
 23fd234:	f1c4 040c 	rsb	r4, r4, #12
 23fd238:	f1c4 0520 	rsb	r5, r4, #32
 23fd23c:	fa00 f304 	lsl.w	r3, r0, r4
 23fd240:	fa20 f005 	lsr.w	r0, r0, r5
 23fd244:	fa01 f204 	lsl.w	r2, r1, r4
 23fd248:	ea40 0002 	orr.w	r0, r0, r2
 23fd24c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fd250:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fd254:	f141 0100 	adc.w	r1, r1, #0
 23fd258:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fd25c:	bf08      	it	eq
 23fd25e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fd262:	bd70      	pop	{r4, r5, r6, pc}
 23fd264:	f1c4 0520 	rsb	r5, r4, #32
 23fd268:	fa00 f205 	lsl.w	r2, r0, r5
 23fd26c:	ea4e 0e02 	orr.w	lr, lr, r2
 23fd270:	fa20 f304 	lsr.w	r3, r0, r4
 23fd274:	fa01 f205 	lsl.w	r2, r1, r5
 23fd278:	ea43 0302 	orr.w	r3, r3, r2
 23fd27c:	fa21 f004 	lsr.w	r0, r1, r4
 23fd280:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fd284:	fa21 f204 	lsr.w	r2, r1, r4
 23fd288:	ea20 0002 	bic.w	r0, r0, r2
 23fd28c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fd290:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fd294:	bf08      	it	eq
 23fd296:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fd29a:	bd70      	pop	{r4, r5, r6, pc}
 23fd29c:	f094 0f00 	teq	r4, #0
 23fd2a0:	d10f      	bne.n	23fd2c2 <__aeabi_dmul+0x1c2>
 23fd2a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fd2a6:	0040      	lsls	r0, r0, #1
 23fd2a8:	eb41 0101 	adc.w	r1, r1, r1
 23fd2ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fd2b0:	bf08      	it	eq
 23fd2b2:	3c01      	subeq	r4, #1
 23fd2b4:	d0f7      	beq.n	23fd2a6 <__aeabi_dmul+0x1a6>
 23fd2b6:	ea41 0106 	orr.w	r1, r1, r6
 23fd2ba:	f095 0f00 	teq	r5, #0
 23fd2be:	bf18      	it	ne
 23fd2c0:	4770      	bxne	lr
 23fd2c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fd2c6:	0052      	lsls	r2, r2, #1
 23fd2c8:	eb43 0303 	adc.w	r3, r3, r3
 23fd2cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fd2d0:	bf08      	it	eq
 23fd2d2:	3d01      	subeq	r5, #1
 23fd2d4:	d0f7      	beq.n	23fd2c6 <__aeabi_dmul+0x1c6>
 23fd2d6:	ea43 0306 	orr.w	r3, r3, r6
 23fd2da:	4770      	bx	lr
 23fd2dc:	ea94 0f0c 	teq	r4, ip
 23fd2e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fd2e4:	bf18      	it	ne
 23fd2e6:	ea95 0f0c 	teqne	r5, ip
 23fd2ea:	d00c      	beq.n	23fd306 <__aeabi_dmul+0x206>
 23fd2ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fd2f0:	bf18      	it	ne
 23fd2f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fd2f6:	d1d1      	bne.n	23fd29c <__aeabi_dmul+0x19c>
 23fd2f8:	ea81 0103 	eor.w	r1, r1, r3
 23fd2fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fd300:	f04f 0000 	mov.w	r0, #0
 23fd304:	bd70      	pop	{r4, r5, r6, pc}
 23fd306:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fd30a:	bf06      	itte	eq
 23fd30c:	4610      	moveq	r0, r2
 23fd30e:	4619      	moveq	r1, r3
 23fd310:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fd314:	d019      	beq.n	23fd34a <__aeabi_dmul+0x24a>
 23fd316:	ea94 0f0c 	teq	r4, ip
 23fd31a:	d102      	bne.n	23fd322 <__aeabi_dmul+0x222>
 23fd31c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fd320:	d113      	bne.n	23fd34a <__aeabi_dmul+0x24a>
 23fd322:	ea95 0f0c 	teq	r5, ip
 23fd326:	d105      	bne.n	23fd334 <__aeabi_dmul+0x234>
 23fd328:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fd32c:	bf1c      	itt	ne
 23fd32e:	4610      	movne	r0, r2
 23fd330:	4619      	movne	r1, r3
 23fd332:	d10a      	bne.n	23fd34a <__aeabi_dmul+0x24a>
 23fd334:	ea81 0103 	eor.w	r1, r1, r3
 23fd338:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fd33c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fd340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fd344:	f04f 0000 	mov.w	r0, #0
 23fd348:	bd70      	pop	{r4, r5, r6, pc}
 23fd34a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fd34e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fd352:	bd70      	pop	{r4, r5, r6, pc}

023fd354 <__aeabi_ddiv>:
 23fd354:	b570      	push	{r4, r5, r6, lr}
 23fd356:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fd35a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fd35e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fd362:	bf1d      	ittte	ne
 23fd364:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fd368:	ea94 0f0c 	teqne	r4, ip
 23fd36c:	ea95 0f0c 	teqne	r5, ip
 23fd370:	f000 f8a7 	bleq	23fd4c2 <__aeabi_ddiv+0x16e>
 23fd374:	eba4 0405 	sub.w	r4, r4, r5
 23fd378:	ea81 0e03 	eor.w	lr, r1, r3
 23fd37c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fd380:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fd384:	f000 8088 	beq.w	23fd498 <__aeabi_ddiv+0x144>
 23fd388:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fd38c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fd390:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fd394:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fd398:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fd39c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fd3a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fd3a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fd3a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fd3ac:	429d      	cmp	r5, r3
 23fd3ae:	bf08      	it	eq
 23fd3b0:	4296      	cmpeq	r6, r2
 23fd3b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fd3b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fd3ba:	d202      	bcs.n	23fd3c2 <__aeabi_ddiv+0x6e>
 23fd3bc:	085b      	lsrs	r3, r3, #1
 23fd3be:	ea4f 0232 	mov.w	r2, r2, rrx
 23fd3c2:	1ab6      	subs	r6, r6, r2
 23fd3c4:	eb65 0503 	sbc.w	r5, r5, r3
 23fd3c8:	085b      	lsrs	r3, r3, #1
 23fd3ca:	ea4f 0232 	mov.w	r2, r2, rrx
 23fd3ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fd3d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fd3d6:	ebb6 0e02 	subs.w	lr, r6, r2
 23fd3da:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fd3de:	bf22      	ittt	cs
 23fd3e0:	1ab6      	subcs	r6, r6, r2
 23fd3e2:	4675      	movcs	r5, lr
 23fd3e4:	ea40 000c 	orrcs.w	r0, r0, ip
 23fd3e8:	085b      	lsrs	r3, r3, #1
 23fd3ea:	ea4f 0232 	mov.w	r2, r2, rrx
 23fd3ee:	ebb6 0e02 	subs.w	lr, r6, r2
 23fd3f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fd3f6:	bf22      	ittt	cs
 23fd3f8:	1ab6      	subcs	r6, r6, r2
 23fd3fa:	4675      	movcs	r5, lr
 23fd3fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fd400:	085b      	lsrs	r3, r3, #1
 23fd402:	ea4f 0232 	mov.w	r2, r2, rrx
 23fd406:	ebb6 0e02 	subs.w	lr, r6, r2
 23fd40a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fd40e:	bf22      	ittt	cs
 23fd410:	1ab6      	subcs	r6, r6, r2
 23fd412:	4675      	movcs	r5, lr
 23fd414:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fd418:	085b      	lsrs	r3, r3, #1
 23fd41a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fd41e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fd422:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fd426:	bf22      	ittt	cs
 23fd428:	1ab6      	subcs	r6, r6, r2
 23fd42a:	4675      	movcs	r5, lr
 23fd42c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fd430:	ea55 0e06 	orrs.w	lr, r5, r6
 23fd434:	d018      	beq.n	23fd468 <__aeabi_ddiv+0x114>
 23fd436:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fd43a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fd43e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fd442:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fd446:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fd44a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fd44e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fd452:	d1c0      	bne.n	23fd3d6 <__aeabi_ddiv+0x82>
 23fd454:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fd458:	d10b      	bne.n	23fd472 <__aeabi_ddiv+0x11e>
 23fd45a:	ea41 0100 	orr.w	r1, r1, r0
 23fd45e:	f04f 0000 	mov.w	r0, #0
 23fd462:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fd466:	e7b6      	b.n	23fd3d6 <__aeabi_ddiv+0x82>
 23fd468:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fd46c:	bf04      	itt	eq
 23fd46e:	4301      	orreq	r1, r0
 23fd470:	2000      	moveq	r0, #0
 23fd472:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fd476:	bf88      	it	hi
 23fd478:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fd47c:	f63f aeaf 	bhi.w	23fd1de <__aeabi_dmul+0xde>
 23fd480:	ebb5 0c03 	subs.w	ip, r5, r3
 23fd484:	bf04      	itt	eq
 23fd486:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fd48a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fd48e:	f150 0000 	adcs.w	r0, r0, #0
 23fd492:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fd496:	bd70      	pop	{r4, r5, r6, pc}
 23fd498:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fd49c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fd4a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fd4a4:	bfc2      	ittt	gt
 23fd4a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fd4aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fd4ae:	bd70      	popgt	{r4, r5, r6, pc}
 23fd4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fd4b4:	f04f 0e00 	mov.w	lr, #0
 23fd4b8:	3c01      	subs	r4, #1
 23fd4ba:	e690      	b.n	23fd1de <__aeabi_dmul+0xde>
 23fd4bc:	ea45 0e06 	orr.w	lr, r5, r6
 23fd4c0:	e68d      	b.n	23fd1de <__aeabi_dmul+0xde>
 23fd4c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fd4c6:	ea94 0f0c 	teq	r4, ip
 23fd4ca:	bf08      	it	eq
 23fd4cc:	ea95 0f0c 	teqeq	r5, ip
 23fd4d0:	f43f af3b 	beq.w	23fd34a <__aeabi_dmul+0x24a>
 23fd4d4:	ea94 0f0c 	teq	r4, ip
 23fd4d8:	d10a      	bne.n	23fd4f0 <__aeabi_ddiv+0x19c>
 23fd4da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fd4de:	f47f af34 	bne.w	23fd34a <__aeabi_dmul+0x24a>
 23fd4e2:	ea95 0f0c 	teq	r5, ip
 23fd4e6:	f47f af25 	bne.w	23fd334 <__aeabi_dmul+0x234>
 23fd4ea:	4610      	mov	r0, r2
 23fd4ec:	4619      	mov	r1, r3
 23fd4ee:	e72c      	b.n	23fd34a <__aeabi_dmul+0x24a>
 23fd4f0:	ea95 0f0c 	teq	r5, ip
 23fd4f4:	d106      	bne.n	23fd504 <__aeabi_ddiv+0x1b0>
 23fd4f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fd4fa:	f43f aefd 	beq.w	23fd2f8 <__aeabi_dmul+0x1f8>
 23fd4fe:	4610      	mov	r0, r2
 23fd500:	4619      	mov	r1, r3
 23fd502:	e722      	b.n	23fd34a <__aeabi_dmul+0x24a>
 23fd504:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fd508:	bf18      	it	ne
 23fd50a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fd50e:	f47f aec5 	bne.w	23fd29c <__aeabi_dmul+0x19c>
 23fd512:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fd516:	f47f af0d 	bne.w	23fd334 <__aeabi_dmul+0x234>
 23fd51a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fd51e:	f47f aeeb 	bne.w	23fd2f8 <__aeabi_dmul+0x1f8>
 23fd522:	e712      	b.n	23fd34a <__aeabi_dmul+0x24a>

023fd524 <__gedf2>:
 23fd524:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fd528:	e006      	b.n	23fd538 <__cmpdf2+0x4>
 23fd52a:	bf00      	nop

023fd52c <__ledf2>:
 23fd52c:	f04f 0c01 	mov.w	ip, #1
 23fd530:	e002      	b.n	23fd538 <__cmpdf2+0x4>
 23fd532:	bf00      	nop

023fd534 <__cmpdf2>:
 23fd534:	f04f 0c01 	mov.w	ip, #1
 23fd538:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fd53c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fd540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fd544:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fd548:	bf18      	it	ne
 23fd54a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fd54e:	d01b      	beq.n	23fd588 <__cmpdf2+0x54>
 23fd550:	b001      	add	sp, #4
 23fd552:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fd556:	bf0c      	ite	eq
 23fd558:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fd55c:	ea91 0f03 	teqne	r1, r3
 23fd560:	bf02      	ittt	eq
 23fd562:	ea90 0f02 	teqeq	r0, r2
 23fd566:	2000      	moveq	r0, #0
 23fd568:	4770      	bxeq	lr
 23fd56a:	f110 0f00 	cmn.w	r0, #0
 23fd56e:	ea91 0f03 	teq	r1, r3
 23fd572:	bf58      	it	pl
 23fd574:	4299      	cmppl	r1, r3
 23fd576:	bf08      	it	eq
 23fd578:	4290      	cmpeq	r0, r2
 23fd57a:	bf2c      	ite	cs
 23fd57c:	17d8      	asrcs	r0, r3, #31
 23fd57e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fd582:	f040 0001 	orr.w	r0, r0, #1
 23fd586:	4770      	bx	lr
 23fd588:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fd58c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fd590:	d102      	bne.n	23fd598 <__cmpdf2+0x64>
 23fd592:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fd596:	d107      	bne.n	23fd5a8 <__cmpdf2+0x74>
 23fd598:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fd59c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fd5a0:	d1d6      	bne.n	23fd550 <__cmpdf2+0x1c>
 23fd5a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fd5a6:	d0d3      	beq.n	23fd550 <__cmpdf2+0x1c>
 23fd5a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 23fd5ac:	4770      	bx	lr
 23fd5ae:	bf00      	nop

023fd5b0 <__aeabi_cdrcmple>:
 23fd5b0:	4684      	mov	ip, r0
 23fd5b2:	4610      	mov	r0, r2
 23fd5b4:	4662      	mov	r2, ip
 23fd5b6:	468c      	mov	ip, r1
 23fd5b8:	4619      	mov	r1, r3
 23fd5ba:	4663      	mov	r3, ip
 23fd5bc:	e000      	b.n	23fd5c0 <__aeabi_cdcmpeq>
 23fd5be:	bf00      	nop

023fd5c0 <__aeabi_cdcmpeq>:
 23fd5c0:	b501      	push	{r0, lr}
 23fd5c2:	f7ff ffb7 	bl	23fd534 <__cmpdf2>
 23fd5c6:	2800      	cmp	r0, #0
 23fd5c8:	bf48      	it	mi
 23fd5ca:	f110 0f00 	cmnmi.w	r0, #0
 23fd5ce:	bd01      	pop	{r0, pc}

023fd5d0 <__aeabi_dcmpeq>:
 23fd5d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fd5d4:	f7ff fff4 	bl	23fd5c0 <__aeabi_cdcmpeq>
 23fd5d8:	bf0c      	ite	eq
 23fd5da:	2001      	moveq	r0, #1
 23fd5dc:	2000      	movne	r0, #0
 23fd5de:	f85d fb08 	ldr.w	pc, [sp], #8
 23fd5e2:	bf00      	nop

023fd5e4 <__aeabi_dcmplt>:
 23fd5e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fd5e8:	f7ff ffea 	bl	23fd5c0 <__aeabi_cdcmpeq>
 23fd5ec:	bf34      	ite	cc
 23fd5ee:	2001      	movcc	r0, #1
 23fd5f0:	2000      	movcs	r0, #0
 23fd5f2:	f85d fb08 	ldr.w	pc, [sp], #8
 23fd5f6:	bf00      	nop

023fd5f8 <__aeabi_dcmple>:
 23fd5f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fd5fc:	f7ff ffe0 	bl	23fd5c0 <__aeabi_cdcmpeq>
 23fd600:	bf94      	ite	ls
 23fd602:	2001      	movls	r0, #1
 23fd604:	2000      	movhi	r0, #0
 23fd606:	f85d fb08 	ldr.w	pc, [sp], #8
 23fd60a:	bf00      	nop

023fd60c <__aeabi_dcmpge>:
 23fd60c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fd610:	f7ff ffce 	bl	23fd5b0 <__aeabi_cdrcmple>
 23fd614:	bf94      	ite	ls
 23fd616:	2001      	movls	r0, #1
 23fd618:	2000      	movhi	r0, #0
 23fd61a:	f85d fb08 	ldr.w	pc, [sp], #8
 23fd61e:	bf00      	nop

023fd620 <__aeabi_dcmpgt>:
 23fd620:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fd624:	f7ff ffc4 	bl	23fd5b0 <__aeabi_cdrcmple>
 23fd628:	bf34      	ite	cc
 23fd62a:	2001      	movcc	r0, #1
 23fd62c:	2000      	movcs	r0, #0
 23fd62e:	f85d fb08 	ldr.w	pc, [sp], #8
 23fd632:	bf00      	nop

023fd634 <__aeabi_dcmpun>:
 23fd634:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fd638:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fd63c:	d102      	bne.n	23fd644 <__aeabi_dcmpun+0x10>
 23fd63e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fd642:	d10a      	bne.n	23fd65a <__aeabi_dcmpun+0x26>
 23fd644:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fd648:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fd64c:	d102      	bne.n	23fd654 <__aeabi_dcmpun+0x20>
 23fd64e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fd652:	d102      	bne.n	23fd65a <__aeabi_dcmpun+0x26>
 23fd654:	f04f 0000 	mov.w	r0, #0
 23fd658:	4770      	bx	lr
 23fd65a:	f04f 0001 	mov.w	r0, #1
 23fd65e:	4770      	bx	lr

023fd660 <__aeabi_d2iz>:
 23fd660:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fd664:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fd668:	d215      	bcs.n	23fd696 <__aeabi_d2iz+0x36>
 23fd66a:	d511      	bpl.n	23fd690 <__aeabi_d2iz+0x30>
 23fd66c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fd670:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fd674:	d912      	bls.n	23fd69c <__aeabi_d2iz+0x3c>
 23fd676:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fd67a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fd67e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fd682:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fd686:	fa23 f002 	lsr.w	r0, r3, r2
 23fd68a:	bf18      	it	ne
 23fd68c:	4240      	negne	r0, r0
 23fd68e:	4770      	bx	lr
 23fd690:	f04f 0000 	mov.w	r0, #0
 23fd694:	4770      	bx	lr
 23fd696:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fd69a:	d105      	bne.n	23fd6a8 <__aeabi_d2iz+0x48>
 23fd69c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23fd6a0:	bf08      	it	eq
 23fd6a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23fd6a6:	4770      	bx	lr
 23fd6a8:	f04f 0000 	mov.w	r0, #0
 23fd6ac:	4770      	bx	lr
 23fd6ae:	bf00      	nop

023fd6b0 <__aeabi_d2uiz>:
 23fd6b0:	004a      	lsls	r2, r1, #1
 23fd6b2:	d211      	bcs.n	23fd6d8 <__aeabi_d2uiz+0x28>
 23fd6b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fd6b8:	d211      	bcs.n	23fd6de <__aeabi_d2uiz+0x2e>
 23fd6ba:	d50d      	bpl.n	23fd6d8 <__aeabi_d2uiz+0x28>
 23fd6bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fd6c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fd6c4:	d40e      	bmi.n	23fd6e4 <__aeabi_d2uiz+0x34>
 23fd6c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fd6ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fd6ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fd6d2:	fa23 f002 	lsr.w	r0, r3, r2
 23fd6d6:	4770      	bx	lr
 23fd6d8:	f04f 0000 	mov.w	r0, #0
 23fd6dc:	4770      	bx	lr
 23fd6de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fd6e2:	d102      	bne.n	23fd6ea <__aeabi_d2uiz+0x3a>
 23fd6e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fd6e8:	4770      	bx	lr
 23fd6ea:	f04f 0000 	mov.w	r0, #0
 23fd6ee:	4770      	bx	lr

023fd6f0 <__aeabi_d2f>:
 23fd6f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fd6f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fd6f8:	bf24      	itt	cs
 23fd6fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fd6fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fd702:	d90d      	bls.n	23fd720 <__aeabi_d2f+0x30>
 23fd704:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fd708:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fd70c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fd710:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fd714:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fd718:	bf08      	it	eq
 23fd71a:	f020 0001 	biceq.w	r0, r0, #1
 23fd71e:	4770      	bx	lr
 23fd720:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fd724:	d121      	bne.n	23fd76a <__aeabi_d2f+0x7a>
 23fd726:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fd72a:	bfbc      	itt	lt
 23fd72c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fd730:	4770      	bxlt	lr
 23fd732:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fd736:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fd73a:	f1c2 0218 	rsb	r2, r2, #24
 23fd73e:	f1c2 0c20 	rsb	ip, r2, #32
 23fd742:	fa10 f30c 	lsls.w	r3, r0, ip
 23fd746:	fa20 f002 	lsr.w	r0, r0, r2
 23fd74a:	bf18      	it	ne
 23fd74c:	f040 0001 	orrne.w	r0, r0, #1
 23fd750:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fd754:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fd758:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fd75c:	ea40 000c 	orr.w	r0, r0, ip
 23fd760:	fa23 f302 	lsr.w	r3, r3, r2
 23fd764:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fd768:	e7cc      	b.n	23fd704 <__aeabi_d2f+0x14>
 23fd76a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fd76e:	d107      	bne.n	23fd780 <__aeabi_d2f+0x90>
 23fd770:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fd774:	bf1e      	ittt	ne
 23fd776:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fd77a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fd77e:	4770      	bxne	lr
 23fd780:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fd784:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fd788:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fd78c:	4770      	bx	lr
 23fd78e:	bf00      	nop

023fd790 <__aeabi_uldivmod>:
 23fd790:	b953      	cbnz	r3, 23fd7a8 <__aeabi_uldivmod+0x18>
 23fd792:	b94a      	cbnz	r2, 23fd7a8 <__aeabi_uldivmod+0x18>
 23fd794:	2900      	cmp	r1, #0
 23fd796:	bf08      	it	eq
 23fd798:	2800      	cmpeq	r0, #0
 23fd79a:	bf1c      	itt	ne
 23fd79c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 23fd7a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fd7a4:	f000 b9a0 	b.w	23fdae8 <__aeabi_idiv0>
 23fd7a8:	f1ad 0c08 	sub.w	ip, sp, #8
 23fd7ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23fd7b0:	f000 f824 	bl	23fd7fc <__udivmoddi4>
 23fd7b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 23fd7b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23fd7bc:	b004      	add	sp, #16
 23fd7be:	4770      	bx	lr

023fd7c0 <__aeabi_d2ulz>:
 23fd7c0:	b5d0      	push	{r4, r6, r7, lr}
 23fd7c2:	2200      	movs	r2, #0
 23fd7c4:	4b0b      	ldr	r3, [pc, #44]	; (23fd7f4 <__aeabi_d2ulz+0x34>)
 23fd7c6:	4606      	mov	r6, r0
 23fd7c8:	460f      	mov	r7, r1
 23fd7ca:	f7ff fc99 	bl	23fd100 <__aeabi_dmul>
 23fd7ce:	f7ff ff6f 	bl	23fd6b0 <__aeabi_d2uiz>
 23fd7d2:	4604      	mov	r4, r0
 23fd7d4:	f7ff fc1a 	bl	23fd00c <__aeabi_ui2d>
 23fd7d8:	2200      	movs	r2, #0
 23fd7da:	4b07      	ldr	r3, [pc, #28]	; (23fd7f8 <__aeabi_d2ulz+0x38>)
 23fd7dc:	f7ff fc90 	bl	23fd100 <__aeabi_dmul>
 23fd7e0:	4602      	mov	r2, r0
 23fd7e2:	460b      	mov	r3, r1
 23fd7e4:	4630      	mov	r0, r6
 23fd7e6:	4639      	mov	r1, r7
 23fd7e8:	f7ff fad2 	bl	23fcd90 <__aeabi_dsub>
 23fd7ec:	f7ff ff60 	bl	23fd6b0 <__aeabi_d2uiz>
 23fd7f0:	4621      	mov	r1, r4
 23fd7f2:	bdd0      	pop	{r4, r6, r7, pc}
 23fd7f4:	3df00000 	.word	0x3df00000
 23fd7f8:	41f00000 	.word	0x41f00000

023fd7fc <__udivmoddi4>:
 23fd7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd800:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23fd802:	4604      	mov	r4, r0
 23fd804:	460f      	mov	r7, r1
 23fd806:	2b00      	cmp	r3, #0
 23fd808:	d148      	bne.n	23fd89c <__udivmoddi4+0xa0>
 23fd80a:	428a      	cmp	r2, r1
 23fd80c:	4694      	mov	ip, r2
 23fd80e:	d961      	bls.n	23fd8d4 <__udivmoddi4+0xd8>
 23fd810:	fab2 f382 	clz	r3, r2
 23fd814:	b143      	cbz	r3, 23fd828 <__udivmoddi4+0x2c>
 23fd816:	f1c3 0120 	rsb	r1, r3, #32
 23fd81a:	409f      	lsls	r7, r3
 23fd81c:	fa02 fc03 	lsl.w	ip, r2, r3
 23fd820:	409c      	lsls	r4, r3
 23fd822:	fa20 f101 	lsr.w	r1, r0, r1
 23fd826:	430f      	orrs	r7, r1
 23fd828:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23fd82c:	fa1f fe8c 	uxth.w	lr, ip
 23fd830:	0c22      	lsrs	r2, r4, #16
 23fd832:	fbb7 f6f1 	udiv	r6, r7, r1
 23fd836:	fb01 7716 	mls	r7, r1, r6, r7
 23fd83a:	fb06 f00e 	mul.w	r0, r6, lr
 23fd83e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23fd842:	4290      	cmp	r0, r2
 23fd844:	d908      	bls.n	23fd858 <__udivmoddi4+0x5c>
 23fd846:	eb1c 0202 	adds.w	r2, ip, r2
 23fd84a:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23fd84e:	d202      	bcs.n	23fd856 <__udivmoddi4+0x5a>
 23fd850:	4290      	cmp	r0, r2
 23fd852:	f200 8137 	bhi.w	23fdac4 <__udivmoddi4+0x2c8>
 23fd856:	463e      	mov	r6, r7
 23fd858:	1a12      	subs	r2, r2, r0
 23fd85a:	b2a4      	uxth	r4, r4
 23fd85c:	fbb2 f0f1 	udiv	r0, r2, r1
 23fd860:	fb01 2210 	mls	r2, r1, r0, r2
 23fd864:	fb00 fe0e 	mul.w	lr, r0, lr
 23fd868:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23fd86c:	45a6      	cmp	lr, r4
 23fd86e:	d908      	bls.n	23fd882 <__udivmoddi4+0x86>
 23fd870:	eb1c 0404 	adds.w	r4, ip, r4
 23fd874:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23fd878:	d202      	bcs.n	23fd880 <__udivmoddi4+0x84>
 23fd87a:	45a6      	cmp	lr, r4
 23fd87c:	f200 811c 	bhi.w	23fdab8 <__udivmoddi4+0x2bc>
 23fd880:	4610      	mov	r0, r2
 23fd882:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23fd886:	eba4 040e 	sub.w	r4, r4, lr
 23fd88a:	2600      	movs	r6, #0
 23fd88c:	b11d      	cbz	r5, 23fd896 <__udivmoddi4+0x9a>
 23fd88e:	40dc      	lsrs	r4, r3
 23fd890:	2300      	movs	r3, #0
 23fd892:	e9c5 4300 	strd	r4, r3, [r5]
 23fd896:	4631      	mov	r1, r6
 23fd898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd89c:	428b      	cmp	r3, r1
 23fd89e:	d909      	bls.n	23fd8b4 <__udivmoddi4+0xb8>
 23fd8a0:	2d00      	cmp	r5, #0
 23fd8a2:	f000 80fd 	beq.w	23fdaa0 <__udivmoddi4+0x2a4>
 23fd8a6:	2600      	movs	r6, #0
 23fd8a8:	e9c5 0100 	strd	r0, r1, [r5]
 23fd8ac:	4630      	mov	r0, r6
 23fd8ae:	4631      	mov	r1, r6
 23fd8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd8b4:	fab3 f683 	clz	r6, r3
 23fd8b8:	2e00      	cmp	r6, #0
 23fd8ba:	d14b      	bne.n	23fd954 <__udivmoddi4+0x158>
 23fd8bc:	428b      	cmp	r3, r1
 23fd8be:	f0c0 80f2 	bcc.w	23fdaa6 <__udivmoddi4+0x2aa>
 23fd8c2:	4282      	cmp	r2, r0
 23fd8c4:	f240 80ef 	bls.w	23fdaa6 <__udivmoddi4+0x2aa>
 23fd8c8:	4630      	mov	r0, r6
 23fd8ca:	2d00      	cmp	r5, #0
 23fd8cc:	d0e3      	beq.n	23fd896 <__udivmoddi4+0x9a>
 23fd8ce:	e9c5 4700 	strd	r4, r7, [r5]
 23fd8d2:	e7e0      	b.n	23fd896 <__udivmoddi4+0x9a>
 23fd8d4:	b902      	cbnz	r2, 23fd8d8 <__udivmoddi4+0xdc>
 23fd8d6:	deff      	udf	#255	; 0xff
 23fd8d8:	fab2 f382 	clz	r3, r2
 23fd8dc:	2b00      	cmp	r3, #0
 23fd8de:	f040 809d 	bne.w	23fda1c <__udivmoddi4+0x220>
 23fd8e2:	1a89      	subs	r1, r1, r2
 23fd8e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23fd8e8:	b297      	uxth	r7, r2
 23fd8ea:	2601      	movs	r6, #1
 23fd8ec:	0c20      	lsrs	r0, r4, #16
 23fd8ee:	fbb1 f2fe 	udiv	r2, r1, lr
 23fd8f2:	fb0e 1112 	mls	r1, lr, r2, r1
 23fd8f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23fd8fa:	fb07 f002 	mul.w	r0, r7, r2
 23fd8fe:	4288      	cmp	r0, r1
 23fd900:	d90f      	bls.n	23fd922 <__udivmoddi4+0x126>
 23fd902:	eb1c 0101 	adds.w	r1, ip, r1
 23fd906:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23fd90a:	bf2c      	ite	cs
 23fd90c:	f04f 0901 	movcs.w	r9, #1
 23fd910:	f04f 0900 	movcc.w	r9, #0
 23fd914:	4288      	cmp	r0, r1
 23fd916:	d903      	bls.n	23fd920 <__udivmoddi4+0x124>
 23fd918:	f1b9 0f00 	cmp.w	r9, #0
 23fd91c:	f000 80cf 	beq.w	23fdabe <__udivmoddi4+0x2c2>
 23fd920:	4642      	mov	r2, r8
 23fd922:	1a09      	subs	r1, r1, r0
 23fd924:	b2a4      	uxth	r4, r4
 23fd926:	fbb1 f0fe 	udiv	r0, r1, lr
 23fd92a:	fb0e 1110 	mls	r1, lr, r0, r1
 23fd92e:	fb00 f707 	mul.w	r7, r0, r7
 23fd932:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23fd936:	42a7      	cmp	r7, r4
 23fd938:	d908      	bls.n	23fd94c <__udivmoddi4+0x150>
 23fd93a:	eb1c 0404 	adds.w	r4, ip, r4
 23fd93e:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23fd942:	d202      	bcs.n	23fd94a <__udivmoddi4+0x14e>
 23fd944:	42a7      	cmp	r7, r4
 23fd946:	f200 80b4 	bhi.w	23fdab2 <__udivmoddi4+0x2b6>
 23fd94a:	4608      	mov	r0, r1
 23fd94c:	1be4      	subs	r4, r4, r7
 23fd94e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23fd952:	e79b      	b.n	23fd88c <__udivmoddi4+0x90>
 23fd954:	f1c6 0720 	rsb	r7, r6, #32
 23fd958:	40b3      	lsls	r3, r6
 23fd95a:	fa01 f406 	lsl.w	r4, r1, r6
 23fd95e:	fa22 fc07 	lsr.w	ip, r2, r7
 23fd962:	40f9      	lsrs	r1, r7
 23fd964:	40b2      	lsls	r2, r6
 23fd966:	ea4c 0c03 	orr.w	ip, ip, r3
 23fd96a:	fa20 f307 	lsr.w	r3, r0, r7
 23fd96e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23fd972:	431c      	orrs	r4, r3
 23fd974:	fa1f fe8c 	uxth.w	lr, ip
 23fd978:	fa00 f306 	lsl.w	r3, r0, r6
 23fd97c:	0c20      	lsrs	r0, r4, #16
 23fd97e:	fbb1 f8f9 	udiv	r8, r1, r9
 23fd982:	fb09 1118 	mls	r1, r9, r8, r1
 23fd986:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23fd98a:	fb08 f00e 	mul.w	r0, r8, lr
 23fd98e:	4288      	cmp	r0, r1
 23fd990:	d90f      	bls.n	23fd9b2 <__udivmoddi4+0x1b6>
 23fd992:	eb1c 0101 	adds.w	r1, ip, r1
 23fd996:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23fd99a:	bf2c      	ite	cs
 23fd99c:	f04f 0b01 	movcs.w	fp, #1
 23fd9a0:	f04f 0b00 	movcc.w	fp, #0
 23fd9a4:	4288      	cmp	r0, r1
 23fd9a6:	d903      	bls.n	23fd9b0 <__udivmoddi4+0x1b4>
 23fd9a8:	f1bb 0f00 	cmp.w	fp, #0
 23fd9ac:	f000 808d 	beq.w	23fdaca <__udivmoddi4+0x2ce>
 23fd9b0:	46d0      	mov	r8, sl
 23fd9b2:	1a09      	subs	r1, r1, r0
 23fd9b4:	b2a4      	uxth	r4, r4
 23fd9b6:	fbb1 f0f9 	udiv	r0, r1, r9
 23fd9ba:	fb09 1110 	mls	r1, r9, r0, r1
 23fd9be:	fb00 fe0e 	mul.w	lr, r0, lr
 23fd9c2:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23fd9c6:	458e      	cmp	lr, r1
 23fd9c8:	d907      	bls.n	23fd9da <__udivmoddi4+0x1de>
 23fd9ca:	eb1c 0101 	adds.w	r1, ip, r1
 23fd9ce:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23fd9d2:	d201      	bcs.n	23fd9d8 <__udivmoddi4+0x1dc>
 23fd9d4:	458e      	cmp	lr, r1
 23fd9d6:	d87f      	bhi.n	23fdad8 <__udivmoddi4+0x2dc>
 23fd9d8:	4620      	mov	r0, r4
 23fd9da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23fd9de:	eba1 010e 	sub.w	r1, r1, lr
 23fd9e2:	fba0 9802 	umull	r9, r8, r0, r2
 23fd9e6:	4541      	cmp	r1, r8
 23fd9e8:	464c      	mov	r4, r9
 23fd9ea:	46c6      	mov	lr, r8
 23fd9ec:	d302      	bcc.n	23fd9f4 <__udivmoddi4+0x1f8>
 23fd9ee:	d106      	bne.n	23fd9fe <__udivmoddi4+0x202>
 23fd9f0:	454b      	cmp	r3, r9
 23fd9f2:	d204      	bcs.n	23fd9fe <__udivmoddi4+0x202>
 23fd9f4:	3801      	subs	r0, #1
 23fd9f6:	ebb9 0402 	subs.w	r4, r9, r2
 23fd9fa:	eb68 0e0c 	sbc.w	lr, r8, ip
 23fd9fe:	2d00      	cmp	r5, #0
 23fda00:	d070      	beq.n	23fdae4 <__udivmoddi4+0x2e8>
 23fda02:	1b1a      	subs	r2, r3, r4
 23fda04:	eb61 010e 	sbc.w	r1, r1, lr
 23fda08:	fa22 f306 	lsr.w	r3, r2, r6
 23fda0c:	fa01 f707 	lsl.w	r7, r1, r7
 23fda10:	40f1      	lsrs	r1, r6
 23fda12:	2600      	movs	r6, #0
 23fda14:	431f      	orrs	r7, r3
 23fda16:	e9c5 7100 	strd	r7, r1, [r5]
 23fda1a:	e73c      	b.n	23fd896 <__udivmoddi4+0x9a>
 23fda1c:	fa02 fc03 	lsl.w	ip, r2, r3
 23fda20:	f1c3 0020 	rsb	r0, r3, #32
 23fda24:	fa01 f203 	lsl.w	r2, r1, r3
 23fda28:	fa21 f600 	lsr.w	r6, r1, r0
 23fda2c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23fda30:	fa24 f100 	lsr.w	r1, r4, r0
 23fda34:	fa1f f78c 	uxth.w	r7, ip
 23fda38:	409c      	lsls	r4, r3
 23fda3a:	4311      	orrs	r1, r2
 23fda3c:	fbb6 f0fe 	udiv	r0, r6, lr
 23fda40:	0c0a      	lsrs	r2, r1, #16
 23fda42:	fb0e 6610 	mls	r6, lr, r0, r6
 23fda46:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23fda4a:	fb00 f607 	mul.w	r6, r0, r7
 23fda4e:	4296      	cmp	r6, r2
 23fda50:	d90e      	bls.n	23fda70 <__udivmoddi4+0x274>
 23fda52:	eb1c 0202 	adds.w	r2, ip, r2
 23fda56:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23fda5a:	bf2c      	ite	cs
 23fda5c:	f04f 0901 	movcs.w	r9, #1
 23fda60:	f04f 0900 	movcc.w	r9, #0
 23fda64:	4296      	cmp	r6, r2
 23fda66:	d902      	bls.n	23fda6e <__udivmoddi4+0x272>
 23fda68:	f1b9 0f00 	cmp.w	r9, #0
 23fda6c:	d031      	beq.n	23fdad2 <__udivmoddi4+0x2d6>
 23fda6e:	4640      	mov	r0, r8
 23fda70:	1b92      	subs	r2, r2, r6
 23fda72:	b289      	uxth	r1, r1
 23fda74:	fbb2 f6fe 	udiv	r6, r2, lr
 23fda78:	fb0e 2216 	mls	r2, lr, r6, r2
 23fda7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23fda80:	fb06 f207 	mul.w	r2, r6, r7
 23fda84:	428a      	cmp	r2, r1
 23fda86:	d907      	bls.n	23fda98 <__udivmoddi4+0x29c>
 23fda88:	eb1c 0101 	adds.w	r1, ip, r1
 23fda8c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23fda90:	d201      	bcs.n	23fda96 <__udivmoddi4+0x29a>
 23fda92:	428a      	cmp	r2, r1
 23fda94:	d823      	bhi.n	23fdade <__udivmoddi4+0x2e2>
 23fda96:	4646      	mov	r6, r8
 23fda98:	1a89      	subs	r1, r1, r2
 23fda9a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23fda9e:	e725      	b.n	23fd8ec <__udivmoddi4+0xf0>
 23fdaa0:	462e      	mov	r6, r5
 23fdaa2:	4628      	mov	r0, r5
 23fdaa4:	e6f7      	b.n	23fd896 <__udivmoddi4+0x9a>
 23fdaa6:	1a84      	subs	r4, r0, r2
 23fdaa8:	eb61 0303 	sbc.w	r3, r1, r3
 23fdaac:	2001      	movs	r0, #1
 23fdaae:	461f      	mov	r7, r3
 23fdab0:	e70b      	b.n	23fd8ca <__udivmoddi4+0xce>
 23fdab2:	4464      	add	r4, ip
 23fdab4:	3802      	subs	r0, #2
 23fdab6:	e749      	b.n	23fd94c <__udivmoddi4+0x150>
 23fdab8:	4464      	add	r4, ip
 23fdaba:	3802      	subs	r0, #2
 23fdabc:	e6e1      	b.n	23fd882 <__udivmoddi4+0x86>
 23fdabe:	3a02      	subs	r2, #2
 23fdac0:	4461      	add	r1, ip
 23fdac2:	e72e      	b.n	23fd922 <__udivmoddi4+0x126>
 23fdac4:	3e02      	subs	r6, #2
 23fdac6:	4462      	add	r2, ip
 23fdac8:	e6c6      	b.n	23fd858 <__udivmoddi4+0x5c>
 23fdaca:	f1a8 0802 	sub.w	r8, r8, #2
 23fdace:	4461      	add	r1, ip
 23fdad0:	e76f      	b.n	23fd9b2 <__udivmoddi4+0x1b6>
 23fdad2:	3802      	subs	r0, #2
 23fdad4:	4462      	add	r2, ip
 23fdad6:	e7cb      	b.n	23fda70 <__udivmoddi4+0x274>
 23fdad8:	3802      	subs	r0, #2
 23fdada:	4461      	add	r1, ip
 23fdadc:	e77d      	b.n	23fd9da <__udivmoddi4+0x1de>
 23fdade:	3e02      	subs	r6, #2
 23fdae0:	4461      	add	r1, ip
 23fdae2:	e7d9      	b.n	23fda98 <__udivmoddi4+0x29c>
 23fdae4:	462e      	mov	r6, r5
 23fdae6:	e6d6      	b.n	23fd896 <__udivmoddi4+0x9a>

023fdae8 <__aeabi_idiv0>:
 23fdae8:	4770      	bx	lr
 23fdaea:	bf00      	nop

023fdaec <strlen>:
 23fdaec:	4603      	mov	r3, r0
 23fdaee:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fdaf2:	2a00      	cmp	r2, #0
 23fdaf4:	d1fb      	bne.n	23fdaee <strlen+0x2>
 23fdaf6:	1a18      	subs	r0, r3, r0
 23fdaf8:	3801      	subs	r0, #1
 23fdafa:	4770      	bx	lr

023fdafc <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fdafc:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fdafe:	f001 fecd 	bl	23ff89c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fdb02:	2500      	movs	r5, #0
 23fdb04:	4e05      	ldr	r6, [pc, #20]	; (23fdb1c <module_user_init+0x20>)
 23fdb06:	4c06      	ldr	r4, [pc, #24]	; (23fdb20 <module_user_init+0x24>)
 23fdb08:	1ba4      	subs	r4, r4, r6
 23fdb0a:	08a4      	lsrs	r4, r4, #2
 23fdb0c:	42ac      	cmp	r4, r5
 23fdb0e:	d100      	bne.n	23fdb12 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fdb10:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fdb12:	f856 3b04 	ldr.w	r3, [r6], #4
 23fdb16:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fdb18:	3501      	adds	r5, #1
 23fdb1a:	e7f7      	b.n	23fdb0c <module_user_init+0x10>
 23fdb1c:	023fffd8 	.word	0x023fffd8
 23fdb20:	023ffffc 	.word	0x023ffffc

023fdb24 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fdb24:	f000 b815 	b.w	23fdb52 <setup>

023fdb28 <module_user_loop>:
}

void module_user_loop() {
 23fdb28:	b508      	push	{r3, lr}
    loop();
 23fdb2a:	f000 fa47 	bl	23fdfbc <loop>
    _post_loop();
}
 23fdb2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fdb32:	f001 be6b 	b.w	23ff80c <_post_loop>

023fdb36 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fdb36:	f000 bd43 	b.w	23fe5c0 <malloc>

023fdb3a <_Znaj>:
 23fdb3a:	f000 bd41 	b.w	23fe5c0 <malloc>

023fdb3e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fdb3e:	f000 bd4d 	b.w	23fe5dc <free>

023fdb42 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fdb42:	7800      	ldrb	r0, [r0, #0]
 23fdb44:	fab0 f080 	clz	r0, r0
 23fdb48:	0940      	lsrs	r0, r0, #5
 23fdb4a:	4770      	bx	lr

023fdb4c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fdb4c:	2301      	movs	r3, #1
 23fdb4e:	7003      	strb	r3, [r0, #0]
 23fdb50:	4770      	bx	lr

023fdb52 <setup>:
float volt = 0;
float ntu = 0;
float turbidity_percentage = 0;


void setup() {
 23fdb52:	b508      	push	{r3, lr}
  
 Serial.begin(115200);
 23fdb54:	f001 fd7e 	bl	23ff654 <_Z16_fetch_usbserialv>
 23fdb58:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 23fdb5c:	f001 fd6e 	bl	23ff63c <_ZN9USBSerial5beginEl>
 pinMode(TurbiditySensorPin,INPUT);
 23fdb60:	2100      	movs	r1, #0
 23fdb62:	200b      	movs	r0, #11
 23fdb64:	f001 ff0a 	bl	23ff97c <pinMode>
 pinMode(TdsSensorPin, INPUT);

}
 23fdb68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 pinMode(TdsSensorPin, INPUT);
 23fdb6c:	2100      	movs	r1, #0
 23fdb6e:	200e      	movs	r0, #14
 23fdb70:	f001 bf04 	b.w	23ff97c <pinMode>

023fdb74 <_Z12getMedianNumPii>:
  //delay(10000);

}


  int getMedianNum(int bArray[], int iFilterLen) {
 23fdb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int bTab[iFilterLen];
 23fdb76:	008a      	lsls	r2, r1, #2
 23fdb78:	3207      	adds	r2, #7
 23fdb7a:	f022 0207 	bic.w	r2, r2, #7
  int getMedianNum(int bArray[], int iFilterLen) {
 23fdb7e:	af00      	add	r7, sp, #0
    int bTab[iFilterLen];
 23fdb80:	ebad 0d02 	sub.w	sp, sp, r2
 23fdb84:	466c      	mov	r4, sp
 23fdb86:	2200      	movs	r2, #0
 23fdb88:	1e4b      	subs	r3, r1, #1
    for (byte i = 0; i<iFilterLen; i++)
 23fdb8a:	b2d5      	uxtb	r5, r2
 23fdb8c:	428d      	cmp	r5, r1
 23fdb8e:	f102 0201 	add.w	r2, r2, #1
 23fdb92:	da04      	bge.n	23fdb9e <_Z12getMedianNumPii+0x2a>
    bTab[i] = bArray[i];
 23fdb94:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 23fdb98:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
    for (byte i = 0; i<iFilterLen; i++)
 23fdb9c:	e7f5      	b.n	23fdb8a <_Z12getMedianNumPii+0x16>

  int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++) {
 23fdb9e:	2000      	movs	r0, #0
 23fdba0:	4298      	cmp	r0, r3
 23fdba2:	da11      	bge.n	23fdbc8 <_Z12getMedianNumPii+0x54>
 23fdba4:	4622      	mov	r2, r4
      for (i = 0; i < iFilterLen - j - 1; i++) {
 23fdba6:	2500      	movs	r5, #0
 23fdba8:	eba3 0e00 	sub.w	lr, r3, r0
 23fdbac:	4575      	cmp	r5, lr
 23fdbae:	da09      	bge.n	23fdbc4 <_Z12getMedianNumPii+0x50>

  if (bTab[i] > bTab[i + 1]) {
 23fdbb0:	6816      	ldr	r6, [r2, #0]
 23fdbb2:	f8d2 c004 	ldr.w	ip, [r2, #4]
 23fdbb6:	3501      	adds	r5, #1
 23fdbb8:	4566      	cmp	r6, ip
 23fdbba:	dd01      	ble.n	23fdbc0 <_Z12getMedianNumPii+0x4c>
    bTemp = bTab[i];
    bTab[i] = bTab[i + 1];
    bTab[i + 1] = bTemp;
 23fdbbc:	e9c2 c600 	strd	ip, r6, [r2]
 23fdbc0:	3204      	adds	r2, #4
 23fdbc2:	e7f3      	b.n	23fdbac <_Z12getMedianNumPii+0x38>
    for (j = 0; j < iFilterLen - 1; j++) {
 23fdbc4:	3001      	adds	r0, #1
 23fdbc6:	e7eb      	b.n	23fdba0 <_Z12getMedianNumPii+0x2c>
        }  
      }
    }

  if ((iFilterLen & 1) > 0)
 23fdbc8:	07ca      	lsls	r2, r1, #31
 23fdbca:	d506      	bpl.n	23fdbda <_Z12getMedianNumPii+0x66>
    bTemp = bTab[(iFilterLen - 1) / 2];
 23fdbcc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 23fdbd0:	105b      	asrs	r3, r3, #1
 23fdbd2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
      else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
      return bTemp;
}
 23fdbd6:	46bd      	mov	sp, r7
 23fdbd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
 23fdbda:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23fdbde:	1049      	asrs	r1, r1, #1
 23fdbe0:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 23fdbe4:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 23fdbe8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 23fdbec:	4418      	add	r0, r3
 23fdbee:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 23fdbf2:	1040      	asrs	r0, r0, #1
      return bTemp;
 23fdbf4:	e7ef      	b.n	23fdbd6 <_Z12getMedianNumPii+0x62>

023fdbf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fdbf6:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fdbf8:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fdbfa:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fdbfc:	b17c      	cbz	r4, 23fdc1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fdbfe:	6863      	ldr	r3, [r4, #4]
 23fdc00:	3b01      	subs	r3, #1
 23fdc02:	6063      	str	r3, [r4, #4]
 23fdc04:	b95b      	cbnz	r3, 23fdc1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fdc06:	6823      	ldr	r3, [r4, #0]
 23fdc08:	4620      	mov	r0, r4
 23fdc0a:	689b      	ldr	r3, [r3, #8]
 23fdc0c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fdc0e:	68a3      	ldr	r3, [r4, #8]
 23fdc10:	3b01      	subs	r3, #1
 23fdc12:	60a3      	str	r3, [r4, #8]
 23fdc14:	b91b      	cbnz	r3, 23fdc1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fdc16:	6823      	ldr	r3, [r4, #0]
 23fdc18:	4620      	mov	r0, r4
 23fdc1a:	68db      	ldr	r3, [r3, #12]
 23fdc1c:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fdc1e:	4628      	mov	r0, r5
 23fdc20:	bd38      	pop	{r3, r4, r5, pc}
 23fdc22:	0000      	movs	r0, r0
 23fdc24:	0000      	movs	r0, r0
	...

023fdc28 <_Z3TDSv>:
void TDS() {
 23fdc28:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdc2a:	ed2d 8b02 	vpush	{d8}
  static unsigned long analogSampleTimepoint = millis();
 23fdc2e:	4d9e      	ldr	r5, [pc, #632]	; (23fdea8 <_Z3TDSv+0x280>)
void TDS() {
 23fdc30:	b08d      	sub	sp, #52	; 0x34
  static unsigned long analogSampleTimepoint = millis();
 23fdc32:	e8d5 3f8f 	ldab	r3, [r5]
 23fdc36:	f013 0f01 	tst.w	r3, #1
 23fdc3a:	4c9c      	ldr	r4, [pc, #624]	; (23fdeac <_Z3TDSv+0x284>)
 23fdc3c:	d109      	bne.n	23fdc52 <_Z3TDSv+0x2a>
 23fdc3e:	4628      	mov	r0, r5
 23fdc40:	f7ff ff7f 	bl	23fdb42 <__cxa_guard_acquire>
 23fdc44:	b128      	cbz	r0, 23fdc52 <_Z3TDSv+0x2a>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fdc46:	f000 f9e3 	bl	23fe010 <HAL_Timer_Get_Milli_Seconds>
 23fdc4a:	6020      	str	r0, [r4, #0]
 23fdc4c:	4628      	mov	r0, r5
 23fdc4e:	f7ff ff7d 	bl	23fdb4c <__cxa_guard_release>
 23fdc52:	f000 f9dd 	bl	23fe010 <HAL_Timer_Get_Milli_Seconds>
  if (millis()-analogSampleTimepoint > 40U) {                                                   //every 40 milliseconds,read the analog value from the ADC
 23fdc56:	6823      	ldr	r3, [r4, #0]
 23fdc58:	1ac0      	subs	r0, r0, r3
 23fdc5a:	2828      	cmp	r0, #40	; 0x28
 23fdc5c:	d912      	bls.n	23fdc84 <_Z3TDSv+0x5c>
 23fdc5e:	f000 f9d7 	bl	23fe010 <HAL_Timer_Get_Milli_Seconds>
    analogSampleTimepoint = millis();
 23fdc62:	6020      	str	r0, [r4, #0]
    analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);                                 //read the analog value and store into the buffer
 23fdc64:	4c92      	ldr	r4, [pc, #584]	; (23fdeb0 <_Z3TDSv+0x288>)
 23fdc66:	200e      	movs	r0, #14
 23fdc68:	6825      	ldr	r5, [r4, #0]
 23fdc6a:	f001 fe98 	bl	23ff99e <analogRead>
 23fdc6e:	4b91      	ldr	r3, [pc, #580]	; (23fdeb4 <_Z3TDSv+0x28c>)
 23fdc70:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    analogBufferIndex++;
 23fdc74:	6823      	ldr	r3, [r4, #0]
      if (analogBufferIndex == SCOUNT)
 23fdc76:	2b1d      	cmp	r3, #29
    analogBufferIndex++;
 23fdc78:	f103 0201 	add.w	r2, r3, #1
          analogBufferIndex = 0;
 23fdc7c:	bf0a      	itet	eq
 23fdc7e:	2300      	moveq	r3, #0
    analogBufferIndex++;
 23fdc80:	6022      	strne	r2, [r4, #0]
          analogBufferIndex = 0;
 23fdc82:	6023      	streq	r3, [r4, #0]
  static unsigned long printTimepoint = millis();
 23fdc84:	4d8c      	ldr	r5, [pc, #560]	; (23fdeb8 <_Z3TDSv+0x290>)
 23fdc86:	e8d5 3f8f 	ldab	r3, [r5]
 23fdc8a:	f013 0f01 	tst.w	r3, #1
 23fdc8e:	4c8b      	ldr	r4, [pc, #556]	; (23fdebc <_Z3TDSv+0x294>)
 23fdc90:	d109      	bne.n	23fdca6 <_Z3TDSv+0x7e>
 23fdc92:	4628      	mov	r0, r5
 23fdc94:	f7ff ff55 	bl	23fdb42 <__cxa_guard_acquire>
 23fdc98:	b128      	cbz	r0, 23fdca6 <_Z3TDSv+0x7e>
 23fdc9a:	f000 f9b9 	bl	23fe010 <HAL_Timer_Get_Milli_Seconds>
 23fdc9e:	6020      	str	r0, [r4, #0]
 23fdca0:	4628      	mov	r0, r5
 23fdca2:	f7ff ff53 	bl	23fdb4c <__cxa_guard_release>
 23fdca6:	f000 f9b3 	bl	23fe010 <HAL_Timer_Get_Milli_Seconds>
  if(millis()-printTimepoint > 800U) {
 23fdcaa:	6823      	ldr	r3, [r4, #0]
 23fdcac:	1ac0      	subs	r0, r0, r3
 23fdcae:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 23fdcb2:	f240 80de 	bls.w	23fde72 <_Z3TDSv+0x24a>
 23fdcb6:	f000 f9ab 	bl	23fe010 <HAL_Timer_Get_Milli_Seconds>
    for(copyIndex = 0; copyIndex < SCOUNT; copyIndex ++)
 23fdcba:	2300      	movs	r3, #0
 23fdcbc:	221f      	movs	r2, #31
 23fdcbe:	4980      	ldr	r1, [pc, #512]	; (23fdec0 <_Z3TDSv+0x298>)
    printTimepoint = millis();
 23fdcc0:	6020      	str	r0, [r4, #0]
    for(copyIndex = 0; copyIndex < SCOUNT; copyIndex ++)
 23fdcc2:	4c7c      	ldr	r4, [pc, #496]	; (23fdeb4 <_Z3TDSv+0x28c>)
 23fdcc4:	487f      	ldr	r0, [pc, #508]	; (23fdec4 <_Z3TDSv+0x29c>)
 23fdcc6:	600b      	str	r3, [r1, #0]
 23fdcc8:	3a01      	subs	r2, #1
 23fdcca:	d005      	beq.n	23fdcd8 <_Z3TDSv+0xb0>
        analogBufferTemp[copyIndex] = analogBuffer[copyIndex];
 23fdccc:	f854 3b04 	ldr.w	r3, [r4], #4
 23fdcd0:	f840 3b04 	str.w	r3, [r0], #4
    for(copyIndex = 0; copyIndex < SCOUNT; copyIndex ++)
 23fdcd4:	2301      	movs	r3, #1
 23fdcd6:	e7f7      	b.n	23fdcc8 <_Z3TDSv+0xa0>
 23fdcd8:	b10b      	cbz	r3, 23fdcde <_Z3TDSv+0xb6>
 23fdcda:	231e      	movs	r3, #30
 23fdcdc:	600b      	str	r3, [r1, #0]
        averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF/ 4095.0;           // read the analog value more stable by the median filtering algorithm, and convert to voltage value
 23fdcde:	211e      	movs	r1, #30
 23fdce0:	4878      	ldr	r0, [pc, #480]	; (23fdec4 <_Z3TDSv+0x29c>)
 23fdce2:	f7ff ff47 	bl	23fdb74 <_Z12getMedianNumPii>
 23fdce6:	ee07 0a90 	vmov	s15, r0
 23fdcea:	ed9f 7a77 	vldr	s14, [pc, #476]	; 23fdec8 <_Z3TDSv+0x2a0>
 23fdcee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23fdcf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 23fdcf6:	ed9f 7a75 	vldr	s14, [pc, #468]	; 23fdecc <_Z3TDSv+0x2a4>
 23fdcfa:	ee87 8a87 	vdiv.f32	s16, s15, s14
 23fdcfe:	4b74      	ldr	r3, [pc, #464]	; (23fded0 <_Z3TDSv+0x2a8>)
 23fdd00:	ed83 8a00 	vstr	s16, [r3]
        float compensationCoefficient = 1.0 + 0.02 * (temperature-25.0);                        // temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
 23fdd04:	4b73      	ldr	r3, [pc, #460]	; (23fded4 <_Z3TDSv+0x2ac>)
 23fdd06:	6818      	ldr	r0, [r3, #0]
 23fdd08:	f7ff f990 	bl	23fd02c <__aeabi_i2d>
 23fdd0c:	2200      	movs	r2, #0
 23fdd0e:	4b72      	ldr	r3, [pc, #456]	; (23fded8 <_Z3TDSv+0x2b0>)
 23fdd10:	f7ff f83e 	bl	23fcd90 <__aeabi_dsub>
 23fdd14:	a35a      	add	r3, pc, #360	; (adr r3, 23fde80 <_Z3TDSv+0x258>)
 23fdd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fdd1a:	f7ff f9f1 	bl	23fd100 <__aeabi_dmul>
 23fdd1e:	2200      	movs	r2, #0
 23fdd20:	4b6e      	ldr	r3, [pc, #440]	; (23fdedc <_Z3TDSv+0x2b4>)
 23fdd22:	f7ff f837 	bl	23fcd94 <__adddf3>
 23fdd26:	f7ff fce3 	bl	23fd6f0 <__aeabi_d2f>
  tdsValue = (133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds value
 23fdd2a:	ee07 0a90 	vmov	s15, r0
 23fdd2e:	eec8 7a27 	vdiv.f32	s15, s16, s15
 23fdd32:	ee17 0a90 	vmov	r0, s15
 23fdd36:	f7ff f98b 	bl	23fd050 <__aeabi_f2d>
 23fdd3a:	a353      	add	r3, pc, #332	; (adr r3, 23fde88 <_Z3TDSv+0x260>)
 23fdd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fdd40:	4604      	mov	r4, r0
 23fdd42:	460d      	mov	r5, r1
 23fdd44:	f7ff f9dc 	bl	23fd100 <__aeabi_dmul>
 23fdd48:	4622      	mov	r2, r4
 23fdd4a:	462b      	mov	r3, r5
 23fdd4c:	f7ff f9d8 	bl	23fd100 <__aeabi_dmul>
 23fdd50:	4622      	mov	r2, r4
 23fdd52:	462b      	mov	r3, r5
 23fdd54:	f7ff f9d4 	bl	23fd100 <__aeabi_dmul>
 23fdd58:	a34d      	add	r3, pc, #308	; (adr r3, 23fde90 <_Z3TDSv+0x268>)
 23fdd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fdd5e:	4606      	mov	r6, r0
 23fdd60:	460f      	mov	r7, r1
 23fdd62:	4620      	mov	r0, r4
 23fdd64:	4629      	mov	r1, r5
 23fdd66:	f7ff f9cb 	bl	23fd100 <__aeabi_dmul>
 23fdd6a:	4622      	mov	r2, r4
 23fdd6c:	462b      	mov	r3, r5
 23fdd6e:	f7ff f9c7 	bl	23fd100 <__aeabi_dmul>
 23fdd72:	4602      	mov	r2, r0
 23fdd74:	460b      	mov	r3, r1
 23fdd76:	4630      	mov	r0, r6
 23fdd78:	4639      	mov	r1, r7
 23fdd7a:	f7ff f809 	bl	23fcd90 <__aeabi_dsub>
 23fdd7e:	a346      	add	r3, pc, #280	; (adr r3, 23fde98 <_Z3TDSv+0x270>)
 23fdd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fdd84:	4606      	mov	r6, r0
 23fdd86:	460f      	mov	r7, r1
 23fdd88:	4620      	mov	r0, r4
 23fdd8a:	4629      	mov	r1, r5
 23fdd8c:	f7ff f9b8 	bl	23fd100 <__aeabi_dmul>
 23fdd90:	4602      	mov	r2, r0
 23fdd92:	460b      	mov	r3, r1
 23fdd94:	4630      	mov	r0, r6
 23fdd96:	4639      	mov	r1, r7
 23fdd98:	f7fe fffc 	bl	23fcd94 <__adddf3>
 23fdd9c:	2200      	movs	r2, #0
 23fdd9e:	4b50      	ldr	r3, [pc, #320]	; (23fdee0 <_Z3TDSv+0x2b8>)
 23fdda0:	f7ff f9ae 	bl	23fd100 <__aeabi_dmul>
 23fdda4:	f7ff fca4 	bl	23fd6f0 <__aeabi_d2f>
 23fdda8:	4c4e      	ldr	r4, [pc, #312]	; (23fdee4 <_Z3TDSv+0x2bc>)
  ecValue = tdsValue/6.41;
 23fddaa:	4d4f      	ldr	r5, [pc, #316]	; (23fdee8 <_Z3TDSv+0x2c0>)
  tdsValue = (133.42*compensationVolatge*compensationVolatge*compensationVolatge - 255.86*compensationVolatge*compensationVolatge + 857.39*compensationVolatge)*0.5; //convert voltage value to tds value
 23fddac:	6020      	str	r0, [r4, #0]
  ecValue = tdsValue/6.41;
 23fddae:	f7ff f94f 	bl	23fd050 <__aeabi_f2d>
 23fddb2:	a33b      	add	r3, pc, #236	; (adr r3, 23fdea0 <_Z3TDSv+0x278>)
 23fddb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fddb8:	f7ff facc 	bl	23fd354 <__aeabi_ddiv>
 23fddbc:	f7ff fc98 	bl	23fd6f0 <__aeabi_d2f>
 23fddc0:	6028      	str	r0, [r5, #0]
  Serial.print("TDS Value:");
 23fddc2:	f001 fc47 	bl	23ff654 <_Z16_fetch_usbserialv>
 23fddc6:	4949      	ldr	r1, [pc, #292]	; (23fdeec <_Z3TDSv+0x2c4>)
 23fddc8:	f001 f91a 	bl	23ff000 <_ZN5Print5printEPKc>
  Serial.print(tdsValue, 2);
 23fddcc:	f001 fc42 	bl	23ff654 <_Z16_fetch_usbserialv>
 23fddd0:	ed94 0a00 	vldr	s0, [r4]
 23fddd4:	2102      	movs	r1, #2
 23fddd6:	f001 fa17 	bl	23ff208 <_ZN5Print5printEfi>
  Serial.println("ppm");
 23fddda:	f001 fc3b 	bl	23ff654 <_Z16_fetch_usbserialv>
 23fddde:	4944      	ldr	r1, [pc, #272]	; (23fdef0 <_Z3TDSv+0x2c8>)
 23fdde0:	f001 f921 	bl	23ff026 <_ZN5Print7printlnEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 23fdde4:	4943      	ldr	r1, [pc, #268]	; (23fdef4 <_Z3TDSv+0x2cc>)
 23fdde6:	a808      	add	r0, sp, #32
 23fdde8:	f001 fad9 	bl	23ff39e <_ZN6StringC1EPK19__FlashStringHelper>
  Particle.publish("TDS:" + String(tdsValue, 2) + "ppm", PRIVATE);
 23fddec:	ed94 0a00 	vldr	s0, [r4]
 23fddf0:	2102      	movs	r1, #2
 23fddf2:	a804      	add	r0, sp, #16
 23fddf4:	f001 fb0c 	bl	23ff410 <_ZN6StringC1Efi>
 23fddf8:	a904      	add	r1, sp, #16
 23fddfa:	a808      	add	r0, sp, #32
 23fddfc:	f001 fb39 	bl	23ff472 <_ZplRK15StringSumHelperRK6String>
 23fde00:	493b      	ldr	r1, [pc, #236]	; (23fdef0 <_Z3TDSv+0x2c8>)
 23fde02:	f001 fb42 	bl	23ff48a <_ZplRK15StringSumHelperPKc>
	const char * c_str() const { return buffer; }
 23fde06:	4c3c      	ldr	r4, [pc, #240]	; (23fdef8 <_Z3TDSv+0x2d0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23fde08:	2200      	movs	r2, #0
 23fde0a:	7823      	ldrb	r3, [r4, #0]
 23fde0c:	6801      	ldr	r1, [r0, #0]
 23fde0e:	f88d 3000 	strb.w	r3, [sp]
 23fde12:	a802      	add	r0, sp, #8
 23fde14:	233c      	movs	r3, #60	; 0x3c
 23fde16:	f000 fda7 	bl	23fe968 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 23fde1a:	a803      	add	r0, sp, #12
 23fde1c:	f7ff feeb 	bl	23fdbf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fde20:	a804      	add	r0, sp, #16
 23fde22:	f001 fa71 	bl	23ff308 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23fde26:	a808      	add	r0, sp, #32
 23fde28:	f001 fa6e 	bl	23ff308 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 23fde2c:	4933      	ldr	r1, [pc, #204]	; (23fdefc <_Z3TDSv+0x2d4>)
 23fde2e:	a808      	add	r0, sp, #32
 23fde30:	f001 fab5 	bl	23ff39e <_ZN6StringC1EPK19__FlashStringHelper>
  Particle.publish("EC:" + String(ecValue, 2) + "mS/m", PRIVATE);
 23fde34:	ed95 0a00 	vldr	s0, [r5]
 23fde38:	2102      	movs	r1, #2
 23fde3a:	a804      	add	r0, sp, #16
 23fde3c:	f001 fae8 	bl	23ff410 <_ZN6StringC1Efi>
 23fde40:	a904      	add	r1, sp, #16
 23fde42:	a808      	add	r0, sp, #32
 23fde44:	f001 fb15 	bl	23ff472 <_ZplRK15StringSumHelperRK6String>
 23fde48:	492d      	ldr	r1, [pc, #180]	; (23fdf00 <_Z3TDSv+0x2d8>)
 23fde4a:	f001 fb1e 	bl	23ff48a <_ZplRK15StringSumHelperPKc>
	const char * c_str() const { return buffer; }
 23fde4e:	7823      	ldrb	r3, [r4, #0]
 23fde50:	6801      	ldr	r1, [r0, #0]
 23fde52:	2200      	movs	r2, #0
 23fde54:	f88d 3000 	strb.w	r3, [sp]
 23fde58:	a802      	add	r0, sp, #8
 23fde5a:	233c      	movs	r3, #60	; 0x3c
 23fde5c:	f000 fd84 	bl	23fe968 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 23fde60:	a803      	add	r0, sp, #12
 23fde62:	f7ff fec8 	bl	23fdbf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fde66:	a804      	add	r0, sp, #16
 23fde68:	f001 fa4e 	bl	23ff308 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23fde6c:	a808      	add	r0, sp, #32
 23fde6e:	f001 fa4b 	bl	23ff308 <_ZN6StringD1Ev>
}
 23fde72:	b00d      	add	sp, #52	; 0x34
 23fde74:	ecbd 8b02 	vpop	{d8}
 23fde78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fde7a:	bf00      	nop
 23fde7c:	f3af 8000 	nop.w
 23fde80:	47ae147b 	.word	0x47ae147b
 23fde84:	3f947ae1 	.word	0x3f947ae1
 23fde88:	a3d70a3d 	.word	0xa3d70a3d
 23fde8c:	4060ad70 	.word	0x4060ad70
 23fde90:	1eb851ec 	.word	0x1eb851ec
 23fde94:	406ffb85 	.word	0x406ffb85
 23fde98:	b851eb85 	.word	0xb851eb85
 23fde9c:	408acb1e 	.word	0x408acb1e
 23fdea0:	0a3d70a4 	.word	0x0a3d70a4
 23fdea4:	4019a3d7 	.word	0x4019a3d7
 23fdea8:	1007ad6c 	.word	0x1007ad6c
 23fdeac:	1007ad78 	.word	0x1007ad78
 23fdeb0:	1007adf4 	.word	0x1007adf4
 23fdeb4:	1007ad7c 	.word	0x1007ad7c
 23fdeb8:	1007ad68 	.word	0x1007ad68
 23fdebc:	1007ad74 	.word	0x1007ad74
 23fdec0:	1007ae74 	.word	0x1007ae74
 23fdec4:	1007adf8 	.word	0x1007adf8
 23fdec8:	40533333 	.word	0x40533333
 23fdecc:	457ff000 	.word	0x457ff000
 23fded0:	1007ae70 	.word	0x1007ae70
 23fded4:	1007acf8 	.word	0x1007acf8
 23fded8:	40390000 	.word	0x40390000
 23fdedc:	3ff00000 	.word	0x3ff00000
 23fdee0:	3fe00000 	.word	0x3fe00000
 23fdee4:	1007ae7c 	.word	0x1007ae7c
 23fdee8:	1007ae78 	.word	0x1007ae78
 23fdeec:	023ffd88 	.word	0x023ffd88
 23fdef0:	023ffd93 	.word	0x023ffd93
 23fdef4:	023ffd97 	.word	0x023ffd97
 23fdef8:	1007ad70 	.word	0x1007ad70
 23fdefc:	023ffd9c 	.word	0x023ffd9c
 23fdf00:	023ffda0 	.word	0x023ffda0

023fdf04 <_Z9Turbidityv>:
void Turbidity() {
 23fdf04:	b530      	push	{r4, r5, lr}
  int sensorValue = analogRead(TurbiditySensorPin);
 23fdf06:	200b      	movs	r0, #11
void Turbidity() {
 23fdf08:	b08d      	sub	sp, #52	; 0x34
  int sensorValue = analogRead(TurbiditySensorPin);
 23fdf0a:	f001 fd48 	bl	23ff99e <analogRead>
 23fdf0e:	4604      	mov	r4, r0
  Serial.println(sensorValue);
 23fdf10:	f001 fba0 	bl	23ff654 <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 23fdf14:	2c00      	cmp	r4, #0
 23fdf16:	4605      	mov	r5, r0
 23fdf18:	da3b      	bge.n	23fdf92 <_Z9Turbidityv+0x8e>
            t = print('-');
 23fdf1a:	212d      	movs	r1, #45	; 0x2d
 23fdf1c:	f001 f874 	bl	23ff008 <_ZN5Print5printEc>
            val = -n;
 23fdf20:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fdf22:	220a      	movs	r2, #10
 23fdf24:	4628      	mov	r0, r5
 23fdf26:	f001 f888 	bl	23ff03a <_ZN5Print11printNumberEmh>
        n += println();
 23fdf2a:	4628      	mov	r0, r5
  int turbidity = map(sensorValue, 35, 1500, 100, 0);
 23fdf2c:	2500      	movs	r5, #0
 23fdf2e:	f001 f86e 	bl	23ff00e <_ZN5Print7printlnEv>
 23fdf32:	2364      	movs	r3, #100	; 0x64
 23fdf34:	f240 52dc 	movw	r2, #1500	; 0x5dc
 23fdf38:	2123      	movs	r1, #35	; 0x23
 23fdf3a:	4620      	mov	r0, r4
 23fdf3c:	9500      	str	r5, [sp, #0]
 23fdf3e:	f000 fba1 	bl	23fe684 <_Z3mapiiiii>
 23fdf42:	4604      	mov	r4, r0
  delay(100);
 23fdf44:	2064      	movs	r0, #100	; 0x64
 23fdf46:	f000 fba9 	bl	23fe69c <delay>
    if (turbidity < 20) {
 23fdf4a:	2c13      	cmp	r4, #19
 23fdf4c:	dc23      	bgt.n	23fdf96 <_Z9Turbidityv+0x92>
	StringSumHelper(const char *p) : String(p) {}
 23fdf4e:	4917      	ldr	r1, [pc, #92]	; (23fdfac <_Z9Turbidityv+0xa8>)
 23fdf50:	a808      	add	r0, sp, #32
 23fdf52:	f001 fa24 	bl	23ff39e <_ZN6StringC1EPK19__FlashStringHelper>
            Particle.publish("its DiRTY "+ String(turbidity), PRIVATE);
 23fdf56:	220a      	movs	r2, #10
 23fdf58:	4621      	mov	r1, r4
 23fdf5a:	a804      	add	r0, sp, #16
 23fdf5c:	f001 fa45 	bl	23ff3ea <_ZN6StringC1Eih>
 23fdf60:	a904      	add	r1, sp, #16
 23fdf62:	a808      	add	r0, sp, #32
 23fdf64:	f001 fa85 	bl	23ff472 <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
 23fdf68:	4b11      	ldr	r3, [pc, #68]	; (23fdfb0 <_Z9Turbidityv+0xac>)
 23fdf6a:	6801      	ldr	r1, [r0, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23fdf6c:	781b      	ldrb	r3, [r3, #0]
 23fdf6e:	462a      	mov	r2, r5
 23fdf70:	f88d 3000 	strb.w	r3, [sp]
 23fdf74:	a802      	add	r0, sp, #8
 23fdf76:	233c      	movs	r3, #60	; 0x3c
 23fdf78:	f000 fcf6 	bl	23fe968 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 23fdf7c:	a803      	add	r0, sp, #12
 23fdf7e:	f7ff fe3a 	bl	23fdbf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fdf82:	a804      	add	r0, sp, #16
 23fdf84:	f001 f9c0 	bl	23ff308 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23fdf88:	a808      	add	r0, sp, #32
 23fdf8a:	f001 f9bd 	bl	23ff308 <_ZN6StringD1Ev>
}
 23fdf8e:	b00d      	add	sp, #52	; 0x34
 23fdf90:	bd30      	pop	{r4, r5, pc}
            val = n;
 23fdf92:	4621      	mov	r1, r4
 23fdf94:	e7c5      	b.n	23fdf22 <_Z9Turbidityv+0x1e>
        } else  if ((turbidity > 20) && (turbidity < 50)) {
 23fdf96:	f1a4 0315 	sub.w	r3, r4, #21
 23fdf9a:	2b1c      	cmp	r3, #28
 23fdf9c:	d801      	bhi.n	23fdfa2 <_Z9Turbidityv+0x9e>
	StringSumHelper(const char *p) : String(p) {}
 23fdf9e:	4905      	ldr	r1, [pc, #20]	; (23fdfb4 <_Z9Turbidityv+0xb0>)
 23fdfa0:	e7d6      	b.n	23fdf50 <_Z9Turbidityv+0x4c>
        } else if (turbidity > 50) {
 23fdfa2:	2c32      	cmp	r4, #50	; 0x32
 23fdfa4:	ddf3      	ble.n	23fdf8e <_Z9Turbidityv+0x8a>
 23fdfa6:	4904      	ldr	r1, [pc, #16]	; (23fdfb8 <_Z9Turbidityv+0xb4>)
 23fdfa8:	e7d2      	b.n	23fdf50 <_Z9Turbidityv+0x4c>
 23fdfaa:	bf00      	nop
 23fdfac:	023ffda5 	.word	0x023ffda5
 23fdfb0:	1007ad70 	.word	0x1007ad70
 23fdfb4:	023ffdb0 	.word	0x023ffdb0
 23fdfb8:	023ffdbc 	.word	0x023ffdbc

023fdfbc <loop>:
void loop() {
 23fdfbc:	b508      	push	{r3, lr}
  TDS();
 23fdfbe:	f7ff fe33 	bl	23fdc28 <_Z3TDSv>
}
 23fdfc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Turbidity();
 23fdfc6:	f7ff bf9d 	b.w	23fdf04 <_Z9Turbidityv>
	...

023fdfcc <_GLOBAL__sub_I_analogBuffer>:
        val_(val) {
 23fdfcc:	2201      	movs	r2, #1
 23fdfce:	4b01      	ldr	r3, [pc, #4]	; (23fdfd4 <_GLOBAL__sub_I_analogBuffer+0x8>)
 23fdfd0:	701a      	strb	r2, [r3, #0]
}
 23fdfd2:	4770      	bx	lr
 23fdfd4:	1007ad70 	.word	0x1007ad70

023fdfd8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fdfd8:	b509      	push	{r0, r3, lr}
 23fdfda:	4804      	ldr	r0, [pc, #16]	; (23fdfec <os_mutex_recursive_create+0x14>)
 23fdfdc:	6800      	ldr	r0, [r0, #0]
 23fdfde:	4b04      	ldr	r3, [pc, #16]	; (23fdff0 <os_mutex_recursive_create+0x18>)
 23fdfe0:	4403      	add	r3, r0
 23fdfe2:	681b      	ldr	r3, [r3, #0]
 23fdfe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fdfe6:	9302      	str	r3, [sp, #8]
 23fdfe8:	bd09      	pop	{r0, r3, pc}
 23fdfea:	0000      	.short	0x0000
 23fdfec:	1007acf4 	.word	0x1007acf4
 23fdff0:	00000030 	.word	0x00000030

023fdff4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fdff4:	b509      	push	{r0, r3, lr}
 23fdff6:	4804      	ldr	r0, [pc, #16]	; (23fe008 <HAL_RNG_GetRandomNumber+0x14>)
 23fdff8:	6800      	ldr	r0, [r0, #0]
 23fdffa:	4b04      	ldr	r3, [pc, #16]	; (23fe00c <HAL_RNG_GetRandomNumber+0x18>)
 23fdffc:	4403      	add	r3, r0
 23fdffe:	681b      	ldr	r3, [r3, #0]
 23fe000:	685b      	ldr	r3, [r3, #4]
 23fe002:	9302      	str	r3, [sp, #8]
 23fe004:	bd09      	pop	{r0, r3, pc}
 23fe006:	0000      	.short	0x0000
 23fe008:	1007acf4 	.word	0x1007acf4
 23fe00c:	00000000 	.word	0x00000000

023fe010 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fe010:	b509      	push	{r0, r3, lr}
 23fe012:	4804      	ldr	r0, [pc, #16]	; (23fe024 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fe014:	6800      	ldr	r0, [r0, #0]
 23fe016:	4b04      	ldr	r3, [pc, #16]	; (23fe028 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fe018:	4403      	add	r3, r0
 23fe01a:	681b      	ldr	r3, [r3, #0]
 23fe01c:	695b      	ldr	r3, [r3, #20]
 23fe01e:	9302      	str	r3, [sp, #8]
 23fe020:	bd09      	pop	{r0, r3, pc}
 23fe022:	0000      	.short	0x0000
 23fe024:	1007acf4 	.word	0x1007acf4
 23fe028:	00000000 	.word	0x00000000

023fe02c <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fe02c:	b509      	push	{r0, r3, lr}
 23fe02e:	4804      	ldr	r0, [pc, #16]	; (23fe040 <hal_pin_validate_function+0x14>)
 23fe030:	6800      	ldr	r0, [r0, #0]
 23fe032:	4b04      	ldr	r3, [pc, #16]	; (23fe044 <hal_pin_validate_function+0x18>)
 23fe034:	4403      	add	r3, r0
 23fe036:	681b      	ldr	r3, [r3, #0]
 23fe038:	685b      	ldr	r3, [r3, #4]
 23fe03a:	9302      	str	r3, [sp, #8]
 23fe03c:	bd09      	pop	{r0, r3, pc}
 23fe03e:	0000      	.short	0x0000
 23fe040:	1007acf4 	.word	0x1007acf4
 23fe044:	00000014 	.word	0x00000014

023fe048 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fe048:	b509      	push	{r0, r3, lr}
 23fe04a:	4804      	ldr	r0, [pc, #16]	; (23fe05c <hal_gpio_mode+0x14>)
 23fe04c:	6800      	ldr	r0, [r0, #0]
 23fe04e:	4b04      	ldr	r3, [pc, #16]	; (23fe060 <hal_gpio_mode+0x18>)
 23fe050:	4403      	add	r3, r0
 23fe052:	681b      	ldr	r3, [r3, #0]
 23fe054:	689b      	ldr	r3, [r3, #8]
 23fe056:	9302      	str	r3, [sp, #8]
 23fe058:	bd09      	pop	{r0, r3, pc}
 23fe05a:	0000      	.short	0x0000
 23fe05c:	1007acf4 	.word	0x1007acf4
 23fe060:	00000014 	.word	0x00000014

023fe064 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23fe064:	b509      	push	{r0, r3, lr}
 23fe066:	4804      	ldr	r0, [pc, #16]	; (23fe078 <hal_adc_read+0x14>)
 23fe068:	6800      	ldr	r0, [r0, #0]
 23fe06a:	4b04      	ldr	r3, [pc, #16]	; (23fe07c <hal_adc_read+0x18>)
 23fe06c:	4403      	add	r3, r0
 23fe06e:	681b      	ldr	r3, [r3, #0]
 23fe070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe072:	9302      	str	r3, [sp, #8]
 23fe074:	bd09      	pop	{r0, r3, pc}
 23fe076:	0000      	.short	0x0000
 23fe078:	1007acf4 	.word	0x1007acf4
 23fe07c:	00000014 	.word	0x00000014

023fe080 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fe080:	b509      	push	{r0, r3, lr}
 23fe082:	4804      	ldr	r0, [pc, #16]	; (23fe094 <hal_i2c_write+0x14>)
 23fe084:	6800      	ldr	r0, [r0, #0]
 23fe086:	4b04      	ldr	r3, [pc, #16]	; (23fe098 <hal_i2c_write+0x18>)
 23fe088:	4403      	add	r3, r0
 23fe08a:	681b      	ldr	r3, [r3, #0]
 23fe08c:	6a1b      	ldr	r3, [r3, #32]
 23fe08e:	9302      	str	r3, [sp, #8]
 23fe090:	bd09      	pop	{r0, r3, pc}
 23fe092:	0000      	.short	0x0000
 23fe094:	1007acf4 	.word	0x1007acf4
 23fe098:	00000010 	.word	0x00000010

023fe09c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fe09c:	b509      	push	{r0, r3, lr}
 23fe09e:	4804      	ldr	r0, [pc, #16]	; (23fe0b0 <hal_i2c_available+0x14>)
 23fe0a0:	6800      	ldr	r0, [r0, #0]
 23fe0a2:	4b04      	ldr	r3, [pc, #16]	; (23fe0b4 <hal_i2c_available+0x18>)
 23fe0a4:	4403      	add	r3, r0
 23fe0a6:	681b      	ldr	r3, [r3, #0]
 23fe0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fe0aa:	9302      	str	r3, [sp, #8]
 23fe0ac:	bd09      	pop	{r0, r3, pc}
 23fe0ae:	0000      	.short	0x0000
 23fe0b0:	1007acf4 	.word	0x1007acf4
 23fe0b4:	00000010 	.word	0x00000010

023fe0b8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fe0b8:	b509      	push	{r0, r3, lr}
 23fe0ba:	4804      	ldr	r0, [pc, #16]	; (23fe0cc <hal_i2c_read+0x14>)
 23fe0bc:	6800      	ldr	r0, [r0, #0]
 23fe0be:	4b04      	ldr	r3, [pc, #16]	; (23fe0d0 <hal_i2c_read+0x18>)
 23fe0c0:	4403      	add	r3, r0
 23fe0c2:	681b      	ldr	r3, [r3, #0]
 23fe0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fe0c6:	9302      	str	r3, [sp, #8]
 23fe0c8:	bd09      	pop	{r0, r3, pc}
 23fe0ca:	0000      	.short	0x0000
 23fe0cc:	1007acf4 	.word	0x1007acf4
 23fe0d0:	00000010 	.word	0x00000010

023fe0d4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fe0d4:	b509      	push	{r0, r3, lr}
 23fe0d6:	4804      	ldr	r0, [pc, #16]	; (23fe0e8 <hal_i2c_peek+0x14>)
 23fe0d8:	6800      	ldr	r0, [r0, #0]
 23fe0da:	4b04      	ldr	r3, [pc, #16]	; (23fe0ec <hal_i2c_peek+0x18>)
 23fe0dc:	4403      	add	r3, r0
 23fe0de:	681b      	ldr	r3, [r3, #0]
 23fe0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe0e2:	9302      	str	r3, [sp, #8]
 23fe0e4:	bd09      	pop	{r0, r3, pc}
 23fe0e6:	0000      	.short	0x0000
 23fe0e8:	1007acf4 	.word	0x1007acf4
 23fe0ec:	00000010 	.word	0x00000010

023fe0f0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fe0f0:	b509      	push	{r0, r3, lr}
 23fe0f2:	4804      	ldr	r0, [pc, #16]	; (23fe104 <hal_i2c_flush+0x14>)
 23fe0f4:	6800      	ldr	r0, [r0, #0]
 23fe0f6:	4b04      	ldr	r3, [pc, #16]	; (23fe108 <hal_i2c_flush+0x18>)
 23fe0f8:	4403      	add	r3, r0
 23fe0fa:	681b      	ldr	r3, [r3, #0]
 23fe0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe0fe:	9302      	str	r3, [sp, #8]
 23fe100:	bd09      	pop	{r0, r3, pc}
 23fe102:	0000      	.short	0x0000
 23fe104:	1007acf4 	.word	0x1007acf4
 23fe108:	00000010 	.word	0x00000010

023fe10c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fe10c:	b509      	push	{r0, r3, lr}
 23fe10e:	4804      	ldr	r0, [pc, #16]	; (23fe120 <hal_i2c_is_enabled+0x14>)
 23fe110:	6800      	ldr	r0, [r0, #0]
 23fe112:	4b04      	ldr	r3, [pc, #16]	; (23fe124 <hal_i2c_is_enabled+0x18>)
 23fe114:	4403      	add	r3, r0
 23fe116:	681b      	ldr	r3, [r3, #0]
 23fe118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe11a:	9302      	str	r3, [sp, #8]
 23fe11c:	bd09      	pop	{r0, r3, pc}
 23fe11e:	0000      	.short	0x0000
 23fe120:	1007acf4 	.word	0x1007acf4
 23fe124:	00000010 	.word	0x00000010

023fe128 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fe128:	b509      	push	{r0, r3, lr}
 23fe12a:	4804      	ldr	r0, [pc, #16]	; (23fe13c <hal_i2c_init+0x14>)
 23fe12c:	6800      	ldr	r0, [r0, #0]
 23fe12e:	4b04      	ldr	r3, [pc, #16]	; (23fe140 <hal_i2c_init+0x18>)
 23fe130:	4403      	add	r3, r0
 23fe132:	681b      	ldr	r3, [r3, #0]
 23fe134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe136:	9302      	str	r3, [sp, #8]
 23fe138:	bd09      	pop	{r0, r3, pc}
 23fe13a:	0000      	.short	0x0000
 23fe13c:	1007acf4 	.word	0x1007acf4
 23fe140:	00000010 	.word	0x00000010

023fe144 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fe144:	b509      	push	{r0, r3, lr}
 23fe146:	4804      	ldr	r0, [pc, #16]	; (23fe158 <inet_inet_ntop+0x14>)
 23fe148:	6800      	ldr	r0, [r0, #0]
 23fe14a:	4b04      	ldr	r3, [pc, #16]	; (23fe15c <inet_inet_ntop+0x18>)
 23fe14c:	4403      	add	r3, r0
 23fe14e:	681b      	ldr	r3, [r3, #0]
 23fe150:	695b      	ldr	r3, [r3, #20]
 23fe152:	9302      	str	r3, [sp, #8]
 23fe154:	bd09      	pop	{r0, r3, pc}
 23fe156:	0000      	.short	0x0000
 23fe158:	1007acf4 	.word	0x1007acf4
 23fe15c:	0000004c 	.word	0x0000004c

023fe160 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fe160:	b509      	push	{r0, r3, lr}
 23fe162:	4804      	ldr	r0, [pc, #16]	; (23fe174 <netdb_freeaddrinfo+0x14>)
 23fe164:	6800      	ldr	r0, [r0, #0]
 23fe166:	4b04      	ldr	r3, [pc, #16]	; (23fe178 <netdb_freeaddrinfo+0x18>)
 23fe168:	4403      	add	r3, r0
 23fe16a:	681b      	ldr	r3, [r3, #0]
 23fe16c:	689b      	ldr	r3, [r3, #8]
 23fe16e:	9302      	str	r3, [sp, #8]
 23fe170:	bd09      	pop	{r0, r3, pc}
 23fe172:	0000      	.short	0x0000
 23fe174:	1007acf4 	.word	0x1007acf4
 23fe178:	00000050 	.word	0x00000050

023fe17c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fe17c:	b509      	push	{r0, r3, lr}
 23fe17e:	4804      	ldr	r0, [pc, #16]	; (23fe190 <netdb_getaddrinfo+0x14>)
 23fe180:	6800      	ldr	r0, [r0, #0]
 23fe182:	4b04      	ldr	r3, [pc, #16]	; (23fe194 <netdb_getaddrinfo+0x18>)
 23fe184:	4403      	add	r3, r0
 23fe186:	681b      	ldr	r3, [r3, #0]
 23fe188:	68db      	ldr	r3, [r3, #12]
 23fe18a:	9302      	str	r3, [sp, #8]
 23fe18c:	bd09      	pop	{r0, r3, pc}
 23fe18e:	0000      	.short	0x0000
 23fe190:	1007acf4 	.word	0x1007acf4
 23fe194:	00000050 	.word	0x00000050

023fe198 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fe198:	b509      	push	{r0, r3, lr}
 23fe19a:	4804      	ldr	r0, [pc, #16]	; (23fe1ac <hal_spi_init+0x14>)
 23fe19c:	6800      	ldr	r0, [r0, #0]
 23fe19e:	4b04      	ldr	r3, [pc, #16]	; (23fe1b0 <hal_spi_init+0x18>)
 23fe1a0:	4403      	add	r3, r0
 23fe1a2:	681b      	ldr	r3, [r3, #0]
 23fe1a4:	69db      	ldr	r3, [r3, #28]
 23fe1a6:	9302      	str	r3, [sp, #8]
 23fe1a8:	bd09      	pop	{r0, r3, pc}
 23fe1aa:	0000      	.short	0x0000
 23fe1ac:	1007acf4 	.word	0x1007acf4
 23fe1b0:	00000018 	.word	0x00000018

023fe1b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fe1b4:	b509      	push	{r0, r3, lr}
 23fe1b6:	4804      	ldr	r0, [pc, #16]	; (23fe1c8 <hal_spi_is_enabled+0x14>)
 23fe1b8:	6800      	ldr	r0, [r0, #0]
 23fe1ba:	4b04      	ldr	r3, [pc, #16]	; (23fe1cc <hal_spi_is_enabled+0x18>)
 23fe1bc:	4403      	add	r3, r0
 23fe1be:	681b      	ldr	r3, [r3, #0]
 23fe1c0:	6a1b      	ldr	r3, [r3, #32]
 23fe1c2:	9302      	str	r3, [sp, #8]
 23fe1c4:	bd09      	pop	{r0, r3, pc}
 23fe1c6:	0000      	.short	0x0000
 23fe1c8:	1007acf4 	.word	0x1007acf4
 23fe1cc:	00000018 	.word	0x00000018

023fe1d0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fe1d0:	b509      	push	{r0, r3, lr}
 23fe1d2:	4804      	ldr	r0, [pc, #16]	; (23fe1e4 <hal_usart_write+0x14>)
 23fe1d4:	6800      	ldr	r0, [r0, #0]
 23fe1d6:	4b04      	ldr	r3, [pc, #16]	; (23fe1e8 <hal_usart_write+0x18>)
 23fe1d8:	4403      	add	r3, r0
 23fe1da:	681b      	ldr	r3, [r3, #0]
 23fe1dc:	68db      	ldr	r3, [r3, #12]
 23fe1de:	9302      	str	r3, [sp, #8]
 23fe1e0:	bd09      	pop	{r0, r3, pc}
 23fe1e2:	0000      	.short	0x0000
 23fe1e4:	1007acf4 	.word	0x1007acf4
 23fe1e8:	00000024 	.word	0x00000024

023fe1ec <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fe1ec:	b509      	push	{r0, r3, lr}
 23fe1ee:	4804      	ldr	r0, [pc, #16]	; (23fe200 <hal_usart_available+0x14>)
 23fe1f0:	6800      	ldr	r0, [r0, #0]
 23fe1f2:	4b04      	ldr	r3, [pc, #16]	; (23fe204 <hal_usart_available+0x18>)
 23fe1f4:	4403      	add	r3, r0
 23fe1f6:	681b      	ldr	r3, [r3, #0]
 23fe1f8:	691b      	ldr	r3, [r3, #16]
 23fe1fa:	9302      	str	r3, [sp, #8]
 23fe1fc:	bd09      	pop	{r0, r3, pc}
 23fe1fe:	0000      	.short	0x0000
 23fe200:	1007acf4 	.word	0x1007acf4
 23fe204:	00000024 	.word	0x00000024

023fe208 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fe208:	b509      	push	{r0, r3, lr}
 23fe20a:	4804      	ldr	r0, [pc, #16]	; (23fe21c <hal_usart_read+0x14>)
 23fe20c:	6800      	ldr	r0, [r0, #0]
 23fe20e:	4b04      	ldr	r3, [pc, #16]	; (23fe220 <hal_usart_read+0x18>)
 23fe210:	4403      	add	r3, r0
 23fe212:	681b      	ldr	r3, [r3, #0]
 23fe214:	695b      	ldr	r3, [r3, #20]
 23fe216:	9302      	str	r3, [sp, #8]
 23fe218:	bd09      	pop	{r0, r3, pc}
 23fe21a:	0000      	.short	0x0000
 23fe21c:	1007acf4 	.word	0x1007acf4
 23fe220:	00000024 	.word	0x00000024

023fe224 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fe224:	b509      	push	{r0, r3, lr}
 23fe226:	4804      	ldr	r0, [pc, #16]	; (23fe238 <hal_usart_peek+0x14>)
 23fe228:	6800      	ldr	r0, [r0, #0]
 23fe22a:	4b04      	ldr	r3, [pc, #16]	; (23fe23c <hal_usart_peek+0x18>)
 23fe22c:	4403      	add	r3, r0
 23fe22e:	681b      	ldr	r3, [r3, #0]
 23fe230:	699b      	ldr	r3, [r3, #24]
 23fe232:	9302      	str	r3, [sp, #8]
 23fe234:	bd09      	pop	{r0, r3, pc}
 23fe236:	0000      	.short	0x0000
 23fe238:	1007acf4 	.word	0x1007acf4
 23fe23c:	00000024 	.word	0x00000024

023fe240 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fe240:	b509      	push	{r0, r3, lr}
 23fe242:	4804      	ldr	r0, [pc, #16]	; (23fe254 <hal_usart_flush+0x14>)
 23fe244:	6800      	ldr	r0, [r0, #0]
 23fe246:	4b04      	ldr	r3, [pc, #16]	; (23fe258 <hal_usart_flush+0x18>)
 23fe248:	4403      	add	r3, r0
 23fe24a:	681b      	ldr	r3, [r3, #0]
 23fe24c:	69db      	ldr	r3, [r3, #28]
 23fe24e:	9302      	str	r3, [sp, #8]
 23fe250:	bd09      	pop	{r0, r3, pc}
 23fe252:	0000      	.short	0x0000
 23fe254:	1007acf4 	.word	0x1007acf4
 23fe258:	00000024 	.word	0x00000024

023fe25c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fe25c:	b509      	push	{r0, r3, lr}
 23fe25e:	4804      	ldr	r0, [pc, #16]	; (23fe270 <hal_usart_is_enabled+0x14>)
 23fe260:	6800      	ldr	r0, [r0, #0]
 23fe262:	4b04      	ldr	r3, [pc, #16]	; (23fe274 <hal_usart_is_enabled+0x18>)
 23fe264:	4403      	add	r3, r0
 23fe266:	681b      	ldr	r3, [r3, #0]
 23fe268:	6a1b      	ldr	r3, [r3, #32]
 23fe26a:	9302      	str	r3, [sp, #8]
 23fe26c:	bd09      	pop	{r0, r3, pc}
 23fe26e:	0000      	.short	0x0000
 23fe270:	1007acf4 	.word	0x1007acf4
 23fe274:	00000024 	.word	0x00000024

023fe278 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fe278:	b509      	push	{r0, r3, lr}
 23fe27a:	4804      	ldr	r0, [pc, #16]	; (23fe28c <hal_usart_available_data_for_write+0x14>)
 23fe27c:	6800      	ldr	r0, [r0, #0]
 23fe27e:	4b04      	ldr	r3, [pc, #16]	; (23fe290 <hal_usart_available_data_for_write+0x18>)
 23fe280:	4403      	add	r3, r0
 23fe282:	681b      	ldr	r3, [r3, #0]
 23fe284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fe286:	9302      	str	r3, [sp, #8]
 23fe288:	bd09      	pop	{r0, r3, pc}
 23fe28a:	0000      	.short	0x0000
 23fe28c:	1007acf4 	.word	0x1007acf4
 23fe290:	00000024 	.word	0x00000024

023fe294 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fe294:	b509      	push	{r0, r3, lr}
 23fe296:	4804      	ldr	r0, [pc, #16]	; (23fe2a8 <hal_usart_init_ex+0x14>)
 23fe298:	6800      	ldr	r0, [r0, #0]
 23fe29a:	4b04      	ldr	r3, [pc, #16]	; (23fe2ac <hal_usart_init_ex+0x18>)
 23fe29c:	4403      	add	r3, r0
 23fe29e:	681b      	ldr	r3, [r3, #0]
 23fe2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe2a2:	9302      	str	r3, [sp, #8]
 23fe2a4:	bd09      	pop	{r0, r3, pc}
 23fe2a6:	0000      	.short	0x0000
 23fe2a8:	1007acf4 	.word	0x1007acf4
 23fe2ac:	00000024 	.word	0x00000024

023fe2b0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fe2b0:	b509      	push	{r0, r3, lr}
 23fe2b2:	4804      	ldr	r0, [pc, #16]	; (23fe2c4 <HAL_USB_USART_Init+0x14>)
 23fe2b4:	6800      	ldr	r0, [r0, #0]
 23fe2b6:	4b04      	ldr	r3, [pc, #16]	; (23fe2c8 <HAL_USB_USART_Init+0x18>)
 23fe2b8:	4403      	add	r3, r0
 23fe2ba:	681b      	ldr	r3, [r3, #0]
 23fe2bc:	681b      	ldr	r3, [r3, #0]
 23fe2be:	9302      	str	r3, [sp, #8]
 23fe2c0:	bd09      	pop	{r0, r3, pc}
 23fe2c2:	0000      	.short	0x0000
 23fe2c4:	1007acf4 	.word	0x1007acf4
 23fe2c8:	00000034 	.word	0x00000034

023fe2cc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fe2cc:	b509      	push	{r0, r3, lr}
 23fe2ce:	4804      	ldr	r0, [pc, #16]	; (23fe2e0 <HAL_USB_USART_Begin+0x14>)
 23fe2d0:	6800      	ldr	r0, [r0, #0]
 23fe2d2:	4b04      	ldr	r3, [pc, #16]	; (23fe2e4 <HAL_USB_USART_Begin+0x18>)
 23fe2d4:	4403      	add	r3, r0
 23fe2d6:	681b      	ldr	r3, [r3, #0]
 23fe2d8:	685b      	ldr	r3, [r3, #4]
 23fe2da:	9302      	str	r3, [sp, #8]
 23fe2dc:	bd09      	pop	{r0, r3, pc}
 23fe2de:	0000      	.short	0x0000
 23fe2e0:	1007acf4 	.word	0x1007acf4
 23fe2e4:	00000034 	.word	0x00000034

023fe2e8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fe2e8:	b509      	push	{r0, r3, lr}
 23fe2ea:	4804      	ldr	r0, [pc, #16]	; (23fe2fc <HAL_USB_USART_Available_Data+0x14>)
 23fe2ec:	6800      	ldr	r0, [r0, #0]
 23fe2ee:	4b04      	ldr	r3, [pc, #16]	; (23fe300 <HAL_USB_USART_Available_Data+0x18>)
 23fe2f0:	4403      	add	r3, r0
 23fe2f2:	681b      	ldr	r3, [r3, #0]
 23fe2f4:	691b      	ldr	r3, [r3, #16]
 23fe2f6:	9302      	str	r3, [sp, #8]
 23fe2f8:	bd09      	pop	{r0, r3, pc}
 23fe2fa:	0000      	.short	0x0000
 23fe2fc:	1007acf4 	.word	0x1007acf4
 23fe300:	00000034 	.word	0x00000034

023fe304 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fe304:	b509      	push	{r0, r3, lr}
 23fe306:	4804      	ldr	r0, [pc, #16]	; (23fe318 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fe308:	6800      	ldr	r0, [r0, #0]
 23fe30a:	4b04      	ldr	r3, [pc, #16]	; (23fe31c <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fe30c:	4403      	add	r3, r0
 23fe30e:	681b      	ldr	r3, [r3, #0]
 23fe310:	695b      	ldr	r3, [r3, #20]
 23fe312:	9302      	str	r3, [sp, #8]
 23fe314:	bd09      	pop	{r0, r3, pc}
 23fe316:	0000      	.short	0x0000
 23fe318:	1007acf4 	.word	0x1007acf4
 23fe31c:	00000034 	.word	0x00000034

023fe320 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fe320:	b509      	push	{r0, r3, lr}
 23fe322:	4804      	ldr	r0, [pc, #16]	; (23fe334 <HAL_USB_USART_Receive_Data+0x14>)
 23fe324:	6800      	ldr	r0, [r0, #0]
 23fe326:	4b04      	ldr	r3, [pc, #16]	; (23fe338 <HAL_USB_USART_Receive_Data+0x18>)
 23fe328:	4403      	add	r3, r0
 23fe32a:	681b      	ldr	r3, [r3, #0]
 23fe32c:	699b      	ldr	r3, [r3, #24]
 23fe32e:	9302      	str	r3, [sp, #8]
 23fe330:	bd09      	pop	{r0, r3, pc}
 23fe332:	0000      	.short	0x0000
 23fe334:	1007acf4 	.word	0x1007acf4
 23fe338:	00000034 	.word	0x00000034

023fe33c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fe33c:	b509      	push	{r0, r3, lr}
 23fe33e:	4804      	ldr	r0, [pc, #16]	; (23fe350 <HAL_USB_USART_Send_Data+0x14>)
 23fe340:	6800      	ldr	r0, [r0, #0]
 23fe342:	4b04      	ldr	r3, [pc, #16]	; (23fe354 <HAL_USB_USART_Send_Data+0x18>)
 23fe344:	4403      	add	r3, r0
 23fe346:	681b      	ldr	r3, [r3, #0]
 23fe348:	69db      	ldr	r3, [r3, #28]
 23fe34a:	9302      	str	r3, [sp, #8]
 23fe34c:	bd09      	pop	{r0, r3, pc}
 23fe34e:	0000      	.short	0x0000
 23fe350:	1007acf4 	.word	0x1007acf4
 23fe354:	00000034 	.word	0x00000034

023fe358 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fe358:	b509      	push	{r0, r3, lr}
 23fe35a:	4804      	ldr	r0, [pc, #16]	; (23fe36c <HAL_USB_USART_Flush_Data+0x14>)
 23fe35c:	6800      	ldr	r0, [r0, #0]
 23fe35e:	4b04      	ldr	r3, [pc, #16]	; (23fe370 <HAL_USB_USART_Flush_Data+0x18>)
 23fe360:	4403      	add	r3, r0
 23fe362:	681b      	ldr	r3, [r3, #0]
 23fe364:	6a1b      	ldr	r3, [r3, #32]
 23fe366:	9302      	str	r3, [sp, #8]
 23fe368:	bd09      	pop	{r0, r3, pc}
 23fe36a:	0000      	.short	0x0000
 23fe36c:	1007acf4 	.word	0x1007acf4
 23fe370:	00000034 	.word	0x00000034

023fe374 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fe374:	b509      	push	{r0, r3, lr}
 23fe376:	4804      	ldr	r0, [pc, #16]	; (23fe388 <set_system_mode+0x14>)
 23fe378:	6800      	ldr	r0, [r0, #0]
 23fe37a:	4b04      	ldr	r3, [pc, #16]	; (23fe38c <set_system_mode+0x18>)
 23fe37c:	4403      	add	r3, r0
 23fe37e:	681b      	ldr	r3, [r3, #0]
 23fe380:	685b      	ldr	r3, [r3, #4]
 23fe382:	9302      	str	r3, [sp, #8]
 23fe384:	bd09      	pop	{r0, r3, pc}
 23fe386:	0000      	.short	0x0000
 23fe388:	1007acf4 	.word	0x1007acf4
 23fe38c:	00000008 	.word	0x00000008

023fe390 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fe390:	b509      	push	{r0, r3, lr}
 23fe392:	4804      	ldr	r0, [pc, #16]	; (23fe3a4 <system_delay_ms+0x14>)
 23fe394:	6800      	ldr	r0, [r0, #0]
 23fe396:	4b04      	ldr	r3, [pc, #16]	; (23fe3a8 <system_delay_ms+0x18>)
 23fe398:	4403      	add	r3, r0
 23fe39a:	681b      	ldr	r3, [r3, #0]
 23fe39c:	695b      	ldr	r3, [r3, #20]
 23fe39e:	9302      	str	r3, [sp, #8]
 23fe3a0:	bd09      	pop	{r0, r3, pc}
 23fe3a2:	0000      	.short	0x0000
 23fe3a4:	1007acf4 	.word	0x1007acf4
 23fe3a8:	00000008 	.word	0x00000008

023fe3ac <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23fe3ac:	b509      	push	{r0, r3, lr}
 23fe3ae:	4804      	ldr	r0, [pc, #16]	; (23fe3c0 <application_thread_current+0x14>)
 23fe3b0:	6800      	ldr	r0, [r0, #0]
 23fe3b2:	4b04      	ldr	r3, [pc, #16]	; (23fe3c4 <application_thread_current+0x18>)
 23fe3b4:	4403      	add	r3, r0
 23fe3b6:	681b      	ldr	r3, [r3, #0]
 23fe3b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fe3ba:	9302      	str	r3, [sp, #8]
 23fe3bc:	bd09      	pop	{r0, r3, pc}
 23fe3be:	0000      	.short	0x0000
 23fe3c0:	1007acf4 	.word	0x1007acf4
 23fe3c4:	00000008 	.word	0x00000008

023fe3c8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fe3c8:	b509      	push	{r0, r3, lr}
 23fe3ca:	4804      	ldr	r0, [pc, #16]	; (23fe3dc <application_thread_invoke+0x14>)
 23fe3cc:	6800      	ldr	r0, [r0, #0]
 23fe3ce:	4b04      	ldr	r3, [pc, #16]	; (23fe3e0 <application_thread_invoke+0x18>)
 23fe3d0:	4403      	add	r3, r0
 23fe3d2:	681b      	ldr	r3, [r3, #0]
 23fe3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fe3d6:	9302      	str	r3, [sp, #8]
 23fe3d8:	bd09      	pop	{r0, r3, pc}
 23fe3da:	0000      	.short	0x0000
 23fe3dc:	1007acf4 	.word	0x1007acf4
 23fe3e0:	00000008 	.word	0x00000008

023fe3e4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fe3e4:	b509      	push	{r0, r3, lr}
 23fe3e6:	4804      	ldr	r0, [pc, #16]	; (23fe3f8 <system_ctrl_set_app_request_handler+0x14>)
 23fe3e8:	6800      	ldr	r0, [r0, #0]
 23fe3ea:	4b04      	ldr	r3, [pc, #16]	; (23fe3fc <system_ctrl_set_app_request_handler+0x18>)
 23fe3ec:	4403      	add	r3, r0
 23fe3ee:	681b      	ldr	r3, [r3, #0]
 23fe3f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fe3f4:	9302      	str	r3, [sp, #8]
 23fe3f6:	bd09      	pop	{r0, r3, pc}
 23fe3f8:	1007acf4 	.word	0x1007acf4
 23fe3fc:	00000008 	.word	0x00000008

023fe400 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fe400:	b509      	push	{r0, r3, lr}
 23fe402:	4804      	ldr	r0, [pc, #16]	; (23fe414 <system_ctrl_set_result+0x14>)
 23fe404:	6800      	ldr	r0, [r0, #0]
 23fe406:	4b04      	ldr	r3, [pc, #16]	; (23fe418 <system_ctrl_set_result+0x18>)
 23fe408:	4403      	add	r3, r0
 23fe40a:	681b      	ldr	r3, [r3, #0]
 23fe40c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fe410:	9302      	str	r3, [sp, #8]
 23fe412:	bd09      	pop	{r0, r3, pc}
 23fe414:	1007acf4 	.word	0x1007acf4
 23fe418:	00000008 	.word	0x00000008

023fe41c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fe41c:	b509      	push	{r0, r3, lr}
 23fe41e:	4804      	ldr	r0, [pc, #16]	; (23fe430 <spark_cloud_flag_connected+0x14>)
 23fe420:	6800      	ldr	r0, [r0, #0]
 23fe422:	4b04      	ldr	r3, [pc, #16]	; (23fe434 <spark_cloud_flag_connected+0x18>)
 23fe424:	4403      	add	r3, r0
 23fe426:	681b      	ldr	r3, [r3, #0]
 23fe428:	695b      	ldr	r3, [r3, #20]
 23fe42a:	9302      	str	r3, [sp, #8]
 23fe42c:	bd09      	pop	{r0, r3, pc}
 23fe42e:	0000      	.short	0x0000
 23fe430:	1007acf4 	.word	0x1007acf4
 23fe434:	0000002c 	.word	0x0000002c

023fe438 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23fe438:	b509      	push	{r0, r3, lr}
 23fe43a:	4804      	ldr	r0, [pc, #16]	; (23fe44c <spark_send_event+0x14>)
 23fe43c:	6800      	ldr	r0, [r0, #0]
 23fe43e:	4b04      	ldr	r3, [pc, #16]	; (23fe450 <spark_send_event+0x18>)
 23fe440:	4403      	add	r3, r0
 23fe442:	681b      	ldr	r3, [r3, #0]
 23fe444:	6a1b      	ldr	r3, [r3, #32]
 23fe446:	9302      	str	r3, [sp, #8]
 23fe448:	bd09      	pop	{r0, r3, pc}
 23fe44a:	0000      	.short	0x0000
 23fe44c:	1007acf4 	.word	0x1007acf4
 23fe450:	0000002c 	.word	0x0000002c

023fe454 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fe454:	b509      	push	{r0, r3, lr}
 23fe456:	4804      	ldr	r0, [pc, #16]	; (23fe468 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fe458:	6800      	ldr	r0, [r0, #0]
 23fe45a:	4b04      	ldr	r3, [pc, #16]	; (23fe46c <spark_set_random_seed_from_cloud_handler+0x18>)
 23fe45c:	4403      	add	r3, r0
 23fe45e:	681b      	ldr	r3, [r3, #0]
 23fe460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fe462:	9302      	str	r3, [sp, #8]
 23fe464:	bd09      	pop	{r0, r3, pc}
 23fe466:	0000      	.short	0x0000
 23fe468:	1007acf4 	.word	0x1007acf4
 23fe46c:	0000002c 	.word	0x0000002c

023fe470 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe470:	b509      	push	{r0, r3, lr}
 23fe472:	4804      	ldr	r0, [pc, #16]	; (23fe484 <network_connect+0x14>)
 23fe474:	6800      	ldr	r0, [r0, #0]
 23fe476:	4b04      	ldr	r3, [pc, #16]	; (23fe488 <network_connect+0x18>)
 23fe478:	4403      	add	r3, r0
 23fe47a:	681b      	ldr	r3, [r3, #0]
 23fe47c:	685b      	ldr	r3, [r3, #4]
 23fe47e:	9302      	str	r3, [sp, #8]
 23fe480:	bd09      	pop	{r0, r3, pc}
 23fe482:	0000      	.short	0x0000
 23fe484:	1007acf4 	.word	0x1007acf4
 23fe488:	00000028 	.word	0x00000028

023fe48c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fe48c:	b509      	push	{r0, r3, lr}
 23fe48e:	4804      	ldr	r0, [pc, #16]	; (23fe4a0 <network_connecting+0x14>)
 23fe490:	6800      	ldr	r0, [r0, #0]
 23fe492:	4b04      	ldr	r3, [pc, #16]	; (23fe4a4 <network_connecting+0x18>)
 23fe494:	4403      	add	r3, r0
 23fe496:	681b      	ldr	r3, [r3, #0]
 23fe498:	689b      	ldr	r3, [r3, #8]
 23fe49a:	9302      	str	r3, [sp, #8]
 23fe49c:	bd09      	pop	{r0, r3, pc}
 23fe49e:	0000      	.short	0x0000
 23fe4a0:	1007acf4 	.word	0x1007acf4
 23fe4a4:	00000028 	.word	0x00000028

023fe4a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fe4a8:	b509      	push	{r0, r3, lr}
 23fe4aa:	4804      	ldr	r0, [pc, #16]	; (23fe4bc <network_disconnect+0x14>)
 23fe4ac:	6800      	ldr	r0, [r0, #0]
 23fe4ae:	4b04      	ldr	r3, [pc, #16]	; (23fe4c0 <network_disconnect+0x18>)
 23fe4b0:	4403      	add	r3, r0
 23fe4b2:	681b      	ldr	r3, [r3, #0]
 23fe4b4:	68db      	ldr	r3, [r3, #12]
 23fe4b6:	9302      	str	r3, [sp, #8]
 23fe4b8:	bd09      	pop	{r0, r3, pc}
 23fe4ba:	0000      	.short	0x0000
 23fe4bc:	1007acf4 	.word	0x1007acf4
 23fe4c0:	00000028 	.word	0x00000028

023fe4c4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fe4c4:	b509      	push	{r0, r3, lr}
 23fe4c6:	4804      	ldr	r0, [pc, #16]	; (23fe4d8 <network_ready+0x14>)
 23fe4c8:	6800      	ldr	r0, [r0, #0]
 23fe4ca:	4b04      	ldr	r3, [pc, #16]	; (23fe4dc <network_ready+0x18>)
 23fe4cc:	4403      	add	r3, r0
 23fe4ce:	681b      	ldr	r3, [r3, #0]
 23fe4d0:	691b      	ldr	r3, [r3, #16]
 23fe4d2:	9302      	str	r3, [sp, #8]
 23fe4d4:	bd09      	pop	{r0, r3, pc}
 23fe4d6:	0000      	.short	0x0000
 23fe4d8:	1007acf4 	.word	0x1007acf4
 23fe4dc:	00000028 	.word	0x00000028

023fe4e0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe4e0:	b509      	push	{r0, r3, lr}
 23fe4e2:	4804      	ldr	r0, [pc, #16]	; (23fe4f4 <network_on+0x14>)
 23fe4e4:	6800      	ldr	r0, [r0, #0]
 23fe4e6:	4b04      	ldr	r3, [pc, #16]	; (23fe4f8 <network_on+0x18>)
 23fe4e8:	4403      	add	r3, r0
 23fe4ea:	681b      	ldr	r3, [r3, #0]
 23fe4ec:	695b      	ldr	r3, [r3, #20]
 23fe4ee:	9302      	str	r3, [sp, #8]
 23fe4f0:	bd09      	pop	{r0, r3, pc}
 23fe4f2:	0000      	.short	0x0000
 23fe4f4:	1007acf4 	.word	0x1007acf4
 23fe4f8:	00000028 	.word	0x00000028

023fe4fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe4fc:	b509      	push	{r0, r3, lr}
 23fe4fe:	4804      	ldr	r0, [pc, #16]	; (23fe510 <network_off+0x14>)
 23fe500:	6800      	ldr	r0, [r0, #0]
 23fe502:	4b04      	ldr	r3, [pc, #16]	; (23fe514 <network_off+0x18>)
 23fe504:	4403      	add	r3, r0
 23fe506:	681b      	ldr	r3, [r3, #0]
 23fe508:	699b      	ldr	r3, [r3, #24]
 23fe50a:	9302      	str	r3, [sp, #8]
 23fe50c:	bd09      	pop	{r0, r3, pc}
 23fe50e:	0000      	.short	0x0000
 23fe510:	1007acf4 	.word	0x1007acf4
 23fe514:	00000028 	.word	0x00000028

023fe518 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fe518:	b509      	push	{r0, r3, lr}
 23fe51a:	4804      	ldr	r0, [pc, #16]	; (23fe52c <network_listen+0x14>)
 23fe51c:	6800      	ldr	r0, [r0, #0]
 23fe51e:	4b04      	ldr	r3, [pc, #16]	; (23fe530 <network_listen+0x18>)
 23fe520:	4403      	add	r3, r0
 23fe522:	681b      	ldr	r3, [r3, #0]
 23fe524:	69db      	ldr	r3, [r3, #28]
 23fe526:	9302      	str	r3, [sp, #8]
 23fe528:	bd09      	pop	{r0, r3, pc}
 23fe52a:	0000      	.short	0x0000
 23fe52c:	1007acf4 	.word	0x1007acf4
 23fe530:	00000028 	.word	0x00000028

023fe534 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fe534:	b509      	push	{r0, r3, lr}
 23fe536:	4804      	ldr	r0, [pc, #16]	; (23fe548 <network_listening+0x14>)
 23fe538:	6800      	ldr	r0, [r0, #0]
 23fe53a:	4b04      	ldr	r3, [pc, #16]	; (23fe54c <network_listening+0x18>)
 23fe53c:	4403      	add	r3, r0
 23fe53e:	681b      	ldr	r3, [r3, #0]
 23fe540:	6a1b      	ldr	r3, [r3, #32]
 23fe542:	9302      	str	r3, [sp, #8]
 23fe544:	bd09      	pop	{r0, r3, pc}
 23fe546:	0000      	.short	0x0000
 23fe548:	1007acf4 	.word	0x1007acf4
 23fe54c:	00000028 	.word	0x00000028

023fe550 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fe550:	b509      	push	{r0, r3, lr}
 23fe552:	4804      	ldr	r0, [pc, #16]	; (23fe564 <network_set_listen_timeout+0x14>)
 23fe554:	6800      	ldr	r0, [r0, #0]
 23fe556:	4b04      	ldr	r3, [pc, #16]	; (23fe568 <network_set_listen_timeout+0x18>)
 23fe558:	4403      	add	r3, r0
 23fe55a:	681b      	ldr	r3, [r3, #0]
 23fe55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe55e:	9302      	str	r3, [sp, #8]
 23fe560:	bd09      	pop	{r0, r3, pc}
 23fe562:	0000      	.short	0x0000
 23fe564:	1007acf4 	.word	0x1007acf4
 23fe568:	00000028 	.word	0x00000028

023fe56c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fe56c:	b509      	push	{r0, r3, lr}
 23fe56e:	4804      	ldr	r0, [pc, #16]	; (23fe580 <network_get_listen_timeout+0x14>)
 23fe570:	6800      	ldr	r0, [r0, #0]
 23fe572:	4b04      	ldr	r3, [pc, #16]	; (23fe584 <network_get_listen_timeout+0x18>)
 23fe574:	4403      	add	r3, r0
 23fe576:	681b      	ldr	r3, [r3, #0]
 23fe578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe57a:	9302      	str	r3, [sp, #8]
 23fe57c:	bd09      	pop	{r0, r3, pc}
 23fe57e:	0000      	.short	0x0000
 23fe580:	1007acf4 	.word	0x1007acf4
 23fe584:	00000028 	.word	0x00000028

023fe588 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fe588:	b509      	push	{r0, r3, lr}
 23fe58a:	4804      	ldr	r0, [pc, #16]	; (23fe59c <network_is_on+0x14>)
 23fe58c:	6800      	ldr	r0, [r0, #0]
 23fe58e:	4b04      	ldr	r3, [pc, #16]	; (23fe5a0 <network_is_on+0x18>)
 23fe590:	4403      	add	r3, r0
 23fe592:	681b      	ldr	r3, [r3, #0]
 23fe594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe596:	9302      	str	r3, [sp, #8]
 23fe598:	bd09      	pop	{r0, r3, pc}
 23fe59a:	0000      	.short	0x0000
 23fe59c:	1007acf4 	.word	0x1007acf4
 23fe5a0:	00000028 	.word	0x00000028

023fe5a4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fe5a4:	b509      	push	{r0, r3, lr}
 23fe5a6:	4804      	ldr	r0, [pc, #16]	; (23fe5b8 <network_is_off+0x14>)
 23fe5a8:	6800      	ldr	r0, [r0, #0]
 23fe5aa:	4b04      	ldr	r3, [pc, #16]	; (23fe5bc <network_is_off+0x18>)
 23fe5ac:	4403      	add	r3, r0
 23fe5ae:	681b      	ldr	r3, [r3, #0]
 23fe5b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe5b2:	9302      	str	r3, [sp, #8]
 23fe5b4:	bd09      	pop	{r0, r3, pc}
 23fe5b6:	0000      	.short	0x0000
 23fe5b8:	1007acf4 	.word	0x1007acf4
 23fe5bc:	00000028 	.word	0x00000028

023fe5c0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fe5c0:	b509      	push	{r0, r3, lr}
 23fe5c2:	4804      	ldr	r0, [pc, #16]	; (23fe5d4 <malloc+0x14>)
 23fe5c4:	6800      	ldr	r0, [r0, #0]
 23fe5c6:	4b04      	ldr	r3, [pc, #16]	; (23fe5d8 <malloc+0x18>)
 23fe5c8:	4403      	add	r3, r0
 23fe5ca:	681b      	ldr	r3, [r3, #0]
 23fe5cc:	681b      	ldr	r3, [r3, #0]
 23fe5ce:	9302      	str	r3, [sp, #8]
 23fe5d0:	bd09      	pop	{r0, r3, pc}
 23fe5d2:	0000      	.short	0x0000
 23fe5d4:	1007acf4 	.word	0x1007acf4
 23fe5d8:	00000004 	.word	0x00000004

023fe5dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fe5dc:	b509      	push	{r0, r3, lr}
 23fe5de:	4804      	ldr	r0, [pc, #16]	; (23fe5f0 <free+0x14>)
 23fe5e0:	6800      	ldr	r0, [r0, #0]
 23fe5e2:	4b04      	ldr	r3, [pc, #16]	; (23fe5f4 <free+0x18>)
 23fe5e4:	4403      	add	r3, r0
 23fe5e6:	681b      	ldr	r3, [r3, #0]
 23fe5e8:	685b      	ldr	r3, [r3, #4]
 23fe5ea:	9302      	str	r3, [sp, #8]
 23fe5ec:	bd09      	pop	{r0, r3, pc}
 23fe5ee:	0000      	.short	0x0000
 23fe5f0:	1007acf4 	.word	0x1007acf4
 23fe5f4:	00000004 	.word	0x00000004

023fe5f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fe5f8:	b509      	push	{r0, r3, lr}
 23fe5fa:	4804      	ldr	r0, [pc, #16]	; (23fe60c <realloc+0x14>)
 23fe5fc:	6800      	ldr	r0, [r0, #0]
 23fe5fe:	4b04      	ldr	r3, [pc, #16]	; (23fe610 <realloc+0x18>)
 23fe600:	4403      	add	r3, r0
 23fe602:	681b      	ldr	r3, [r3, #0]
 23fe604:	689b      	ldr	r3, [r3, #8]
 23fe606:	9302      	str	r3, [sp, #8]
 23fe608:	bd09      	pop	{r0, r3, pc}
 23fe60a:	0000      	.short	0x0000
 23fe60c:	1007acf4 	.word	0x1007acf4
 23fe610:	00000004 	.word	0x00000004

023fe614 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fe614:	b509      	push	{r0, r3, lr}
 23fe616:	4804      	ldr	r0, [pc, #16]	; (23fe628 <abort+0x14>)
 23fe618:	6800      	ldr	r0, [r0, #0]
 23fe61a:	4b04      	ldr	r3, [pc, #16]	; (23fe62c <abort+0x18>)
 23fe61c:	4403      	add	r3, r0
 23fe61e:	681b      	ldr	r3, [r3, #0]
 23fe620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe622:	9302      	str	r3, [sp, #8]
 23fe624:	bd09      	pop	{r0, r3, pc}
 23fe626:	0000      	.short	0x0000
 23fe628:	1007acf4 	.word	0x1007acf4
 23fe62c:	00000004 	.word	0x00000004

023fe630 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fe630:	b509      	push	{r0, r3, lr}
 23fe632:	4804      	ldr	r0, [pc, #16]	; (23fe644 <_malloc_r+0x14>)
 23fe634:	6800      	ldr	r0, [r0, #0]
 23fe636:	4b04      	ldr	r3, [pc, #16]	; (23fe648 <_malloc_r+0x18>)
 23fe638:	4403      	add	r3, r0
 23fe63a:	681b      	ldr	r3, [r3, #0]
 23fe63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe63e:	9302      	str	r3, [sp, #8]
 23fe640:	bd09      	pop	{r0, r3, pc}
 23fe642:	0000      	.short	0x0000
 23fe644:	1007acf4 	.word	0x1007acf4
 23fe648:	00000004 	.word	0x00000004

023fe64c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fe64c:	b509      	push	{r0, r3, lr}
 23fe64e:	4804      	ldr	r0, [pc, #16]	; (23fe660 <__assert_func+0x14>)
 23fe650:	6800      	ldr	r0, [r0, #0]
 23fe652:	4b04      	ldr	r3, [pc, #16]	; (23fe664 <__assert_func+0x18>)
 23fe654:	4403      	add	r3, r0
 23fe656:	681b      	ldr	r3, [r3, #0]
 23fe658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe65a:	9302      	str	r3, [sp, #8]
 23fe65c:	bd09      	pop	{r0, r3, pc}
 23fe65e:	0000      	.short	0x0000
 23fe660:	1007acf4 	.word	0x1007acf4
 23fe664:	00000004 	.word	0x00000004

023fe668 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fe668:	b509      	push	{r0, r3, lr}
 23fe66a:	4804      	ldr	r0, [pc, #16]	; (23fe67c <newlib_impure_ptr_callback+0x14>)
 23fe66c:	6800      	ldr	r0, [r0, #0]
 23fe66e:	4b04      	ldr	r3, [pc, #16]	; (23fe680 <newlib_impure_ptr_callback+0x18>)
 23fe670:	4403      	add	r3, r0
 23fe672:	681b      	ldr	r3, [r3, #0]
 23fe674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe676:	9302      	str	r3, [sp, #8]
 23fe678:	bd09      	pop	{r0, r3, pc}
 23fe67a:	0000      	.short	0x0000
 23fe67c:	1007acf4 	.word	0x1007acf4
 23fe680:	00000004 	.word	0x00000004

023fe684 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 23fe684:	428a      	cmp	r2, r1
{
 23fe686:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
 23fe688:	d007      	beq.n	23fe69a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 23fe68a:	1a44      	subs	r4, r0, r1
 23fe68c:	9802      	ldr	r0, [sp, #8]
 23fe68e:	1ac0      	subs	r0, r0, r3
 23fe690:	4344      	muls	r4, r0
 23fe692:	1a50      	subs	r0, r2, r1
 23fe694:	fb94 f0f0 	sdiv	r0, r4, r0
 23fe698:	4418      	add	r0, r3
}
 23fe69a:	bd10      	pop	{r4, pc}

023fe69c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fe69c:	2100      	movs	r1, #0
 23fe69e:	f7ff be77 	b.w	23fe390 <system_delay_ms>

023fe6a2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fe6a2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fe6a4:	6883      	ldr	r3, [r0, #8]
 23fe6a6:	4604      	mov	r4, r0
 23fe6a8:	b90b      	cbnz	r3, 23fe6ae <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fe6aa:	f001 fa8b 	bl	23ffbc4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe6ae:	68c3      	ldr	r3, [r0, #12]
 23fe6b0:	4798      	blx	r3
      if (_M_manager)
 23fe6b2:	68a3      	ldr	r3, [r4, #8]
 23fe6b4:	b11b      	cbz	r3, 23fe6be <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fe6b6:	2203      	movs	r2, #3
 23fe6b8:	4621      	mov	r1, r4
 23fe6ba:	4620      	mov	r0, r4
 23fe6bc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fe6be:	4620      	mov	r0, r4
}
 23fe6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fe6c4:	2110      	movs	r1, #16
 23fe6c6:	f7ff ba3a 	b.w	23fdb3e <_ZdlPvj>

023fe6ca <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fe6ca:	b510      	push	{r4, lr}
      if (_M_manager)
 23fe6cc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fe6ce:	4604      	mov	r4, r0
      if (_M_manager)
 23fe6d0:	b113      	cbz	r3, 23fe6d8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fe6d2:	2203      	movs	r2, #3
 23fe6d4:	4601      	mov	r1, r0
 23fe6d6:	4798      	blx	r3
    }
 23fe6d8:	4620      	mov	r0, r4
 23fe6da:	bd10      	pop	{r4, pc}

023fe6dc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fe6dc:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe6de:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fe6e0:	460b      	mov	r3, r1
 23fe6e2:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe6e4:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fe6e8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fe6ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fe6f0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fe6f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fe6f8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fe6fc:	b002      	add	sp, #8
 23fe6fe:	bd10      	pop	{r4, pc}

023fe700 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fe700:	2300      	movs	r3, #0
 23fe702:	4802      	ldr	r0, [pc, #8]	; (23fe70c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fe704:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fe706:	f7ff bc67 	b.w	23fdfd8 <os_mutex_recursive_create>
 23fe70a:	bf00      	nop
 23fe70c:	1007ae80 	.word	0x1007ae80

023fe710 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fe710:	4770      	bx	lr

023fe712 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fe712:	2000      	movs	r0, #0
 23fe714:	4770      	bx	lr

023fe716 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fe716:	b510      	push	{r4, lr}
 23fe718:	4604      	mov	r4, r0
 23fe71a:	2110      	movs	r1, #16
 23fe71c:	f7ff fa0f 	bl	23fdb3e <_ZdlPvj>
 23fe720:	4620      	mov	r0, r4
 23fe722:	bd10      	pop	{r4, pc}

023fe724 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fe724:	b508      	push	{r3, lr}
      { delete this; }
 23fe726:	f7ff fff6 	bl	23fe716 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fe72a:	bd08      	pop	{r3, pc}

023fe72c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fe72c:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fe72e:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fe730:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fe734:	6002      	str	r2, [r0, #0]
 23fe736:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe738:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe73a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe73c:	680c      	ldr	r4, [r1, #0]
 23fe73e:	8085      	strh	r5, [r0, #4]
 23fe740:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe742:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fe744:	bd30      	pop	{r4, r5, pc}

023fe746 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fe746:	b510      	push	{r4, lr}
 23fe748:	4604      	mov	r4, r0
    free((void*)msg_);
 23fe74a:	6800      	ldr	r0, [r0, #0]
 23fe74c:	f7ff ff46 	bl	23fe5dc <free>
}
 23fe750:	4620      	mov	r0, r4
 23fe752:	bd10      	pop	{r4, pc}

023fe754 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fe754:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fe756:	68c4      	ldr	r4, [r0, #12]
 23fe758:	b314      	cbz	r4, 23fe7a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23fe75a:	7823      	ldrb	r3, [r4, #0]
 23fe75c:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fe75e:	2b02      	cmp	r3, #2
 23fe760:	d103      	bne.n	23fe76a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fe762:	f104 000c 	add.w	r0, r4, #12
 23fe766:	f7ff ffee 	bl	23fe746 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fe76a:	1d23      	adds	r3, r4, #4
 23fe76c:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fe76e:	b135      	cbz	r5, 23fe77e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23fe770:	4628      	mov	r0, r5
 23fe772:	f7ff ffaa 	bl	23fe6ca <_ZNSt14_Function_baseD1Ev>
 23fe776:	2110      	movs	r1, #16
 23fe778:	4628      	mov	r0, r5
 23fe77a:	f7ff f9e0 	bl	23fdb3e <_ZdlPvj>
 23fe77e:	f104 0308 	add.w	r3, r4, #8
 23fe782:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fe784:	b135      	cbz	r5, 23fe794 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fe786:	4628      	mov	r0, r5
 23fe788:	f7ff ff9f 	bl	23fe6ca <_ZNSt14_Function_baseD1Ev>
 23fe78c:	2110      	movs	r1, #16
 23fe78e:	4628      	mov	r0, r5
 23fe790:	f7ff f9d5 	bl	23fdb3e <_ZdlPvj>
 23fe794:	4620      	mov	r0, r4
 23fe796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fe79a:	2114      	movs	r1, #20
 23fe79c:	f7ff b9cf 	b.w	23fdb3e <_ZdlPvj>
 23fe7a0:	bd38      	pop	{r3, r4, r5, pc}

023fe7a2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fe7a2:	680b      	ldr	r3, [r1, #0]
 23fe7a4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fe7a6:	684b      	ldr	r3, [r1, #4]
 23fe7a8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fe7aa:	b113      	cbz	r3, 23fe7b2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fe7ac:	685a      	ldr	r2, [r3, #4]
 23fe7ae:	3201      	adds	r2, #1
 23fe7b0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fe7b2:	4770      	bx	lr

023fe7b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fe7b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe7b6:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fe7b8:	4668      	mov	r0, sp
 23fe7ba:	460d      	mov	r5, r1
 23fe7bc:	f7ff fff1 	bl	23fe7a2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fe7c0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fe7c2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fe7c4:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fe7c6:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fe7c8:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fe7ca:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fe7cc:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 23fe7ce:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fe7d0:	f7ff fa11 	bl	23fdbf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fe7d4:	b135      	cbz	r5, 23fe7e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fe7d6:	1d28      	adds	r0, r5, #4
 23fe7d8:	f7ff fa0d 	bl	23fdbf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe7dc:	2108      	movs	r1, #8
 23fe7de:	4628      	mov	r0, r5
 23fe7e0:	f7ff f9ad 	bl	23fdb3e <_ZdlPvj>
        return p;
    }
 23fe7e4:	4620      	mov	r0, r4
 23fe7e6:	b003      	add	sp, #12
 23fe7e8:	bd30      	pop	{r4, r5, pc}

023fe7ea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23fe7ea:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fe7ec:	b510      	push	{r4, lr}
      if (_M_empty())
 23fe7ee:	b90a      	cbnz	r2, 23fe7f4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23fe7f0:	f001 f9e8 	bl	23ffbc4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe7f4:	68c3      	ldr	r3, [r0, #12]
    }
 23fe7f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe7fa:	4718      	bx	r3

023fe7fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fe7fc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fe7fe:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fe800:	f100 0110 	add.w	r1, r0, #16
 23fe804:	f7ff fff1 	bl	23fe7ea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23fe808:	bd08      	pop	{r3, pc}

023fe80a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23fe80a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fe80c:	b510      	push	{r4, lr}
      if (_M_empty())
 23fe80e:	b90a      	cbnz	r2, 23fe814 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23fe810:	f001 f9d8 	bl	23ffbc4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe814:	68c3      	ldr	r3, [r0, #12]
    }
 23fe816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe81a:	4718      	bx	r3

023fe81c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fe81c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fe81e:	6800      	ldr	r0, [r0, #0]
 23fe820:	f100 0110 	add.w	r1, r0, #16
 23fe824:	f7ff fff1 	bl	23fe80a <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23fe828:	bd08      	pop	{r3, pc}
	...

023fe82c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23fe82c:	b538      	push	{r3, r4, r5, lr}
 23fe82e:	2300      	movs	r3, #0
 23fe830:	4604      	mov	r4, r0
 23fe832:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fe834:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23fe836:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fe838:	f7ff f97d 	bl	23fdb36 <_Znwj>
 23fe83c:	b128      	cbz	r0, 23fe84a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fe83e:	2301      	movs	r3, #1
 23fe840:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23fe844:	4b02      	ldr	r3, [pc, #8]	; (23fe850 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23fe846:	60c5      	str	r5, [r0, #12]
 23fe848:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fe84a:	6020      	str	r0, [r4, #0]
	}
 23fe84c:	4620      	mov	r0, r4
 23fe84e:	bd38      	pop	{r3, r4, r5, pc}
 23fe850:	023ffdd0 	.word	0x023ffdd0

023fe854 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23fe854:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fe856:	2300      	movs	r3, #0
 23fe858:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fe85a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fe85c:	4604      	mov	r4, r0
 23fe85e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fe860:	b12b      	cbz	r3, 23fe86e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fe862:	2202      	movs	r2, #2
 23fe864:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fe866:	68eb      	ldr	r3, [r5, #12]
 23fe868:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fe86a:	68ab      	ldr	r3, [r5, #8]
 23fe86c:	60a3      	str	r3, [r4, #8]
    }
 23fe86e:	4620      	mov	r0, r4
 23fe870:	bd38      	pop	{r3, r4, r5, pc}
	...

023fe874 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23fe874:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe876:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fe878:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23fe87a:	4668      	mov	r0, sp
 23fe87c:	f7ff ff56 	bl	23fe72c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fe880:	f04f 0302 	mov.w	r3, #2
 23fe884:	e8d4 2f4f 	ldrexb	r2, [r4]
 23fe888:	2a00      	cmp	r2, #0
 23fe88a:	d103      	bne.n	23fe894 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23fe88c:	e8c4 3f41 	strexb	r1, r3, [r4]
 23fe890:	2900      	cmp	r1, #0
 23fe892:	d1f7      	bne.n	23fe884 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23fe894:	d121      	bne.n	23fe8da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23fe896:	f104 050c 	add.w	r5, r4, #12
 23fe89a:	4669      	mov	r1, sp
 23fe89c:	4628      	mov	r0, r5
 23fe89e:	f7ff ff45 	bl	23fe72c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23fe8a2:	2201      	movs	r2, #1
 23fe8a4:	1c63      	adds	r3, r4, #1
 23fe8a6:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fe8aa:	2000      	movs	r0, #0
 23fe8ac:	f104 0308 	add.w	r3, r4, #8
 23fe8b0:	e8d3 6fef 	ldaex	r6, [r3]
 23fe8b4:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23fe8b8:	2a00      	cmp	r2, #0
 23fe8ba:	d1f9      	bne.n	23fe8b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23fe8bc:	b16e      	cbz	r6, 23fe8da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23fe8be:	f7ff fd75 	bl	23fe3ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fe8c2:	b178      	cbz	r0, 23fe8e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fe8c4:	4629      	mov	r1, r5
 23fe8c6:	4630      	mov	r0, r6
 23fe8c8:	f7ff ff8f 	bl	23fe7ea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23fe8cc:	4630      	mov	r0, r6
 23fe8ce:	f7ff fefc 	bl	23fe6ca <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fe8d2:	2110      	movs	r1, #16
 23fe8d4:	4630      	mov	r0, r6
 23fe8d6:	f7ff f932 	bl	23fdb3e <_ZdlPvj>
        p_->setError(std::move(error));
 23fe8da:	4668      	mov	r0, sp
 23fe8dc:	f7ff ff33 	bl	23fe746 <_ZN8particle5ErrorD1Ev>
    }
 23fe8e0:	b009      	add	sp, #36	; 0x24
 23fe8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fe8e4:	4631      	mov	r1, r6
 23fe8e6:	a802      	add	r0, sp, #8
 23fe8e8:	f7ff ffb4 	bl	23fe854 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fe8ec:	68e0      	ldr	r0, [r4, #12]
 23fe8ee:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fe8f2:	b108      	cbz	r0, 23fe8f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23fe8f4:	f001 f9ba 	bl	23ffc6c <strdup>
        type_(type) {
 23fe8f8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fe8fa:	2010      	movs	r0, #16
 23fe8fc:	f8ad 501c 	strh.w	r5, [sp, #28]
 23fe900:	f7ff f919 	bl	23fdb36 <_Znwj>
 23fe904:	4605      	mov	r5, r0
 23fe906:	b1e8      	cbz	r0, 23fe944 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23fe908:	2700      	movs	r7, #0
 23fe90a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fe90c:	2018      	movs	r0, #24
 23fe90e:	f7ff f912 	bl	23fdb36 <_Znwj>
 23fe912:	4604      	mov	r4, r0
 23fe914:	b188      	cbz	r0, 23fe93a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23fe916:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fe918:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fe91a:	a802      	add	r0, sp, #8
 23fe91c:	f7ff fede 	bl	23fe6dc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe920:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe922:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe924:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe926:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe928:	9204      	str	r2, [sp, #16]
 23fe92a:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fe92c:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23fe92e:	60e3      	str	r3, [r4, #12]
 23fe930:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23fe934:	9205      	str	r2, [sp, #20]
 23fe936:	f7ff fef9 	bl	23fe72c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23fe93a:	4b08      	ldr	r3, [pc, #32]	; (23fe95c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fe93c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fe93e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fe940:	4b07      	ldr	r3, [pc, #28]	; (23fe960 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23fe942:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23fe944:	a806      	add	r0, sp, #24
 23fe946:	f7ff fefe 	bl	23fe746 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fe94a:	a802      	add	r0, sp, #8
 23fe94c:	f7ff febd 	bl	23fe6ca <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fe950:	2200      	movs	r2, #0
 23fe952:	4629      	mov	r1, r5
 23fe954:	4803      	ldr	r0, [pc, #12]	; (23fe964 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23fe956:	f7ff fd37 	bl	23fe3c8 <application_thread_invoke>
 23fe95a:	e7b7      	b.n	23fe8cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23fe95c:	023fe7fd 	.word	0x023fe7fd
 23fe960:	023fea79 	.word	0x023fea79
 23fe964:	023fe6a3 	.word	0x023fe6a3

023fe968 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 23fe968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe96c:	b08b      	sub	sp, #44	; 0x2c
 23fe96e:	4605      	mov	r5, r0
 23fe970:	460f      	mov	r7, r1
 23fe972:	4690      	mov	r8, r2
 23fe974:	4699      	mov	r9, r3
 23fe976:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fe97a:	f7ff fd4f 	bl	23fe41c <spark_cloud_flag_connected>
 23fe97e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 23fe980:	4683      	mov	fp, r0
 23fe982:	bb38      	cbnz	r0, 23fe9d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 23fe984:	f64f 732e 	movw	r3, #65326	; 0xff2e
 23fe988:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fe98a:	a905      	add	r1, sp, #20
 23fe98c:	4630      	mov	r0, r6
 23fe98e:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fe992:	f7ff fecb 	bl	23fe72c <_ZN8particle5ErrorC1EOS0_>
 23fe996:	2014      	movs	r0, #20
 23fe998:	f7ff f8cd 	bl	23fdb36 <_Znwj>
 23fe99c:	4604      	mov	r4, r0
 23fe99e:	b148      	cbz	r0, 23fe9b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fe9a0:	2302      	movs	r3, #2
 23fe9a2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fe9a4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fe9a6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fe9aa:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fe9ac:	4631      	mov	r1, r6
 23fe9ae:	300c      	adds	r0, #12
 23fe9b0:	f7ff febc 	bl	23fe72c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fe9b4:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fe9b6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fe9b8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fe9bc:	f7ff ff36 	bl	23fe82c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fe9c0:	4630      	mov	r0, r6
 23fe9c2:	f7ff fec0 	bl	23fe746 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 23fe9c6:	a805      	add	r0, sp, #20
 23fe9c8:	f7ff febd 	bl	23fe746 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 23fe9cc:	4628      	mov	r0, r5
 23fe9ce:	b00b      	add	sp, #44	; 0x2c
 23fe9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
 23fe9d4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 23fe9d6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fe9d8:	2014      	movs	r0, #20
 23fe9da:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23fe9de:	9307      	str	r3, [sp, #28]
 23fe9e0:	f7ff f8a9 	bl	23fdb36 <_Znwj>
 23fe9e4:	4601      	mov	r1, r0
 23fe9e6:	b118      	cbz	r0, 23fe9f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fe9e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fe9ec:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fe9ee:	7044      	strb	r4, [r0, #1]
 23fe9f0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fe9f2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fe9f4:	f7ff ff1a 	bl	23fe82c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fe9f8:	4b1e      	ldr	r3, [pc, #120]	; (23fea74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fe9fa:	2008      	movs	r0, #8
 23fe9fc:	9308      	str	r3, [sp, #32]
 23fe9fe:	f7ff f89a 	bl	23fdb36 <_Znwj>
 23fea02:	4604      	mov	r4, r0
 23fea04:	b110      	cbz	r0, 23fea0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
 23fea06:	a903      	add	r1, sp, #12
 23fea08:	f7ff fecb 	bl	23fe7a2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fea0c:	464a      	mov	r2, r9
 23fea0e:	4641      	mov	r1, r8
 23fea10:	4638      	mov	r0, r7
 23fea12:	9600      	str	r6, [sp, #0]
 23fea14:	fa5f f38a 	uxtb.w	r3, sl
    d.handler_data = p.dataPtr();
 23fea18:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fea1a:	f7ff fd0d 	bl	23fe438 <spark_send_event>
 23fea1e:	b9b8      	cbnz	r0, 23fea50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
 23fea20:	9b03      	ldr	r3, [sp, #12]
 23fea22:	3301      	adds	r3, #1
 23fea24:	781b      	ldrb	r3, [r3, #0]
 23fea26:	b2db      	uxtb	r3, r3
 23fea28:	b993      	cbnz	r3, 23fea50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 23fea2a:	9305      	str	r3, [sp, #20]
 23fea2c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fea30:	a905      	add	r1, sp, #20
 23fea32:	a803      	add	r0, sp, #12
 23fea34:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fea38:	f7ff ff1c 	bl	23fe874 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fea3c:	a805      	add	r0, sp, #20
 23fea3e:	f7ff fe82 	bl	23fe746 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23fea42:	a805      	add	r0, sp, #20
 23fea44:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fea46:	f7ff feb5 	bl	23fe7b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fea4a:	a806      	add	r0, sp, #24
 23fea4c:	f7ff f8d3 	bl	23fdbf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fea50:	a903      	add	r1, sp, #12
 23fea52:	a805      	add	r0, sp, #20
 23fea54:	f7ff fea5 	bl	23fe7a2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fea58:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fea5a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fea5c:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 23fea5e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fea60:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 23fea62:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fea64:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fea66:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fea68:	f7ff f8c5 	bl	23fdbf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fea6c:	a804      	add	r0, sp, #16
 23fea6e:	f7ff f8c2 	bl	23fdbf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fea72:	e7ab      	b.n	23fe9cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 23fea74:	023feaf5 	.word	0x023feaf5

023fea78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fea78:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fea7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fea7c:	4605      	mov	r5, r0
	switch (__op)
 23fea7e:	d103      	bne.n	23fea88 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fea80:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fea82:	6003      	str	r3, [r0, #0]
      }
 23fea84:	2000      	movs	r0, #0
 23fea86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23fea88:	2a02      	cmp	r2, #2
 23fea8a:	d010      	beq.n	23feaae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23fea8c:	2a03      	cmp	r2, #3
 23fea8e:	d1f9      	bne.n	23fea84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fea90:	6804      	ldr	r4, [r0, #0]
 23fea92:	2c00      	cmp	r4, #0
 23fea94:	d0f6      	beq.n	23fea84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23fea96:	f104 0010 	add.w	r0, r4, #16
 23fea9a:	f7ff fe54 	bl	23fe746 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fea9e:	4620      	mov	r0, r4
 23feaa0:	f7ff fe13 	bl	23fe6ca <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23feaa4:	2118      	movs	r1, #24
 23feaa6:	4620      	mov	r0, r4
 23feaa8:	f7ff f849 	bl	23fdb3e <_ZdlPvj>
 23feaac:	e7ea      	b.n	23fea84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23feaae:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23feab0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23feab2:	f7ff f840 	bl	23fdb36 <_Znwj>
 23feab6:	4604      	mov	r4, r0
 23feab8:	b150      	cbz	r0, 23fead0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23feaba:	4631      	mov	r1, r6
 23feabc:	f7ff feca 	bl	23fe854 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23feac0:	6930      	ldr	r0, [r6, #16]
 23feac2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23feac6:	b108      	cbz	r0, 23feacc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23feac8:	f001 f8d0 	bl	23ffc6c <strdup>
        type_(type) {
 23feacc:	6120      	str	r0, [r4, #16]
 23feace:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23fead0:	602c      	str	r4, [r5, #0]
	}
 23fead2:	e7d7      	b.n	23fea84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023fead4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23fead4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fead6:	2300      	movs	r3, #0
 23fead8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23feada:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23feadc:	4604      	mov	r4, r0
 23feade:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23feae0:	b12b      	cbz	r3, 23feaee <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23feae2:	2202      	movs	r2, #2
 23feae4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23feae6:	68eb      	ldr	r3, [r5, #12]
 23feae8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23feaea:	68ab      	ldr	r3, [r5, #8]
 23feaec:	60a3      	str	r3, [r4, #8]
    }
 23feaee:	4620      	mov	r0, r4
 23feaf0:	bd38      	pop	{r3, r4, r5, pc}
	...

023feaf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23feaf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23feaf6:	4604      	mov	r4, r0
 23feaf8:	b089      	sub	sp, #36	; 0x24
 23feafa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23feafc:	a801      	add	r0, sp, #4
 23feafe:	4611      	mov	r1, r2
 23feb00:	f7ff fe58 	bl	23fe7b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23feb04:	b1a4      	cbz	r4, 23feb30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23feb06:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23feb08:	b11d      	cbz	r5, 23feb12 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23feb0a:	4628      	mov	r0, r5
 23feb0c:	f001 f8ae 	bl	23ffc6c <strdup>
 23feb10:	4605      	mov	r5, r0
 23feb12:	a801      	add	r0, sp, #4
 23feb14:	a903      	add	r1, sp, #12
        type_(type) {
 23feb16:	9503      	str	r5, [sp, #12]
 23feb18:	f8ad 4010 	strh.w	r4, [sp, #16]
 23feb1c:	f7ff feaa 	bl	23fe874 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23feb20:	a803      	add	r0, sp, #12
 23feb22:	f7ff fe10 	bl	23fe746 <_ZN8particle5ErrorD1Ev>
 23feb26:	a802      	add	r0, sp, #8
 23feb28:	f7ff f865 	bl	23fdbf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23feb2c:	b009      	add	sp, #36	; 0x24
 23feb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23feb30:	2301      	movs	r3, #1
      { return _M_ptr; }
 23feb32:	9d01      	ldr	r5, [sp, #4]
 23feb34:	e8d5 2f4f 	ldrexb	r2, [r5]
 23feb38:	2a00      	cmp	r2, #0
 23feb3a:	d103      	bne.n	23feb44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23feb3c:	e8c5 3f41 	strexb	r1, r3, [r5]
 23feb40:	2900      	cmp	r1, #0
 23feb42:	d1f7      	bne.n	23feb34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23feb44:	d1ef      	bne.n	23feb26 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23feb46:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23feb48:	2201      	movs	r2, #1
 23feb4a:	18eb      	adds	r3, r5, r3
 23feb4c:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23feb50:	1d2b      	adds	r3, r5, #4
 23feb52:	e8d3 6fef 	ldaex	r6, [r3]
 23feb56:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23feb5a:	2a00      	cmp	r2, #0
 23feb5c:	d1f9      	bne.n	23feb52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23feb5e:	2e00      	cmp	r6, #0
 23feb60:	d0e1      	beq.n	23feb26 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23feb62:	4620      	mov	r0, r4
 23feb64:	f7ff fc22 	bl	23fe3ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23feb68:	4607      	mov	r7, r0
 23feb6a:	b160      	cbz	r0, 23feb86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23feb6c:	4630      	mov	r0, r6
 23feb6e:	f105 010c 	add.w	r1, r5, #12
 23feb72:	f7ff fe4a 	bl	23fe80a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23feb76:	4630      	mov	r0, r6
 23feb78:	f7ff fda7 	bl	23fe6ca <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23feb7c:	2110      	movs	r1, #16
 23feb7e:	4630      	mov	r0, r6
 23feb80:	f7fe ffdd 	bl	23fdb3e <_ZdlPvj>
 23feb84:	e7cf      	b.n	23feb26 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23feb86:	4631      	mov	r1, r6
 23feb88:	a803      	add	r0, sp, #12
 23feb8a:	f7ff ffa3 	bl	23fead4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23feb8e:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23feb90:	2010      	movs	r0, #16
 23feb92:	f88d 301c 	strb.w	r3, [sp, #28]
 23feb96:	f7fe ffce 	bl	23fdb36 <_Znwj>
 23feb9a:	4605      	mov	r5, r0
 23feb9c:	b1d0      	cbz	r0, 23febd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23feb9e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23feba0:	2014      	movs	r0, #20
 23feba2:	f7fe ffc8 	bl	23fdb36 <_Znwj>
 23feba6:	4604      	mov	r4, r0
 23feba8:	b178      	cbz	r0, 23febca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23febaa:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23febac:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23febae:	a803      	add	r0, sp, #12
 23febb0:	f7ff fd94 	bl	23fe6dc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23febb4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23febb6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23febb8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23febba:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23febbc:	9205      	str	r2, [sp, #20]
 23febbe:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23febc0:	60e3      	str	r3, [r4, #12]
 23febc2:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23febc6:	9206      	str	r2, [sp, #24]
 23febc8:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23febca:	4b07      	ldr	r3, [pc, #28]	; (23febe8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23febcc:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23febce:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23febd0:	4b06      	ldr	r3, [pc, #24]	; (23febec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23febd2:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23febd4:	a803      	add	r0, sp, #12
 23febd6:	f7ff fd78 	bl	23fe6ca <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23febda:	2200      	movs	r2, #0
 23febdc:	4629      	mov	r1, r5
 23febde:	4804      	ldr	r0, [pc, #16]	; (23febf0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23febe0:	f7ff fbf2 	bl	23fe3c8 <application_thread_invoke>
 23febe4:	e7c7      	b.n	23feb76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23febe6:	bf00      	nop
 23febe8:	023fe81d 	.word	0x023fe81d
 23febec:	023febf5 	.word	0x023febf5
 23febf0:	023fe6a3 	.word	0x023fe6a3

023febf4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23febf4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23febf6:	b570      	push	{r4, r5, r6, lr}
 23febf8:	4604      	mov	r4, r0
	switch (__op)
 23febfa:	d103      	bne.n	23fec04 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23febfc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23febfe:	6003      	str	r3, [r0, #0]
      }
 23fec00:	2000      	movs	r0, #0
 23fec02:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23fec04:	2a02      	cmp	r2, #2
 23fec06:	d00c      	beq.n	23fec22 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23fec08:	2a03      	cmp	r2, #3
 23fec0a:	d1f9      	bne.n	23fec00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fec0c:	6804      	ldr	r4, [r0, #0]
 23fec0e:	2c00      	cmp	r4, #0
 23fec10:	d0f6      	beq.n	23fec00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fec12:	4620      	mov	r0, r4
 23fec14:	f7ff fd59 	bl	23fe6ca <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fec18:	2114      	movs	r1, #20
 23fec1a:	4620      	mov	r0, r4
 23fec1c:	f7fe ff8f 	bl	23fdb3e <_ZdlPvj>
 23fec20:	e7ee      	b.n	23fec00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fec22:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23fec24:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fec26:	f7fe ff86 	bl	23fdb36 <_Znwj>
 23fec2a:	4605      	mov	r5, r0
 23fec2c:	b120      	cbz	r0, 23fec38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 23fec2e:	4631      	mov	r1, r6
 23fec30:	f7ff ff50 	bl	23fead4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23fec34:	7c33      	ldrb	r3, [r6, #16]
 23fec36:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23fec38:	6025      	str	r5, [r4, #0]
	}
 23fec3a:	e7e1      	b.n	23fec00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

023fec3c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fec3c:	2200      	movs	r2, #0
 23fec3e:	6840      	ldr	r0, [r0, #4]
 23fec40:	4611      	mov	r1, r2
 23fec42:	f7ff bc77 	b.w	23fe534 <network_listening>

023fec46 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fec46:	2200      	movs	r2, #0
 23fec48:	6840      	ldr	r0, [r0, #4]
 23fec4a:	4611      	mov	r1, r2
 23fec4c:	f7ff bc8e 	b.w	23fe56c <network_get_listen_timeout>

023fec50 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fec50:	2200      	movs	r2, #0
 23fec52:	6840      	ldr	r0, [r0, #4]
 23fec54:	f7ff bc7c 	b.w	23fe550 <network_set_listen_timeout>

023fec58 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fec58:	2200      	movs	r2, #0
 23fec5a:	6840      	ldr	r0, [r0, #4]
 23fec5c:	f081 0101 	eor.w	r1, r1, #1
 23fec60:	f7ff bc5a 	b.w	23fe518 <network_listen>

023fec64 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fec64:	2300      	movs	r3, #0
 23fec66:	6840      	ldr	r0, [r0, #4]
 23fec68:	461a      	mov	r2, r3
 23fec6a:	4619      	mov	r1, r3
 23fec6c:	f7ff bc46 	b.w	23fe4fc <network_off>

023fec70 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fec70:	2300      	movs	r3, #0
 23fec72:	6840      	ldr	r0, [r0, #4]
 23fec74:	461a      	mov	r2, r3
 23fec76:	4619      	mov	r1, r3
 23fec78:	f7ff bc32 	b.w	23fe4e0 <network_on>

023fec7c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fec7c:	2200      	movs	r2, #0
 23fec7e:	6840      	ldr	r0, [r0, #4]
 23fec80:	4611      	mov	r1, r2
 23fec82:	f7ff bc1f 	b.w	23fe4c4 <network_ready>

023fec86 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fec86:	2200      	movs	r2, #0
 23fec88:	6840      	ldr	r0, [r0, #4]
 23fec8a:	4611      	mov	r1, r2
 23fec8c:	f7ff bbfe 	b.w	23fe48c <network_connecting>

023fec90 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fec90:	2200      	movs	r2, #0
 23fec92:	2102      	movs	r1, #2
 23fec94:	6840      	ldr	r0, [r0, #4]
 23fec96:	f7ff bc07 	b.w	23fe4a8 <network_disconnect>

023fec9a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fec9a:	2300      	movs	r3, #0
 23fec9c:	6840      	ldr	r0, [r0, #4]
 23fec9e:	461a      	mov	r2, r3
 23feca0:	f7ff bbe6 	b.w	23fe470 <network_connect>

023feca4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23feca4:	2203      	movs	r2, #3
 23feca6:	4b02      	ldr	r3, [pc, #8]	; (23fecb0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23feca8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fecaa:	4a02      	ldr	r2, [pc, #8]	; (23fecb4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fecac:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fecae:	4770      	bx	lr
 23fecb0:	1007ae84 	.word	0x1007ae84
 23fecb4:	023ffdec 	.word	0x023ffdec

023fecb8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fecb8:	4770      	bx	lr

023fecba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fecba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fecbc:	4606      	mov	r6, r0
 23fecbe:	4615      	mov	r5, r2
 23fecc0:	460c      	mov	r4, r1
 23fecc2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fecc4:	42bc      	cmp	r4, r7
 23fecc6:	d006      	beq.n	23fecd6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fecc8:	6833      	ldr	r3, [r6, #0]
 23fecca:	4630      	mov	r0, r6
 23feccc:	689b      	ldr	r3, [r3, #8]
 23fecce:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fecd2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fecd4:	e7f6      	b.n	23fecc4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fecd6:	4628      	mov	r0, r5
 23fecd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fecda <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fecda:	2200      	movs	r2, #0
 23fecdc:	7c00      	ldrb	r0, [r0, #16]
 23fecde:	f7ff b9cf 	b.w	23fe080 <hal_i2c_write>

023fece2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fece2:	2100      	movs	r1, #0
 23fece4:	7c00      	ldrb	r0, [r0, #16]
 23fece6:	f7ff b9d9 	b.w	23fe09c <hal_i2c_available>

023fecea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fecea:	2100      	movs	r1, #0
 23fecec:	7c00      	ldrb	r0, [r0, #16]
 23fecee:	f7ff b9e3 	b.w	23fe0b8 <hal_i2c_read>

023fecf2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fecf2:	2100      	movs	r1, #0
 23fecf4:	7c00      	ldrb	r0, [r0, #16]
 23fecf6:	f7ff b9ed 	b.w	23fe0d4 <hal_i2c_peek>

023fecfa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fecfa:	2100      	movs	r1, #0
 23fecfc:	7c00      	ldrb	r0, [r0, #16]
 23fecfe:	f7ff b9f7 	b.w	23fe0f0 <hal_i2c_flush>

023fed02 <_ZN7TwoWireD0Ev>:
 23fed02:	b510      	push	{r4, lr}
 23fed04:	4604      	mov	r4, r0
 23fed06:	2114      	movs	r1, #20
 23fed08:	f7fe ff19 	bl	23fdb3e <_ZdlPvj>
 23fed0c:	4620      	mov	r0, r4
 23fed0e:	bd10      	pop	{r4, pc}

023fed10 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fed10:	b538      	push	{r3, r4, r5, lr}
 23fed12:	4604      	mov	r4, r0
 23fed14:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fed16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fed1a:	2200      	movs	r2, #0
 23fed1c:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fed20:	4b09      	ldr	r3, [pc, #36]	; (23fed48 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fed22:	4608      	mov	r0, r1
  _i2c = i2c;
 23fed24:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fed26:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fed28:	4629      	mov	r1, r5
 23fed2a:	f7ff f9fd 	bl	23fe128 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fed2e:	30bf      	adds	r0, #191	; 0xbf
 23fed30:	d108      	bne.n	23fed44 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fed32:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fed34:	07db      	lsls	r3, r3, #31
 23fed36:	d505      	bpl.n	23fed44 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fed38:	6868      	ldr	r0, [r5, #4]
 23fed3a:	f7ff fc4f 	bl	23fe5dc <free>
    free(conf.tx_buffer);
 23fed3e:	68e8      	ldr	r0, [r5, #12]
 23fed40:	f7ff fc4c 	bl	23fe5dc <free>
}
 23fed44:	4620      	mov	r0, r4
 23fed46:	bd38      	pop	{r3, r4, r5, pc}
 23fed48:	023ffe28 	.word	0x023ffe28

023fed4c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fed4c:	4770      	bx	lr

023fed4e <_ZN9IPAddressD0Ev>:
 23fed4e:	b510      	push	{r4, lr}
 23fed50:	4604      	mov	r4, r0
 23fed52:	2118      	movs	r1, #24
 23fed54:	f7fe fef3 	bl	23fdb3e <_ZdlPvj>
 23fed58:	4620      	mov	r0, r4
 23fed5a:	bd10      	pop	{r4, pc}

023fed5c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fed5c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fed5e:	7d03      	ldrb	r3, [r0, #20]
{
 23fed60:	460e      	mov	r6, r1
	if (address.v==6) {
 23fed62:	2b06      	cmp	r3, #6
 23fed64:	f04f 0400 	mov.w	r4, #0
{
 23fed68:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fed6a:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fed6e:	d012      	beq.n	23fed96 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fed70:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fed74:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fed78:	220a      	movs	r2, #10
 23fed7a:	4630      	mov	r0, r6
 23fed7c:	f000 f95d 	bl	23ff03a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fed80:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fed82:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fed84:	d019      	beq.n	23fedba <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fed86:	2c00      	cmp	r4, #0
 23fed88:	d0f4      	beq.n	23fed74 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fed8a:	212e      	movs	r1, #46	; 0x2e
 23fed8c:	4630      	mov	r0, r6
 23fed8e:	f000 f93b 	bl	23ff008 <_ZN5Print5printEc>
 23fed92:	4404      	add	r4, r0
 23fed94:	e7ee      	b.n	23fed74 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fed96:	232f      	movs	r3, #47	; 0x2f
 23fed98:	466a      	mov	r2, sp
 23fed9a:	4639      	mov	r1, r7
 23fed9c:	200a      	movs	r0, #10
		buf[0] = 0;
 23fed9e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23feda2:	f7ff f9cf 	bl	23fe144 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23feda6:	4668      	mov	r0, sp
 23feda8:	f7fe fea0 	bl	23fdaec <strlen>
 23fedac:	6833      	ldr	r3, [r6, #0]
 23fedae:	4602      	mov	r2, r0
 23fedb0:	4669      	mov	r1, sp
 23fedb2:	4630      	mov	r0, r6
 23fedb4:	68db      	ldr	r3, [r3, #12]
 23fedb6:	4798      	blx	r3
 23fedb8:	4604      	mov	r4, r0
    }
    return n;
}
 23fedba:	4620      	mov	r0, r4
 23fedbc:	b00d      	add	sp, #52	; 0x34
 23fedbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fedc0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fedc0:	b510      	push	{r4, lr}
 23fedc2:	4604      	mov	r4, r0
 23fedc4:	4b04      	ldr	r3, [pc, #16]	; (23fedd8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fedc6:	2211      	movs	r2, #17
 23fedc8:	2100      	movs	r1, #0
 23fedca:	f840 3b04 	str.w	r3, [r0], #4
 23fedce:	f000 ff0f 	bl	23ffbf0 <memset>
}
 23fedd2:	4620      	mov	r0, r4
 23fedd4:	bd10      	pop	{r4, pc}
 23fedd6:	bf00      	nop
 23fedd8:	023ffe50 	.word	0x023ffe50

023feddc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23feddc:	4603      	mov	r3, r0
 23fedde:	4a07      	ldr	r2, [pc, #28]	; (23fedfc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fede0:	b510      	push	{r4, lr}
 23fede2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fede6:	f101 0210 	add.w	r2, r1, #16
 23fedea:	f851 4b04 	ldr.w	r4, [r1], #4
 23fedee:	4291      	cmp	r1, r2
 23fedf0:	f843 4b04 	str.w	r4, [r3], #4
 23fedf4:	d1f9      	bne.n	23fedea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fedf6:	780a      	ldrb	r2, [r1, #0]
 23fedf8:	701a      	strb	r2, [r3, #0]
}
 23fedfa:	bd10      	pop	{r4, pc}
 23fedfc:	023ffe50 	.word	0x023ffe50

023fee00 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fee00:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fee02:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fee06:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fee0a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fee0e:	2304      	movs	r3, #4
 23fee10:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fee14:	6041      	str	r1, [r0, #4]
 23fee16:	7503      	strb	r3, [r0, #20]
}
 23fee18:	bd10      	pop	{r4, pc}
	...

023fee1c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fee1c:	b507      	push	{r0, r1, r2, lr}
 23fee1e:	4b06      	ldr	r3, [pc, #24]	; (23fee38 <_ZN9IPAddressC1EPKh+0x1c>)
 23fee20:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fee22:	78cb      	ldrb	r3, [r1, #3]
 23fee24:	9300      	str	r3, [sp, #0]
 23fee26:	788b      	ldrb	r3, [r1, #2]
 23fee28:	784a      	ldrb	r2, [r1, #1]
 23fee2a:	7809      	ldrb	r1, [r1, #0]
 23fee2c:	f7ff ffe8 	bl	23fee00 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fee30:	b003      	add	sp, #12
 23fee32:	f85d fb04 	ldr.w	pc, [sp], #4
 23fee36:	bf00      	nop
 23fee38:	023ffe50 	.word	0x023ffe50

023fee3c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23fee3c:	4b01      	ldr	r3, [pc, #4]	; (23fee44 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fee3e:	4a02      	ldr	r2, [pc, #8]	; (23fee48 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fee40:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fee42:	4770      	bx	lr
 23fee44:	1007ae8c 	.word	0x1007ae8c
 23fee48:	023ffe5c 	.word	0x023ffe5c

023fee4c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fee4c:	2300      	movs	r3, #0
 23fee4e:	6840      	ldr	r0, [r0, #4]
 23fee50:	461a      	mov	r2, r3
 23fee52:	f7ff bb0d 	b.w	23fe470 <network_connect>

023fee56 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fee56:	2200      	movs	r2, #0
 23fee58:	2102      	movs	r1, #2
 23fee5a:	6840      	ldr	r0, [r0, #4]
 23fee5c:	f7ff bb24 	b.w	23fe4a8 <network_disconnect>

023fee60 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fee60:	2200      	movs	r2, #0
 23fee62:	6840      	ldr	r0, [r0, #4]
 23fee64:	4611      	mov	r1, r2
 23fee66:	f7ff bb11 	b.w	23fe48c <network_connecting>

023fee6a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fee6a:	2200      	movs	r2, #0
 23fee6c:	6840      	ldr	r0, [r0, #4]
 23fee6e:	4611      	mov	r1, r2
 23fee70:	f7ff bb28 	b.w	23fe4c4 <network_ready>

023fee74 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fee74:	2300      	movs	r3, #0
 23fee76:	6840      	ldr	r0, [r0, #4]
 23fee78:	461a      	mov	r2, r3
 23fee7a:	4619      	mov	r1, r3
 23fee7c:	f7ff bb30 	b.w	23fe4e0 <network_on>

023fee80 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fee80:	2300      	movs	r3, #0
 23fee82:	6840      	ldr	r0, [r0, #4]
 23fee84:	461a      	mov	r2, r3
 23fee86:	4619      	mov	r1, r3
 23fee88:	f7ff bb38 	b.w	23fe4fc <network_off>

023fee8c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fee8c:	2100      	movs	r1, #0
 23fee8e:	6840      	ldr	r0, [r0, #4]
 23fee90:	f7ff bb7a 	b.w	23fe588 <network_is_on>

023fee94 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fee94:	2100      	movs	r1, #0
 23fee96:	6840      	ldr	r0, [r0, #4]
 23fee98:	f7ff bb84 	b.w	23fe5a4 <network_is_off>

023fee9c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fee9c:	2200      	movs	r2, #0
 23fee9e:	6840      	ldr	r0, [r0, #4]
 23feea0:	f081 0101 	eor.w	r1, r1, #1
 23feea4:	f7ff bb38 	b.w	23fe518 <network_listen>

023feea8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23feea8:	2200      	movs	r2, #0
 23feeaa:	6840      	ldr	r0, [r0, #4]
 23feeac:	f7ff bb50 	b.w	23fe550 <network_set_listen_timeout>

023feeb0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23feeb0:	2200      	movs	r2, #0
 23feeb2:	6840      	ldr	r0, [r0, #4]
 23feeb4:	4611      	mov	r1, r2
 23feeb6:	f7ff bb59 	b.w	23fe56c <network_get_listen_timeout>

023feeba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23feeba:	2200      	movs	r2, #0
 23feebc:	6840      	ldr	r0, [r0, #4]
 23feebe:	4611      	mov	r1, r2
 23feec0:	f7ff bb38 	b.w	23fe534 <network_listening>

023feec4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23feec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23feec8:	b095      	sub	sp, #84	; 0x54
 23feeca:	4614      	mov	r4, r2
 23feecc:	460d      	mov	r5, r1
 23feece:	4607      	mov	r7, r0
    IPAddress addr;
 23feed0:	f7ff ff76 	bl	23fedc0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23feed4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23feed6:	221c      	movs	r2, #28
 23feed8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23feeda:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23feedc:	f000 fe88 	bl	23ffbf0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23feee0:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23feee2:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23feee4:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23feee6:	2100      	movs	r1, #0
 23feee8:	466b      	mov	r3, sp
 23feeea:	aa0c      	add	r2, sp, #48	; 0x30
 23feeec:	f7ff f946 	bl	23fe17c <netdb_getaddrinfo>
    if (!r) {
 23feef0:	4604      	mov	r4, r0
 23feef2:	2800      	cmp	r0, #0
 23feef4:	d14b      	bne.n	23fef8e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23feef6:	4602      	mov	r2, r0
 23feef8:	2101      	movs	r1, #1
 23feefa:	6868      	ldr	r0, [r5, #4]
 23feefc:	f7ff fae2 	bl	23fe4c4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fef00:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fef02:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fef04:	4622      	mov	r2, r4
 23fef06:	6868      	ldr	r0, [r5, #4]
 23fef08:	f7ff fadc 	bl	23fe4c4 <network_ready>
        bool ok = false;
 23fef0c:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fef0e:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fef10:	9e00      	ldr	r6, [sp, #0]
 23fef12:	2e00      	cmp	r6, #0
 23fef14:	d03b      	beq.n	23fef8e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fef16:	2900      	cmp	r1, #0
 23fef18:	d139      	bne.n	23fef8e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fef1a:	6873      	ldr	r3, [r6, #4]
 23fef1c:	2b02      	cmp	r3, #2
 23fef1e:	d003      	beq.n	23fef28 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fef20:	2b0a      	cmp	r3, #10
 23fef22:	d011      	beq.n	23fef48 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fef24:	69f6      	ldr	r6, [r6, #28]
 23fef26:	e7f4      	b.n	23fef12 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fef28:	f1b8 0f00 	cmp.w	r8, #0
 23fef2c:	d0fa      	beq.n	23fef24 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fef2e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fef30:	a806      	add	r0, sp, #24
 23fef32:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fef34:	1d3c      	adds	r4, r7, #4
 23fef36:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fef38:	f7ff ff70 	bl	23fee1c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fef3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fef3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fef40:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fef42:	4641      	mov	r1, r8
 23fef44:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fef46:	e7ed      	b.n	23fef24 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fef48:	f1b9 0f00 	cmp.w	r9, #0
 23fef4c:	d0ea      	beq.n	23fef24 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fef4e:	2210      	movs	r2, #16
 23fef50:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fef52:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fef54:	f000 fe4c 	bl	23ffbf0 <memset>
                    a.v = 6;
 23fef58:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fef5a:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fef5c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fef60:	f104 0308 	add.w	r3, r4, #8
 23fef64:	3418      	adds	r4, #24
 23fef66:	462a      	mov	r2, r5
 23fef68:	6818      	ldr	r0, [r3, #0]
 23fef6a:	6859      	ldr	r1, [r3, #4]
 23fef6c:	3308      	adds	r3, #8
 23fef6e:	c203      	stmia	r2!, {r0, r1}
 23fef70:	42a3      	cmp	r3, r4
 23fef72:	4615      	mov	r5, r2
 23fef74:	d1f7      	bne.n	23fef66 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fef76:	a901      	add	r1, sp, #4
 23fef78:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fef7a:	1d3c      	adds	r4, r7, #4
 23fef7c:	ad07      	add	r5, sp, #28
 23fef7e:	f7ff ff2d 	bl	23feddc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fef82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fef84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fef86:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fef88:	4649      	mov	r1, r9
 23fef8a:	7023      	strb	r3, [r4, #0]
                    break;
 23fef8c:	e7ca      	b.n	23fef24 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fef8e:	9800      	ldr	r0, [sp, #0]
 23fef90:	f7ff f8e6 	bl	23fe160 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fef94:	4638      	mov	r0, r7
 23fef96:	b015      	add	sp, #84	; 0x54
 23fef98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fef9c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fef9c:	4b02      	ldr	r3, [pc, #8]	; (23fefa8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fef9e:	4a03      	ldr	r2, [pc, #12]	; (23fefac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fefa0:	601a      	str	r2, [r3, #0]
 23fefa2:	2200      	movs	r2, #0
 23fefa4:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fefa6:	4770      	bx	lr
 23fefa8:	1007ae90 	.word	0x1007ae90
 23fefac:	023ffe68 	.word	0x023ffe68

023fefb0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fefb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fefb2:	4606      	mov	r6, r0
 23fefb4:	460d      	mov	r5, r1
  size_t n = 0;
 23fefb6:	2400      	movs	r4, #0
 23fefb8:	188f      	adds	r7, r1, r2
  while (size--) {
 23fefba:	42bd      	cmp	r5, r7
 23fefbc:	d00c      	beq.n	23fefd8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fefbe:	6833      	ldr	r3, [r6, #0]
 23fefc0:	4630      	mov	r0, r6
 23fefc2:	689b      	ldr	r3, [r3, #8]
 23fefc4:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fefc8:	4798      	blx	r3
     if (chunk>=0)
 23fefca:	1e03      	subs	r3, r0, #0
 23fefcc:	db01      	blt.n	23fefd2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fefce:	441c      	add	r4, r3
  while (size--) {
 23fefd0:	e7f3      	b.n	23fefba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fefd2:	2c00      	cmp	r4, #0
 23fefd4:	bf08      	it	eq
 23fefd6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fefd8:	4620      	mov	r0, r4
 23fefda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fefdc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fefdc:	b513      	push	{r0, r1, r4, lr}
 23fefde:	4604      	mov	r4, r0
    }
 23fefe0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fefe2:	b159      	cbz	r1, 23feffc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fefe4:	9101      	str	r1, [sp, #4]
 23fefe6:	f7fe fd81 	bl	23fdaec <strlen>
 23fefea:	4602      	mov	r2, r0
 23fefec:	4620      	mov	r0, r4
 23fefee:	6823      	ldr	r3, [r4, #0]
 23feff0:	9901      	ldr	r1, [sp, #4]
 23feff2:	68db      	ldr	r3, [r3, #12]
    }
 23feff4:	b002      	add	sp, #8
 23feff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23feffa:	4718      	bx	r3
    }
 23feffc:	b002      	add	sp, #8
 23feffe:	bd10      	pop	{r4, pc}

023ff000 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23ff000:	b508      	push	{r3, lr}
  return write(str);
 23ff002:	f7ff ffeb 	bl	23fefdc <_ZN5Print5writeEPKc>
}
 23ff006:	bd08      	pop	{r3, pc}

023ff008 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23ff008:	6803      	ldr	r3, [r0, #0]
 23ff00a:	689b      	ldr	r3, [r3, #8]
 23ff00c:	4718      	bx	r3

023ff00e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23ff00e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23ff010:	210d      	movs	r1, #13
{
 23ff012:	4605      	mov	r5, r0
  size_t n = print('\r');
 23ff014:	f7ff fff8 	bl	23ff008 <_ZN5Print5printEc>
  n += print('\n');
 23ff018:	210a      	movs	r1, #10
  size_t n = print('\r');
 23ff01a:	4604      	mov	r4, r0
  n += print('\n');
 23ff01c:	4628      	mov	r0, r5
 23ff01e:	f7ff fff3 	bl	23ff008 <_ZN5Print5printEc>
  return n;
}
 23ff022:	4420      	add	r0, r4
 23ff024:	bd38      	pop	{r3, r4, r5, pc}

023ff026 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23ff026:	b538      	push	{r3, r4, r5, lr}
 23ff028:	4605      	mov	r5, r0
  return write(str);
 23ff02a:	f7ff ffd7 	bl	23fefdc <_ZN5Print5writeEPKc>
 23ff02e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23ff030:	4628      	mov	r0, r5
 23ff032:	f7ff ffec 	bl	23ff00e <_ZN5Print7printlnEv>
  return n;
}
 23ff036:	4420      	add	r0, r4
 23ff038:	bd38      	pop	{r3, r4, r5, pc}

023ff03a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23ff03a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23ff03c:	2a01      	cmp	r2, #1
 23ff03e:	bf98      	it	ls
 23ff040:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23ff042:	b530      	push	{r4, r5, lr}
 23ff044:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23ff046:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23ff04a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23ff04c:	460d      	mov	r5, r1
 23ff04e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23ff052:	fb01 5312 	mls	r3, r1, r2, r5
 23ff056:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff05a:	2b09      	cmp	r3, #9
 23ff05c:	bf94      	ite	ls
 23ff05e:	3330      	addls	r3, #48	; 0x30
 23ff060:	3337      	addhi	r3, #55	; 0x37
 23ff062:	b2db      	uxtb	r3, r3
  } while(n);
 23ff064:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff066:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23ff06a:	d9ef      	bls.n	23ff04c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23ff06c:	4621      	mov	r1, r4
 23ff06e:	f7ff ffb5 	bl	23fefdc <_ZN5Print5writeEPKc>
}
 23ff072:	b00b      	add	sp, #44	; 0x2c
 23ff074:	bd30      	pop	{r4, r5, pc}
	...

023ff078 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 23ff078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff07c:	ec55 4b10 	vmov	r4, r5, d0
 23ff080:	4606      	mov	r6, r0
 23ff082:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
 23ff084:	ee10 2a10 	vmov	r2, s0
 23ff088:	462b      	mov	r3, r5
 23ff08a:	ee10 0a10 	vmov	r0, s0
 23ff08e:	4629      	mov	r1, r5
 23ff090:	f7fe fad0 	bl	23fd634 <__aeabi_dcmpun>
 23ff094:	b140      	cbz	r0, 23ff0a8 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
 23ff096:	4953      	ldr	r1, [pc, #332]	; (23ff1e4 <_ZN5Print10printFloatEdh+0x16c>)
 23ff098:	4630      	mov	r0, r6
 23ff09a:	f7ff ff9f 	bl	23fefdc <_ZN5Print5writeEPKc>
 23ff09e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 23ff0a0:	4650      	mov	r0, sl
 23ff0a2:	b003      	add	sp, #12
 23ff0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 23ff0a8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 23ff0ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23ff0b0:	4620      	mov	r0, r4
 23ff0b2:	4649      	mov	r1, r9
 23ff0b4:	4b4c      	ldr	r3, [pc, #304]	; (23ff1e8 <_ZN5Print10printFloatEdh+0x170>)
 23ff0b6:	f7fe fabd 	bl	23fd634 <__aeabi_dcmpun>
 23ff0ba:	b948      	cbnz	r0, 23ff0d0 <_ZN5Print10printFloatEdh+0x58>
 23ff0bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23ff0c0:	4620      	mov	r0, r4
 23ff0c2:	4649      	mov	r1, r9
 23ff0c4:	4b48      	ldr	r3, [pc, #288]	; (23ff1e8 <_ZN5Print10printFloatEdh+0x170>)
 23ff0c6:	f7fe fa97 	bl	23fd5f8 <__aeabi_dcmple>
 23ff0ca:	b908      	cbnz	r0, 23ff0d0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
 23ff0cc:	4947      	ldr	r1, [pc, #284]	; (23ff1ec <_ZN5Print10printFloatEdh+0x174>)
 23ff0ce:	e7e3      	b.n	23ff098 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 23ff0d0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23ff0d4:	4620      	mov	r0, r4
 23ff0d6:	4629      	mov	r1, r5
 23ff0d8:	4b45      	ldr	r3, [pc, #276]	; (23ff1f0 <_ZN5Print10printFloatEdh+0x178>)
 23ff0da:	f7fe faa1 	bl	23fd620 <__aeabi_dcmpgt>
 23ff0de:	b108      	cbz	r0, 23ff0e4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
 23ff0e0:	4944      	ldr	r1, [pc, #272]	; (23ff1f4 <_ZN5Print10printFloatEdh+0x17c>)
 23ff0e2:	e7d9      	b.n	23ff098 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 23ff0e4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23ff0e8:	4620      	mov	r0, r4
 23ff0ea:	4629      	mov	r1, r5
 23ff0ec:	4b42      	ldr	r3, [pc, #264]	; (23ff1f8 <_ZN5Print10printFloatEdh+0x180>)
 23ff0ee:	f7fe fa79 	bl	23fd5e4 <__aeabi_dcmplt>
 23ff0f2:	2800      	cmp	r0, #0
 23ff0f4:	d1f4      	bne.n	23ff0e0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
 23ff0f6:	2200      	movs	r2, #0
 23ff0f8:	2300      	movs	r3, #0
 23ff0fa:	4620      	mov	r0, r4
 23ff0fc:	4629      	mov	r1, r5
 23ff0fe:	f7fe fa71 	bl	23fd5e4 <__aeabi_dcmplt>
 23ff102:	b1d0      	cbz	r0, 23ff13a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
 23ff104:	212d      	movs	r1, #45	; 0x2d
 23ff106:	4630      	mov	r0, r6
 23ff108:	f7ff ff7e 	bl	23ff008 <_ZN5Print5printEc>
     number = -number;
 23ff10c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
 23ff110:	4682      	mov	sl, r0
     number = -number;
 23ff112:	461d      	mov	r5, r3
  size_t n = 0;
 23ff114:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 23ff118:	2000      	movs	r0, #0
    rounding /= 10.0;
 23ff11a:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 23ff11e:	4937      	ldr	r1, [pc, #220]	; (23ff1fc <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
 23ff120:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 23ff204 <_ZN5Print10printFloatEdh+0x18c>
  for (uint8_t i=0; i<digits; ++i)
 23ff124:	fa5f f38b 	uxtb.w	r3, fp
 23ff128:	429f      	cmp	r7, r3
 23ff12a:	d908      	bls.n	23ff13e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
 23ff12c:	4642      	mov	r2, r8
 23ff12e:	464b      	mov	r3, r9
 23ff130:	f7fe f910 	bl	23fd354 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 23ff134:	f10b 0b01 	add.w	fp, fp, #1
 23ff138:	e7f4      	b.n	23ff124 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
 23ff13a:	4682      	mov	sl, r0
 23ff13c:	e7ea      	b.n	23ff114 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
 23ff13e:	4622      	mov	r2, r4
 23ff140:	462b      	mov	r3, r5
 23ff142:	f7fd fe27 	bl	23fcd94 <__adddf3>
 23ff146:	460d      	mov	r5, r1
 23ff148:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
 23ff14a:	f7fe fab1 	bl	23fd6b0 <__aeabi_d2uiz>
 23ff14e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
 23ff150:	f7fd ff5c 	bl	23fd00c <__aeabi_ui2d>
 23ff154:	4602      	mov	r2, r0
 23ff156:	460b      	mov	r3, r1
 23ff158:	4620      	mov	r0, r4
 23ff15a:	4629      	mov	r1, r5
 23ff15c:	f7fd fe18 	bl	23fcd90 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23ff160:	220a      	movs	r2, #10
 23ff162:	4604      	mov	r4, r0
 23ff164:	460d      	mov	r5, r1
 23ff166:	4630      	mov	r0, r6
 23ff168:	4641      	mov	r1, r8
 23ff16a:	f7ff ff66 	bl	23ff03a <_ZN5Print11printNumberEmh>
  n += print(int_part);
 23ff16e:	4482      	add	sl, r0
  if (digits > 0) {
 23ff170:	2f00      	cmp	r7, #0
 23ff172:	d095      	beq.n	23ff0a0 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
 23ff174:	4630      	mov	r0, r6
 23ff176:	4922      	ldr	r1, [pc, #136]	; (23ff200 <_ZN5Print10printFloatEdh+0x188>)
 23ff178:	f7ff ff30 	bl	23fefdc <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 23ff17c:	f04f 0800 	mov.w	r8, #0
 23ff180:	f8df 9080 	ldr.w	r9, [pc, #128]	; 23ff204 <_ZN5Print10printFloatEdh+0x18c>
    n += print(".");
 23ff184:	4482      	add	sl, r0
  while (digits-- > 0)
 23ff186:	2f00      	cmp	r7, #0
 23ff188:	d08a      	beq.n	23ff0a0 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
 23ff18a:	4642      	mov	r2, r8
 23ff18c:	464b      	mov	r3, r9
 23ff18e:	4620      	mov	r0, r4
 23ff190:	4629      	mov	r1, r5
 23ff192:	f7fd ffb5 	bl	23fd100 <__aeabi_dmul>
 23ff196:	4604      	mov	r4, r0
 23ff198:	460d      	mov	r5, r1
    int toPrint = int(remainder);
 23ff19a:	f7fe fa61 	bl	23fd660 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 23ff19e:	f1b0 0b00 	subs.w	fp, r0, #0
 23ff1a2:	da1c      	bge.n	23ff1de <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
 23ff1a4:	212d      	movs	r1, #45	; 0x2d
 23ff1a6:	4630      	mov	r0, r6
 23ff1a8:	f7ff ff2e 	bl	23ff008 <_ZN5Print5printEc>
 23ff1ac:	4603      	mov	r3, r0
            val = -n;
 23ff1ae:	f1cb 0100 	rsb	r1, fp, #0
        return printNumber(val, base) + t;
 23ff1b2:	220a      	movs	r2, #10
 23ff1b4:	4630      	mov	r0, r6
 23ff1b6:	9301      	str	r3, [sp, #4]
 23ff1b8:	f7ff ff3f 	bl	23ff03a <_ZN5Print11printNumberEmh>
 23ff1bc:	9b01      	ldr	r3, [sp, #4]
 23ff1be:	3f01      	subs	r7, #1
 23ff1c0:	4418      	add	r0, r3
    n += print(toPrint);
 23ff1c2:	4482      	add	sl, r0
    remainder -= toPrint;
 23ff1c4:	4658      	mov	r0, fp
 23ff1c6:	f7fd ff31 	bl	23fd02c <__aeabi_i2d>
 23ff1ca:	4602      	mov	r2, r0
 23ff1cc:	460b      	mov	r3, r1
 23ff1ce:	4620      	mov	r0, r4
 23ff1d0:	4629      	mov	r1, r5
 23ff1d2:	f7fd fddd 	bl	23fcd90 <__aeabi_dsub>
 23ff1d6:	b2ff      	uxtb	r7, r7
 23ff1d8:	4604      	mov	r4, r0
 23ff1da:	460d      	mov	r5, r1
  while (digits-- > 0)
 23ff1dc:	e7d3      	b.n	23ff186 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
 23ff1de:	4659      	mov	r1, fp
        size_t t = 0;
 23ff1e0:	2300      	movs	r3, #0
 23ff1e2:	e7e6      	b.n	23ff1b2 <_ZN5Print10printFloatEdh+0x13a>
 23ff1e4:	023ffe9c 	.word	0x023ffe9c
 23ff1e8:	7fefffff 	.word	0x7fefffff
 23ff1ec:	023ffea0 	.word	0x023ffea0
 23ff1f0:	41efffff 	.word	0x41efffff
 23ff1f4:	023ffea4 	.word	0x023ffea4
 23ff1f8:	c1efffff 	.word	0xc1efffff
 23ff1fc:	3fe00000 	.word	0x3fe00000
 23ff200:	023ffea8 	.word	0x023ffea8
 23ff204:	40240000 	.word	0x40240000

023ff208 <_ZN5Print5printEfi>:
{
 23ff208:	b538      	push	{r3, r4, r5, lr}
 23ff20a:	4604      	mov	r4, r0
 23ff20c:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
 23ff210:	b2cd      	uxtb	r5, r1
 23ff212:	f7fd ff1d 	bl	23fd050 <__aeabi_f2d>
 23ff216:	ec41 0b10 	vmov	d0, r0, r1
 23ff21a:	4629      	mov	r1, r5
 23ff21c:	4620      	mov	r0, r4
}
 23ff21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
 23ff222:	f7ff bf29 	b.w	23ff078 <_ZN5Print10printFloatEdh>
	...

023ff228 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23ff228:	2200      	movs	r2, #0
 23ff22a:	4b01      	ldr	r3, [pc, #4]	; (23ff230 <_GLOBAL__sub_I_RGB+0x8>)
 23ff22c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23ff22e:	4770      	bx	lr
 23ff230:	1007ae98 	.word	0x1007ae98

023ff234 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23ff234:	b510      	push	{r4, lr}
 23ff236:	4604      	mov	r4, r0
 23ff238:	4608      	mov	r0, r1
{
    _spi = spi;
 23ff23a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23ff23c:	f7fe ffac 	bl	23fe198 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff240:	2300      	movs	r3, #0
}
 23ff242:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff244:	6063      	str	r3, [r4, #4]
}
 23ff246:	bd10      	pop	{r4, pc}

023ff248 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 23ff248:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff24c:	ec57 6b10 	vmov	r6, r7, d0
 23ff250:	4680      	mov	r8, r0
 23ff252:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
 23ff254:	2200      	movs	r2, #0
 23ff256:	2300      	movs	r3, #0
 23ff258:	ee10 0a10 	vmov	r0, s0
 23ff25c:	4639      	mov	r1, r7
 23ff25e:	f7fe f9c1 	bl	23fd5e4 <__aeabi_dcmplt>
 23ff262:	b128      	cbz	r0, 23ff270 <_Z4dtoadhPc+0x28>
        val = -val;
 23ff264:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 23ff268:	461f      	mov	r7, r3
        *sout++ = '-';
 23ff26a:	232d      	movs	r3, #45	; 0x2d
 23ff26c:	f804 3b01 	strb.w	r3, [r4], #1
 23ff270:	2300      	movs	r3, #0
    }
    long scale = 1;
 23ff272:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 23ff276:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 23ff278:	b2d9      	uxtb	r1, r3
 23ff27a:	4588      	cmp	r8, r1
 23ff27c:	d903      	bls.n	23ff286 <_Z4dtoadhPc+0x3e>
        scale *= 10;
 23ff27e:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
 23ff282:	3301      	adds	r3, #1
 23ff284:	e7f8      	b.n	23ff278 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
 23ff286:	4648      	mov	r0, r9
 23ff288:	f7fd fed0 	bl	23fd02c <__aeabi_i2d>
 23ff28c:	4632      	mov	r2, r6
 23ff28e:	463b      	mov	r3, r7
 23ff290:	f7fd ff36 	bl	23fd100 <__aeabi_dmul>
 23ff294:	4606      	mov	r6, r0
 23ff296:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
 23ff298:	f7fe fa92 	bl	23fd7c0 <__aeabi_d2ulz>
 23ff29c:	468a      	mov	sl, r1
 23ff29e:	4605      	mov	r5, r0
 23ff2a0:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
 23ff2a2:	f7fd fef7 	bl	23fd094 <__aeabi_ul2d>
 23ff2a6:	4602      	mov	r2, r0
 23ff2a8:	460b      	mov	r3, r1
 23ff2aa:	4630      	mov	r0, r6
 23ff2ac:	4639      	mov	r1, r7
 23ff2ae:	f7fd fd6f 	bl	23fcd90 <__aeabi_dsub>
 23ff2b2:	2200      	movs	r2, #0
 23ff2b4:	4b13      	ldr	r3, [pc, #76]	; (23ff304 <_Z4dtoadhPc+0xbc>)
 23ff2b6:	f7fe f9a9 	bl	23fd60c <__aeabi_dcmpge>
 23ff2ba:	b110      	cbz	r0, 23ff2c2 <_Z4dtoadhPc+0x7a>
        fixed++;
 23ff2bc:	3501      	adds	r5, #1
 23ff2be:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
 23ff2c2:	464a      	mov	r2, r9
 23ff2c4:	4628      	mov	r0, r5
 23ff2c6:	4659      	mov	r1, fp
 23ff2c8:	17d3      	asrs	r3, r2, #31
 23ff2ca:	f7fe fa61 	bl	23fd790 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 23ff2ce:	2301      	movs	r3, #1
 23ff2d0:	4615      	mov	r5, r2
 23ff2d2:	4621      	mov	r1, r4
 23ff2d4:	220a      	movs	r2, #10
 23ff2d6:	f000 fa30 	bl	23ff73a <ultoa>
    if (prec) {
 23ff2da:	f1b8 0f00 	cmp.w	r8, #0
 23ff2de:	d00e      	beq.n	23ff2fe <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
 23ff2e0:	4620      	mov	r0, r4
 23ff2e2:	f7fe fc03 	bl	23fdaec <strlen>
        *sout++ = '.';
 23ff2e6:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 23ff2e8:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 23ff2ea:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 23ff2ec:	220a      	movs	r2, #10
 23ff2ee:	4643      	mov	r3, r8
 23ff2f0:	4628      	mov	r0, r5
 23ff2f2:	3101      	adds	r1, #1
    }
}
 23ff2f4:	b001      	add	sp, #4
 23ff2f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
 23ff2fa:	f000 ba1e 	b.w	23ff73a <ultoa>
}
 23ff2fe:	b001      	add	sp, #4
 23ff300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff304:	3fe00000 	.word	0x3fe00000

023ff308 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23ff308:	b510      	push	{r4, lr}
 23ff30a:	4604      	mov	r4, r0
{
	free(buffer);
 23ff30c:	6800      	ldr	r0, [r0, #0]
 23ff30e:	f7ff f965 	bl	23fe5dc <free>
}
 23ff312:	4620      	mov	r0, r4
 23ff314:	bd10      	pop	{r4, pc}

023ff316 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23ff316:	b510      	push	{r4, lr}
 23ff318:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23ff31a:	6800      	ldr	r0, [r0, #0]
 23ff31c:	b108      	cbz	r0, 23ff322 <_ZN6String10invalidateEv+0xc>
 23ff31e:	f7ff f95d 	bl	23fe5dc <free>
	buffer = NULL;
 23ff322:	2300      	movs	r3, #0
	capacity = len = 0;
 23ff324:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23ff328:	6023      	str	r3, [r4, #0]
}
 23ff32a:	bd10      	pop	{r4, pc}

023ff32c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23ff32c:	b538      	push	{r3, r4, r5, lr}
 23ff32e:	4604      	mov	r4, r0
 23ff330:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23ff332:	6800      	ldr	r0, [r0, #0]
 23ff334:	3101      	adds	r1, #1
 23ff336:	f7ff f95f 	bl	23fe5f8 <realloc>
	if (newbuffer) {
 23ff33a:	b110      	cbz	r0, 23ff342 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23ff33c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23ff340:	2001      	movs	r0, #1
	}
	return 0;
}
 23ff342:	bd38      	pop	{r3, r4, r5, pc}

023ff344 <_ZN6String7reserveEj>:
{
 23ff344:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23ff346:	6803      	ldr	r3, [r0, #0]
{
 23ff348:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23ff34a:	b123      	cbz	r3, 23ff356 <_ZN6String7reserveEj+0x12>
 23ff34c:	6843      	ldr	r3, [r0, #4]
 23ff34e:	428b      	cmp	r3, r1
 23ff350:	d301      	bcc.n	23ff356 <_ZN6String7reserveEj+0x12>
 23ff352:	2001      	movs	r0, #1
}
 23ff354:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23ff356:	4620      	mov	r0, r4
 23ff358:	f7ff ffe8 	bl	23ff32c <_ZN6String12changeBufferEj>
 23ff35c:	2800      	cmp	r0, #0
 23ff35e:	d0f9      	beq.n	23ff354 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23ff360:	68a3      	ldr	r3, [r4, #8]
 23ff362:	2b00      	cmp	r3, #0
 23ff364:	d1f5      	bne.n	23ff352 <_ZN6String7reserveEj+0xe>
 23ff366:	6822      	ldr	r2, [r4, #0]
 23ff368:	7013      	strb	r3, [r2, #0]
 23ff36a:	e7f2      	b.n	23ff352 <_ZN6String7reserveEj+0xe>

023ff36c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23ff36c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff36e:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23ff370:	4611      	mov	r1, r2
 23ff372:	9201      	str	r2, [sp, #4]
{
 23ff374:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23ff376:	f7ff ffe5 	bl	23ff344 <_ZN6String7reserveEj>
 23ff37a:	9a01      	ldr	r2, [sp, #4]
 23ff37c:	b928      	cbnz	r0, 23ff38a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23ff37e:	4620      	mov	r0, r4
 23ff380:	f7ff ffc9 	bl	23ff316 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23ff384:	4620      	mov	r0, r4
 23ff386:	b003      	add	sp, #12
 23ff388:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23ff38a:	4629      	mov	r1, r5
	len = length;
 23ff38c:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23ff38e:	6820      	ldr	r0, [r4, #0]
 23ff390:	f000 fc21 	bl	23ffbd6 <memcpy>
	buffer[len] = 0;
 23ff394:	2100      	movs	r1, #0
 23ff396:	6822      	ldr	r2, [r4, #0]
 23ff398:	68a3      	ldr	r3, [r4, #8]
 23ff39a:	54d1      	strb	r1, [r2, r3]
	return *this;
 23ff39c:	e7f2      	b.n	23ff384 <_ZN6String4copyEPKcj+0x18>

023ff39e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23ff39e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23ff3a0:	b513      	push	{r0, r1, r4, lr}
 23ff3a2:	4604      	mov	r4, r0
	capacity = 0;
 23ff3a4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff3a8:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff3aa:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23ff3ac:	b141      	cbz	r1, 23ff3c0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23ff3ae:	4608      	mov	r0, r1
 23ff3b0:	9101      	str	r1, [sp, #4]
 23ff3b2:	f7fe fb9b 	bl	23fdaec <strlen>
 23ff3b6:	9901      	ldr	r1, [sp, #4]
 23ff3b8:	4602      	mov	r2, r0
 23ff3ba:	4620      	mov	r0, r4
 23ff3bc:	f7ff ffd6 	bl	23ff36c <_ZN6String4copyEPKcj>
}
 23ff3c0:	4620      	mov	r0, r4
 23ff3c2:	b002      	add	sp, #8
 23ff3c4:	bd10      	pop	{r4, pc}

023ff3c6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23ff3c6:	b513      	push	{r0, r1, r4, lr}
 23ff3c8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 23ff3ca:	b159      	cbz	r1, 23ff3e4 <_ZN6StringaSEPKc+0x1e>
 23ff3cc:	4608      	mov	r0, r1
 23ff3ce:	9101      	str	r1, [sp, #4]
 23ff3d0:	f7fe fb8c 	bl	23fdaec <strlen>
 23ff3d4:	9901      	ldr	r1, [sp, #4]
 23ff3d6:	4602      	mov	r2, r0
 23ff3d8:	4620      	mov	r0, r4
 23ff3da:	f7ff ffc7 	bl	23ff36c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23ff3de:	4620      	mov	r0, r4
 23ff3e0:	b002      	add	sp, #8
 23ff3e2:	bd10      	pop	{r4, pc}
	else invalidate();
 23ff3e4:	f7ff ff97 	bl	23ff316 <_ZN6String10invalidateEv>
 23ff3e8:	e7f9      	b.n	23ff3de <_ZN6StringaSEPKc+0x18>

023ff3ea <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 23ff3ea:	b510      	push	{r4, lr}
	buffer = NULL;
 23ff3ec:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 23ff3ee:	4604      	mov	r4, r0
 23ff3f0:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 23ff3f2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 23ff3f6:	60a3      	str	r3, [r4, #8]
	flags = 0;
 23ff3f8:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 23ff3fa:	4608      	mov	r0, r1
	itoa(value, buf, base);
 23ff3fc:	a901      	add	r1, sp, #4
 23ff3fe:	f000 f9c1 	bl	23ff784 <itoa>
	*this = buf;
 23ff402:	4620      	mov	r0, r4
 23ff404:	a901      	add	r1, sp, #4
 23ff406:	f7ff ffde 	bl	23ff3c6 <_ZN6StringaSEPKc>
}
 23ff40a:	4620      	mov	r0, r4
 23ff40c:	b00a      	add	sp, #40	; 0x28
 23ff40e:	bd10      	pop	{r4, pc}

023ff410 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
 23ff410:	b530      	push	{r4, r5, lr}
	buffer = NULL;
 23ff412:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 23ff414:	4604      	mov	r4, r0
 23ff416:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 23ff418:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 23ff41c:	60a3      	str	r3, [r4, #8]
	flags = 0;
 23ff41e:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
 23ff420:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
 23ff424:	b2cd      	uxtb	r5, r1
 23ff426:	f7fd fe13 	bl	23fd050 <__aeabi_f2d>
 23ff42a:	ec41 0b10 	vmov	d0, r0, r1
 23ff42e:	4628      	mov	r0, r5
 23ff430:	a901      	add	r1, sp, #4
 23ff432:	f7ff ff09 	bl	23ff248 <_Z4dtoadhPc>
        *this = buf;
 23ff436:	4620      	mov	r0, r4
 23ff438:	a901      	add	r1, sp, #4
 23ff43a:	f7ff ffc4 	bl	23ff3c6 <_ZN6StringaSEPKc>
}
 23ff43e:	4620      	mov	r0, r4
 23ff440:	b00b      	add	sp, #44	; 0x2c
 23ff442:	bd30      	pop	{r4, r5, pc}

023ff444 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23ff444:	b570      	push	{r4, r5, r6, lr}
 23ff446:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 23ff448:	460e      	mov	r6, r1
 23ff44a:	b909      	cbnz	r1, 23ff450 <_ZN6String6concatEPKcj+0xc>
 23ff44c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 23ff44e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 23ff450:	b16a      	cbz	r2, 23ff46e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 23ff452:	6884      	ldr	r4, [r0, #8]
 23ff454:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 23ff456:	4621      	mov	r1, r4
 23ff458:	f7ff ff74 	bl	23ff344 <_ZN6String7reserveEj>
 23ff45c:	2800      	cmp	r0, #0
 23ff45e:	d0f5      	beq.n	23ff44c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 23ff460:	6828      	ldr	r0, [r5, #0]
 23ff462:	68ab      	ldr	r3, [r5, #8]
 23ff464:	4631      	mov	r1, r6
 23ff466:	4418      	add	r0, r3
 23ff468:	f000 fbf8 	bl	23ffc5c <strcpy>
	len = newlen;
 23ff46c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 23ff46e:	2001      	movs	r0, #1
 23ff470:	e7ed      	b.n	23ff44e <_ZN6String6concatEPKcj+0xa>

023ff472 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 23ff472:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23ff474:	688a      	ldr	r2, [r1, #8]
 23ff476:	6809      	ldr	r1, [r1, #0]
{
 23ff478:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23ff47a:	f7ff ffe3 	bl	23ff444 <_ZN6String6concatEPKcj>
 23ff47e:	b910      	cbnz	r0, 23ff486 <_ZplRK15StringSumHelperRK6String+0x14>
 23ff480:	4620      	mov	r0, r4
 23ff482:	f7ff ff48 	bl	23ff316 <_ZN6String10invalidateEv>
	return a;
}
 23ff486:	4620      	mov	r0, r4
 23ff488:	bd10      	pop	{r4, pc}

023ff48a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 23ff48a:	b513      	push	{r0, r1, r4, lr}
 23ff48c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 23ff48e:	b929      	cbnz	r1, 23ff49c <_ZplRK15StringSumHelperPKc+0x12>
 23ff490:	4620      	mov	r0, r4
 23ff492:	f7ff ff40 	bl	23ff316 <_ZN6String10invalidateEv>
	return a;
}
 23ff496:	4620      	mov	r0, r4
 23ff498:	b002      	add	sp, #8
 23ff49a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 23ff49c:	4608      	mov	r0, r1
 23ff49e:	9101      	str	r1, [sp, #4]
 23ff4a0:	f7fe fb24 	bl	23fdaec <strlen>
 23ff4a4:	9901      	ldr	r1, [sp, #4]
 23ff4a6:	4602      	mov	r2, r0
 23ff4a8:	4620      	mov	r0, r4
 23ff4aa:	f7ff ffcb 	bl	23ff444 <_ZN6String6concatEPKcj>
 23ff4ae:	2800      	cmp	r0, #0
 23ff4b0:	d0ee      	beq.n	23ff490 <_ZplRK15StringSumHelperPKc+0x6>
 23ff4b2:	e7f0      	b.n	23ff496 <_ZplRK15StringSumHelperPKc+0xc>

023ff4b4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff4b4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23ff4b6:	2000      	movs	r0, #0
 23ff4b8:	4b04      	ldr	r3, [pc, #16]	; (23ff4cc <_GLOBAL__sub_I_System+0x18>)
 23ff4ba:	601a      	str	r2, [r3, #0]
 23ff4bc:	4b04      	ldr	r3, [pc, #16]	; (23ff4d0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff4be:	4a05      	ldr	r2, [pc, #20]	; (23ff4d4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff4c0:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff4c4:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff4c6:	f7fe bf55 	b.w	23fe374 <set_system_mode>
 23ff4ca:	bf00      	nop
 23ff4cc:	1007aeb4 	.word	0x1007aeb4
 23ff4d0:	1007aea8 	.word	0x1007aea8
 23ff4d4:	ffff0000 	.word	0xffff0000

023ff4d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff4d8:	4b02      	ldr	r3, [pc, #8]	; (23ff4e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff4da:	681a      	ldr	r2, [r3, #0]
 23ff4dc:	4b02      	ldr	r3, [pc, #8]	; (23ff4e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff4de:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff4e0:	4770      	bx	lr
 23ff4e2:	bf00      	nop
 23ff4e4:	1007acfc 	.word	0x1007acfc
 23ff4e8:	1007aeb8 	.word	0x1007aeb8

023ff4ec <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff4ec:	4770      	bx	lr

023ff4ee <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff4ee:	7441      	strb	r1, [r0, #17]
}
 23ff4f0:	4770      	bx	lr

023ff4f2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff4f2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff4f4:	7c00      	ldrb	r0, [r0, #16]
 23ff4f6:	f7fe febf 	bl	23fe278 <hal_usart_available_data_for_write>
}
 23ff4fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff4fe:	bd08      	pop	{r3, pc}

023ff500 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff500:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff502:	7c00      	ldrb	r0, [r0, #16]
 23ff504:	f7fe fe72 	bl	23fe1ec <hal_usart_available>
}
 23ff508:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff50c:	bd08      	pop	{r3, pc}

023ff50e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff50e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff510:	7c00      	ldrb	r0, [r0, #16]
 23ff512:	f7fe fe87 	bl	23fe224 <hal_usart_peek>
}
 23ff516:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff51a:	bd08      	pop	{r3, pc}

023ff51c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff51c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff51e:	7c00      	ldrb	r0, [r0, #16]
 23ff520:	f7fe fe72 	bl	23fe208 <hal_usart_read>
}
 23ff524:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff528:	bd08      	pop	{r3, pc}

023ff52a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff52a:	7c00      	ldrb	r0, [r0, #16]
 23ff52c:	f7fe be88 	b.w	23fe240 <hal_usart_flush>

023ff530 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff530:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff532:	7c45      	ldrb	r5, [r0, #17]
{
 23ff534:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff536:	b12d      	cbz	r5, 23ff544 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff538:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff53a:	b003      	add	sp, #12
 23ff53c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff540:	f7fe be46 	b.w	23fe1d0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff544:	7c00      	ldrb	r0, [r0, #16]
 23ff546:	9101      	str	r1, [sp, #4]
 23ff548:	f7fe fe96 	bl	23fe278 <hal_usart_available_data_for_write>
 23ff54c:	2800      	cmp	r0, #0
 23ff54e:	9901      	ldr	r1, [sp, #4]
 23ff550:	dcf2      	bgt.n	23ff538 <_ZN11USARTSerial5writeEh+0x8>
}
 23ff552:	4628      	mov	r0, r5
 23ff554:	b003      	add	sp, #12
 23ff556:	bd30      	pop	{r4, r5, pc}

023ff558 <_ZN11USARTSerialD0Ev>:
 23ff558:	b510      	push	{r4, lr}
 23ff55a:	4604      	mov	r4, r0
 23ff55c:	2114      	movs	r1, #20
 23ff55e:	f7fe faee 	bl	23fdb3e <_ZdlPvj>
 23ff562:	4620      	mov	r0, r4
 23ff564:	bd10      	pop	{r4, pc}
	...

023ff568 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff568:	b510      	push	{r4, lr}
 23ff56a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff56e:	4604      	mov	r4, r0
 23ff570:	4608      	mov	r0, r1
 23ff572:	4611      	mov	r1, r2
 23ff574:	2200      	movs	r2, #0
 23ff576:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff57a:	4b04      	ldr	r3, [pc, #16]	; (23ff58c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff57c:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff57e:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff580:	2301      	movs	r3, #1
 23ff582:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff584:	f7fe fe86 	bl	23fe294 <hal_usart_init_ex>
}
 23ff588:	4620      	mov	r0, r4
 23ff58a:	bd10      	pop	{r4, pc}
 23ff58c:	023ffed0 	.word	0x023ffed0

023ff590 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff590:	7c00      	ldrb	r0, [r0, #16]
 23ff592:	f7fe be63 	b.w	23fe25c <hal_usart_is_enabled>

023ff596 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff596:	7441      	strb	r1, [r0, #17]
}
 23ff598:	4770      	bx	lr

023ff59a <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff59a:	4770      	bx	lr

023ff59c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff59c:	4770      	bx	lr

023ff59e <_ZN9USBSerial4readEv>:
{
 23ff59e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff5a0:	2100      	movs	r1, #0
 23ff5a2:	7c00      	ldrb	r0, [r0, #16]
 23ff5a4:	f7fe febc 	bl	23fe320 <HAL_USB_USART_Receive_Data>
}
 23ff5a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff5ac:	bd08      	pop	{r3, pc}

023ff5ae <_ZN9USBSerial4peekEv>:
{
 23ff5ae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff5b0:	2101      	movs	r1, #1
 23ff5b2:	7c00      	ldrb	r0, [r0, #16]
 23ff5b4:	f7fe feb4 	bl	23fe320 <HAL_USB_USART_Receive_Data>
}
 23ff5b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff5bc:	bd08      	pop	{r3, pc}

023ff5be <_ZN9USBSerial17availableForWriteEv>:
{
 23ff5be:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff5c0:	7c00      	ldrb	r0, [r0, #16]
 23ff5c2:	f7fe fe9f 	bl	23fe304 <HAL_USB_USART_Available_Data_For_Write>
}
 23ff5c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff5ca:	bd08      	pop	{r3, pc}

023ff5cc <_ZN9USBSerial9availableEv>:
{
 23ff5cc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff5ce:	7c00      	ldrb	r0, [r0, #16]
 23ff5d0:	f7fe fe8a 	bl	23fe2e8 <HAL_USB_USART_Available_Data>
}
 23ff5d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff5d8:	bd08      	pop	{r3, pc}

023ff5da <_ZN9USBSerial5writeEh>:
{
 23ff5da:	b513      	push	{r0, r1, r4, lr}
 23ff5dc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff5de:	7c00      	ldrb	r0, [r0, #16]
{
 23ff5e0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff5e2:	f7fe fe8f 	bl	23fe304 <HAL_USB_USART_Available_Data_For_Write>
 23ff5e6:	2800      	cmp	r0, #0
 23ff5e8:	9901      	ldr	r1, [sp, #4]
 23ff5ea:	dc01      	bgt.n	23ff5f0 <_ZN9USBSerial5writeEh+0x16>
 23ff5ec:	7c60      	ldrb	r0, [r4, #17]
 23ff5ee:	b120      	cbz	r0, 23ff5fa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff5f0:	7c20      	ldrb	r0, [r4, #16]
 23ff5f2:	f7fe fea3 	bl	23fe33c <HAL_USB_USART_Send_Data>
 23ff5f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff5fa:	b002      	add	sp, #8
 23ff5fc:	bd10      	pop	{r4, pc}

023ff5fe <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff5fe:	7c00      	ldrb	r0, [r0, #16]
 23ff600:	f7fe beaa 	b.w	23fe358 <HAL_USB_USART_Flush_Data>

023ff604 <_ZN9USBSerialD0Ev>:
 23ff604:	b510      	push	{r4, lr}
 23ff606:	4604      	mov	r4, r0
 23ff608:	2114      	movs	r1, #20
 23ff60a:	f7fe fa98 	bl	23fdb3e <_ZdlPvj>
 23ff60e:	4620      	mov	r0, r4
 23ff610:	bd10      	pop	{r4, pc}
	...

023ff614 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff614:	b510      	push	{r4, lr}
 23ff616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff61a:	4604      	mov	r4, r0
 23ff61c:	4608      	mov	r0, r1
 23ff61e:	2100      	movs	r1, #0
 23ff620:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff624:	4b04      	ldr	r3, [pc, #16]	; (23ff638 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff626:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff628:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff62a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff62c:	4611      	mov	r1, r2
  _blocking = true;
 23ff62e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff630:	f7fe fe3e 	bl	23fe2b0 <HAL_USB_USART_Init>
}
 23ff634:	4620      	mov	r0, r4
 23ff636:	bd10      	pop	{r4, pc}
 23ff638:	023fff00 	.word	0x023fff00

023ff63c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23ff63c:	2200      	movs	r2, #0
 23ff63e:	7c00      	ldrb	r0, [r0, #16]
 23ff640:	f7fe be44 	b.w	23fe2cc <HAL_USB_USART_Begin>

023ff644 <_Z19acquireSerialBufferv>:
{
 23ff644:	b510      	push	{r4, lr}
 23ff646:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff648:	2214      	movs	r2, #20
 23ff64a:	2100      	movs	r1, #0
 23ff64c:	f000 fad0 	bl	23ffbf0 <memset>
}
 23ff650:	4620      	mov	r0, r4
 23ff652:	bd10      	pop	{r4, pc}

023ff654 <_Z16_fetch_usbserialv>:
{
 23ff654:	b510      	push	{r4, lr}
 23ff656:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff658:	a803      	add	r0, sp, #12
 23ff65a:	f7ff fff3 	bl	23ff644 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff65e:	4c0c      	ldr	r4, [pc, #48]	; (23ff690 <_Z16_fetch_usbserialv+0x3c>)
 23ff660:	e8d4 1f8f 	ldab	r1, [r4]
 23ff664:	f011 0101 	ands.w	r1, r1, #1
 23ff668:	d10f      	bne.n	23ff68a <_Z16_fetch_usbserialv+0x36>
 23ff66a:	4620      	mov	r0, r4
 23ff66c:	9101      	str	r1, [sp, #4]
 23ff66e:	f7fe fa68 	bl	23fdb42 <__cxa_guard_acquire>
 23ff672:	9901      	ldr	r1, [sp, #4]
 23ff674:	b148      	cbz	r0, 23ff68a <_Z16_fetch_usbserialv+0x36>
 23ff676:	aa03      	add	r2, sp, #12
 23ff678:	4806      	ldr	r0, [pc, #24]	; (23ff694 <_Z16_fetch_usbserialv+0x40>)
 23ff67a:	f7ff ffcb 	bl	23ff614 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff67e:	4620      	mov	r0, r4
 23ff680:	f7fe fa64 	bl	23fdb4c <__cxa_guard_release>
 23ff684:	4804      	ldr	r0, [pc, #16]	; (23ff698 <_Z16_fetch_usbserialv+0x44>)
 23ff686:	f000 faa0 	bl	23ffbca <atexit>
	return _usbserial;
}
 23ff68a:	4802      	ldr	r0, [pc, #8]	; (23ff694 <_Z16_fetch_usbserialv+0x40>)
 23ff68c:	b008      	add	sp, #32
 23ff68e:	bd10      	pop	{r4, pc}
 23ff690:	1007aebc 	.word	0x1007aebc
 23ff694:	1007aec0 	.word	0x1007aec0
 23ff698:	023ff59b 	.word	0x023ff59b

023ff69c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff69c:	2200      	movs	r2, #0
 23ff69e:	6840      	ldr	r0, [r0, #4]
 23ff6a0:	4611      	mov	r1, r2
 23ff6a2:	f7fe bf0f 	b.w	23fe4c4 <network_ready>

023ff6a6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff6a6:	2200      	movs	r2, #0
 23ff6a8:	6840      	ldr	r0, [r0, #4]
 23ff6aa:	4611      	mov	r1, r2
 23ff6ac:	f7fe bf42 	b.w	23fe534 <network_listening>

023ff6b0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff6b0:	2200      	movs	r2, #0
 23ff6b2:	6840      	ldr	r0, [r0, #4]
 23ff6b4:	4611      	mov	r1, r2
 23ff6b6:	f7fe bf59 	b.w	23fe56c <network_get_listen_timeout>

023ff6ba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff6ba:	2200      	movs	r2, #0
 23ff6bc:	6840      	ldr	r0, [r0, #4]
 23ff6be:	f7fe bf47 	b.w	23fe550 <network_set_listen_timeout>

023ff6c2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff6c2:	2200      	movs	r2, #0
 23ff6c4:	6840      	ldr	r0, [r0, #4]
 23ff6c6:	f081 0101 	eor.w	r1, r1, #1
 23ff6ca:	f7fe bf25 	b.w	23fe518 <network_listen>

023ff6ce <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff6ce:	2300      	movs	r3, #0
 23ff6d0:	6840      	ldr	r0, [r0, #4]
 23ff6d2:	461a      	mov	r2, r3
 23ff6d4:	4619      	mov	r1, r3
 23ff6d6:	f7fe bf11 	b.w	23fe4fc <network_off>

023ff6da <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff6da:	2300      	movs	r3, #0
 23ff6dc:	6840      	ldr	r0, [r0, #4]
 23ff6de:	461a      	mov	r2, r3
 23ff6e0:	4619      	mov	r1, r3
 23ff6e2:	f7fe befd 	b.w	23fe4e0 <network_on>

023ff6e6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff6e6:	2200      	movs	r2, #0
 23ff6e8:	6840      	ldr	r0, [r0, #4]
 23ff6ea:	4611      	mov	r1, r2
 23ff6ec:	f7fe bece 	b.w	23fe48c <network_connecting>

023ff6f0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff6f0:	2200      	movs	r2, #0
 23ff6f2:	2102      	movs	r1, #2
 23ff6f4:	6840      	ldr	r0, [r0, #4]
 23ff6f6:	f7fe bed7 	b.w	23fe4a8 <network_disconnect>

023ff6fa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff6fa:	2300      	movs	r3, #0
 23ff6fc:	6840      	ldr	r0, [r0, #4]
 23ff6fe:	461a      	mov	r2, r3
 23ff700:	f7fe beb6 	b.w	23fe470 <network_connect>

023ff704 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff704:	2204      	movs	r2, #4
 23ff706:	4b02      	ldr	r3, [pc, #8]	; (23ff710 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff708:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff70a:	4a02      	ldr	r2, [pc, #8]	; (23ff714 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff70c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff70e:	4770      	bx	lr
 23ff710:	1007aed4 	.word	0x1007aed4
 23ff714:	023fff30 	.word	0x023fff30

023ff718 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 23ff718:	b510      	push	{r4, lr}
 23ff71a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 23ff71c:	f7fe f9e6 	bl	23fdaec <strlen>
 23ff720:	3801      	subs	r0, #1
 23ff722:	1823      	adds	r3, r4, r0
 23ff724:	4620      	mov	r0, r4
	while(i<j){
 23ff726:	4283      	cmp	r3, r0
 23ff728:	d906      	bls.n	23ff738 <_Z11str_reversePc+0x20>
		c = *i;
 23ff72a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 23ff72c:	7819      	ldrb	r1, [r3, #0]
 23ff72e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 23ff732:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 23ff736:	e7f6      	b.n	23ff726 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 23ff738:	bd10      	pop	{r4, pc}

023ff73a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 23ff73a:	b570      	push	{r4, r5, r6, lr}
 23ff73c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 23ff73e:	1e91      	subs	r1, r2, #2
 23ff740:	2922      	cmp	r1, #34	; 0x22
 23ff742:	d81d      	bhi.n	23ff780 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 23ff744:	4625      	mov	r5, r4

	div_t result;
	while(a){
 23ff746:	b930      	cbnz	r0, 23ff756 <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 23ff748:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 23ff74a:	4423      	add	r3, r4
 23ff74c:	429d      	cmp	r5, r3
 23ff74e:	d210      	bcs.n	23ff772 <ultoa+0x38>
            *ptr++ = '0';
 23ff750:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 23ff754:	e7fa      	b.n	23ff74c <ultoa+0x12>
            result.quot = a/radix;
 23ff756:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 23ff75a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 23ff75e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 23ff760:	2809      	cmp	r0, #9
                *ptr += '0';
 23ff762:	bf94      	ite	ls
 23ff764:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 23ff766:	3157      	addhi	r1, #87	; 0x57
 23ff768:	b2c9      	uxtb	r1, r1
            a = result.quot;
 23ff76a:	4630      	mov	r0, r6
 23ff76c:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 23ff770:	e7e9      	b.n	23ff746 <ultoa+0xc>

	*ptr = '\0';
 23ff772:	2300      	movs	r3, #0
	str_reverse(buffer);
 23ff774:	4620      	mov	r0, r4
	*ptr = '\0';
 23ff776:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 23ff778:	f7ff ffce 	bl	23ff718 <_Z11str_reversePc>
	return buffer;
 23ff77c:	4620      	mov	r0, r4
}
 23ff77e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 23ff780:	2000      	movs	r0, #0
 23ff782:	e7fc      	b.n	23ff77e <ultoa+0x44>

023ff784 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23ff784:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 23ff786:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23ff788:	460c      	mov	r4, r1
 23ff78a:	4615      	mov	r5, r2
	if(a<0){
 23ff78c:	da0d      	bge.n	23ff7aa <itoa+0x26>
		*buffer = '-';
 23ff78e:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 23ff790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23ff794:	bf0c      	ite	eq
 23ff796:	4618      	moveq	r0, r3
 23ff798:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 23ff79a:	2301      	movs	r3, #1
		*buffer = '-';
 23ff79c:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 23ff79e:	462a      	mov	r2, r5
 23ff7a0:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 23ff7a2:	f7ff ffca 	bl	23ff73a <ultoa>
	}
	return buffer;
}
 23ff7a6:	4620      	mov	r0, r4
 23ff7a8:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 23ff7aa:	2301      	movs	r3, #1
 23ff7ac:	e7f9      	b.n	23ff7a2 <itoa+0x1e>
	...

023ff7b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff7b0:	4b01      	ldr	r3, [pc, #4]	; (23ff7b8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff7b2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff7b4:	4770      	bx	lr
 23ff7b6:	bf00      	nop
 23ff7b8:	1007ad00 	.word	0x1007ad00

023ff7bc <serialEventRun>:
{
 23ff7bc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff7be:	4b0f      	ldr	r3, [pc, #60]	; (23ff7fc <serialEventRun+0x40>)
 23ff7c0:	b143      	cbz	r3, 23ff7d4 <serialEventRun+0x18>
 23ff7c2:	f7ff ff47 	bl	23ff654 <_Z16_fetch_usbserialv>
 23ff7c6:	6803      	ldr	r3, [r0, #0]
 23ff7c8:	691b      	ldr	r3, [r3, #16]
 23ff7ca:	4798      	blx	r3
 23ff7cc:	2800      	cmp	r0, #0
 23ff7ce:	dd01      	ble.n	23ff7d4 <serialEventRun+0x18>
        serialEvent();
 23ff7d0:	e000      	b.n	23ff7d4 <serialEventRun+0x18>
 23ff7d2:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff7d4:	4b0a      	ldr	r3, [pc, #40]	; (23ff800 <serialEventRun+0x44>)
 23ff7d6:	b143      	cbz	r3, 23ff7ea <serialEventRun+0x2e>
 23ff7d8:	f000 f962 	bl	23ffaa0 <_Z22__fetch_global_Serial1v>
 23ff7dc:	6803      	ldr	r3, [r0, #0]
 23ff7de:	691b      	ldr	r3, [r3, #16]
 23ff7e0:	4798      	blx	r3
 23ff7e2:	2800      	cmp	r0, #0
 23ff7e4:	dd01      	ble.n	23ff7ea <serialEventRun+0x2e>
        serialEvent1();
 23ff7e6:	e000      	b.n	23ff7ea <serialEventRun+0x2e>
 23ff7e8:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff7ea:	4b06      	ldr	r3, [pc, #24]	; (23ff804 <serialEventRun+0x48>)
 23ff7ec:	b10b      	cbz	r3, 23ff7f2 <serialEventRun+0x36>
 23ff7ee:	f000 f99d 	bl	23ffb2c <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff7f2:	4b05      	ldr	r3, [pc, #20]	; (23ff808 <serialEventRun+0x4c>)
 23ff7f4:	b10b      	cbz	r3, 23ff7fa <serialEventRun+0x3e>
 23ff7f6:	f000 f9cf 	bl	23ffb98 <_Z15serialEventRun3v>
}
 23ff7fa:	bd08      	pop	{r3, pc}
	...

023ff80c <_post_loop>:
{
 23ff80c:	b508      	push	{r3, lr}
	serialEventRun();
 23ff80e:	f7ff ffd5 	bl	23ff7bc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff812:	f7fe fbfd 	bl	23fe010 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff816:	4b01      	ldr	r3, [pc, #4]	; (23ff81c <_post_loop+0x10>)
 23ff818:	6018      	str	r0, [r3, #0]
}
 23ff81a:	bd08      	pop	{r3, pc}
 23ff81c:	1007aef0 	.word	0x1007aef0

023ff820 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff820:	4805      	ldr	r0, [pc, #20]	; (23ff838 <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff822:	4a06      	ldr	r2, [pc, #24]	; (23ff83c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff824:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff826:	1a12      	subs	r2, r2, r0
 23ff828:	4905      	ldr	r1, [pc, #20]	; (23ff840 <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff82a:	f000 f9d4 	bl	23ffbd6 <memcpy>
    __backup_sram_signature = signature;
 23ff82e:	4b05      	ldr	r3, [pc, #20]	; (23ff844 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff830:	4a05      	ldr	r2, [pc, #20]	; (23ff848 <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff832:	601a      	str	r2, [r3, #0]
}
 23ff834:	bd08      	pop	{r3, pc}
 23ff836:	bf00      	nop
 23ff838:	1007b400 	.word	0x1007b400
 23ff83c:	1007b404 	.word	0x1007b404
 23ff840:	085ff380 	.word	0x085ff380
 23ff844:	1007b400 	.word	0x1007b400
 23ff848:	9a271c1e 	.word	0x9a271c1e

023ff84c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff84c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff84e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff850:	461a      	mov	r2, r3
 23ff852:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff856:	9300      	str	r3, [sp, #0]
 23ff858:	f7fe fdd2 	bl	23fe400 <system_ctrl_set_result>
}
 23ff85c:	b003      	add	sp, #12
 23ff85e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff864 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff864:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff866:	8843      	ldrh	r3, [r0, #2]
 23ff868:	2b0a      	cmp	r3, #10
 23ff86a:	d008      	beq.n	23ff87e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff86c:	2b50      	cmp	r3, #80	; 0x50
 23ff86e:	d10b      	bne.n	23ff888 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff870:	4b09      	ldr	r3, [pc, #36]	; (23ff898 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff872:	681b      	ldr	r3, [r3, #0]
 23ff874:	b14b      	cbz	r3, 23ff88a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff876:	b003      	add	sp, #12
 23ff878:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff87c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff87e:	f7ff ffe5 	bl	23ff84c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff882:	b003      	add	sp, #12
 23ff884:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff888:	2300      	movs	r3, #0
 23ff88a:	461a      	mov	r2, r3
 23ff88c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff890:	9300      	str	r3, [sp, #0]
 23ff892:	f7fe fdb5 	bl	23fe400 <system_ctrl_set_result>
}
 23ff896:	e7f4      	b.n	23ff882 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff898:	1007aee0 	.word	0x1007aee0

023ff89c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff89c:	2100      	movs	r1, #0
{
 23ff89e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff8a0:	4811      	ldr	r0, [pc, #68]	; (23ff8e8 <module_user_init_hook+0x4c>)
 23ff8a2:	f7fe fee1 	bl	23fe668 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff8a6:	4b11      	ldr	r3, [pc, #68]	; (23ff8ec <module_user_init_hook+0x50>)
 23ff8a8:	681a      	ldr	r2, [r3, #0]
 23ff8aa:	4b11      	ldr	r3, [pc, #68]	; (23ff8f0 <module_user_init_hook+0x54>)
 23ff8ac:	429a      	cmp	r2, r3
 23ff8ae:	bf0c      	ite	eq
 23ff8b0:	2201      	moveq	r2, #1
 23ff8b2:	2200      	movne	r2, #0
 23ff8b4:	4b0f      	ldr	r3, [pc, #60]	; (23ff8f4 <module_user_init_hook+0x58>)
 23ff8b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff8b8:	d001      	beq.n	23ff8be <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff8ba:	f7ff ffb1 	bl	23ff820 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff8be:	f7fe fb99 	bl	23fdff4 <HAL_RNG_GetRandomNumber>
 23ff8c2:	4604      	mov	r4, r0
    srand(seed);
 23ff8c4:	f000 f99c 	bl	23ffc00 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff8c8:	4b0b      	ldr	r3, [pc, #44]	; (23ff8f8 <module_user_init_hook+0x5c>)
 23ff8ca:	b113      	cbz	r3, 23ff8d2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff8cc:	4620      	mov	r0, r4
 23ff8ce:	e000      	b.n	23ff8d2 <module_user_init_hook+0x36>
 23ff8d0:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff8d2:	2100      	movs	r1, #0
 23ff8d4:	4808      	ldr	r0, [pc, #32]	; (23ff8f8 <module_user_init_hook+0x5c>)
 23ff8d6:	f7fe fdbd 	bl	23fe454 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff8da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff8de:	2100      	movs	r1, #0
 23ff8e0:	4806      	ldr	r0, [pc, #24]	; (23ff8fc <module_user_init_hook+0x60>)
 23ff8e2:	f7fe bd7f 	b.w	23fe3e4 <system_ctrl_set_app_request_handler>
 23ff8e6:	bf00      	nop
 23ff8e8:	023ff7b1 	.word	0x023ff7b1
 23ff8ec:	1007b400 	.word	0x1007b400
 23ff8f0:	9a271c1e 	.word	0x9a271c1e
 23ff8f4:	1007aedc 	.word	0x1007aedc
 23ff8f8:	00000000 	.word	0x00000000
 23ff8fc:	023ff865 	.word	0x023ff865

023ff900 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff900:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff902:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff904:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff906:	d902      	bls.n	23ff90e <pinAvailable+0xe>
    return false;
 23ff908:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff90a:	b003      	add	sp, #12
 23ff90c:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff90e:	f1a0 030f 	sub.w	r3, r0, #15
 23ff912:	2b02      	cmp	r3, #2
 23ff914:	d90b      	bls.n	23ff92e <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff916:	2801      	cmp	r0, #1
 23ff918:	d821      	bhi.n	23ff95e <pinAvailable+0x5e>
 23ff91a:	f000 f86d 	bl	23ff9f8 <_Z19__fetch_global_Wirev>
 23ff91e:	2100      	movs	r1, #0
 23ff920:	7c00      	ldrb	r0, [r0, #16]
 23ff922:	f7fe fbf3 	bl	23fe10c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff926:	f080 0001 	eor.w	r0, r0, #1
 23ff92a:	b2c0      	uxtb	r0, r0
 23ff92c:	e7ed      	b.n	23ff90a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff92e:	4d11      	ldr	r5, [pc, #68]	; (23ff974 <pinAvailable+0x74>)
 23ff930:	e8d5 1f8f 	ldab	r1, [r5]
 23ff934:	f011 0101 	ands.w	r1, r1, #1
 23ff938:	d10b      	bne.n	23ff952 <pinAvailable+0x52>
 23ff93a:	4628      	mov	r0, r5
 23ff93c:	9101      	str	r1, [sp, #4]
 23ff93e:	f7fe f900 	bl	23fdb42 <__cxa_guard_acquire>
 23ff942:	9901      	ldr	r1, [sp, #4]
 23ff944:	b128      	cbz	r0, 23ff952 <pinAvailable+0x52>
 23ff946:	480c      	ldr	r0, [pc, #48]	; (23ff978 <pinAvailable+0x78>)
 23ff948:	f7ff fc74 	bl	23ff234 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff94c:	4628      	mov	r0, r5
 23ff94e:	f7fe f8fd 	bl	23fdb4c <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff952:	4b09      	ldr	r3, [pc, #36]	; (23ff978 <pinAvailable+0x78>)
 23ff954:	7818      	ldrb	r0, [r3, #0]
 23ff956:	f7fe fc2d 	bl	23fe1b4 <hal_spi_is_enabled>
 23ff95a:	2800      	cmp	r0, #0
 23ff95c:	d1d4      	bne.n	23ff908 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff95e:	3c08      	subs	r4, #8
 23ff960:	2c01      	cmp	r4, #1
 23ff962:	d805      	bhi.n	23ff970 <pinAvailable+0x70>
 23ff964:	f000 f89c 	bl	23ffaa0 <_Z22__fetch_global_Serial1v>
 23ff968:	7c00      	ldrb	r0, [r0, #16]
 23ff96a:	f7fe fc77 	bl	23fe25c <hal_usart_is_enabled>
 23ff96e:	e7da      	b.n	23ff926 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff970:	2001      	movs	r0, #1
 23ff972:	e7ca      	b.n	23ff90a <pinAvailable+0xa>
 23ff974:	1007aee4 	.word	0x1007aee4
 23ff978:	1007aee8 	.word	0x1007aee8

023ff97c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff97c:	281b      	cmp	r0, #27
{
 23ff97e:	b538      	push	{r3, r4, r5, lr}
 23ff980:	4604      	mov	r4, r0
 23ff982:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff984:	d80a      	bhi.n	23ff99c <pinMode+0x20>
 23ff986:	29ff      	cmp	r1, #255	; 0xff
 23ff988:	d008      	beq.n	23ff99c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff98a:	f7ff ffb9 	bl	23ff900 <pinAvailable>
 23ff98e:	b128      	cbz	r0, 23ff99c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff990:	4629      	mov	r1, r5
 23ff992:	4620      	mov	r0, r4
}
 23ff994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff998:	f7fe bb56 	b.w	23fe048 <hal_gpio_mode>
}
 23ff99c:	bd38      	pop	{r3, r4, r5, pc}

023ff99e <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23ff99e:	b510      	push	{r4, lr}
 23ff9a0:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23ff9a2:	f7ff ffad 	bl	23ff900 <pinAvailable>
 23ff9a6:	b150      	cbz	r0, 23ff9be <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23ff9a8:	2103      	movs	r1, #3
 23ff9aa:	4620      	mov	r0, r4
 23ff9ac:	f7fe fb3e 	bl	23fe02c <hal_pin_validate_function>
 23ff9b0:	2803      	cmp	r0, #3
 23ff9b2:	d104      	bne.n	23ff9be <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23ff9b4:	4620      	mov	r0, r4
}
 23ff9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23ff9ba:	f7fe bb53 	b.w	23fe064 <hal_adc_read>
}
 23ff9be:	2000      	movs	r0, #0
 23ff9c0:	bd10      	pop	{r4, pc}

023ff9c2 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff9c2:	4770      	bx	lr

023ff9c4 <_Z17acquireWireBufferv>:
{
 23ff9c4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff9c6:	4b0a      	ldr	r3, [pc, #40]	; (23ff9f0 <_Z17acquireWireBufferv+0x2c>)
{
 23ff9c8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff9ca:	6003      	str	r3, [r0, #0]
 23ff9cc:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff9ce:	4909      	ldr	r1, [pc, #36]	; (23ff9f4 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff9d0:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff9d2:	2020      	movs	r0, #32
 23ff9d4:	f000 f8f4 	bl	23ffbc0 <_ZnajRKSt9nothrow_t>
	};
 23ff9d8:	2520      	movs	r5, #32
 23ff9da:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff9dc:	4905      	ldr	r1, [pc, #20]	; (23ff9f4 <_Z17acquireWireBufferv+0x30>)
 23ff9de:	4628      	mov	r0, r5
	};
 23ff9e0:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff9e2:	f000 f8ed 	bl	23ffbc0 <_ZnajRKSt9nothrow_t>
	};
 23ff9e6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff9ea:	4620      	mov	r0, r4
 23ff9ec:	bd38      	pop	{r3, r4, r5, pc}
 23ff9ee:	bf00      	nop
 23ff9f0:	00010018 	.word	0x00010018
 23ff9f4:	023fff64 	.word	0x023fff64

023ff9f8 <_Z19__fetch_global_Wirev>:
{
 23ff9f8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff9fa:	4d0e      	ldr	r5, [pc, #56]	; (23ffa34 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff9fc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff9fe:	e8d5 1f8f 	ldab	r1, [r5]
 23ffa02:	f011 0401 	ands.w	r4, r1, #1
 23ffa06:	d111      	bne.n	23ffa2c <_Z19__fetch_global_Wirev+0x34>
 23ffa08:	4628      	mov	r0, r5
 23ffa0a:	f7fe f89a 	bl	23fdb42 <__cxa_guard_acquire>
 23ffa0e:	b168      	cbz	r0, 23ffa2c <_Z19__fetch_global_Wirev+0x34>
 23ffa10:	4668      	mov	r0, sp
 23ffa12:	f7ff ffd7 	bl	23ff9c4 <_Z17acquireWireBufferv>
 23ffa16:	466a      	mov	r2, sp
 23ffa18:	4621      	mov	r1, r4
 23ffa1a:	4807      	ldr	r0, [pc, #28]	; (23ffa38 <_Z19__fetch_global_Wirev+0x40>)
 23ffa1c:	f7ff f978 	bl	23fed10 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ffa20:	4628      	mov	r0, r5
 23ffa22:	f7fe f893 	bl	23fdb4c <__cxa_guard_release>
 23ffa26:	4805      	ldr	r0, [pc, #20]	; (23ffa3c <_Z19__fetch_global_Wirev+0x44>)
 23ffa28:	f000 f8cf 	bl	23ffbca <atexit>
	return wire;
}
 23ffa2c:	4802      	ldr	r0, [pc, #8]	; (23ffa38 <_Z19__fetch_global_Wirev+0x40>)
 23ffa2e:	b007      	add	sp, #28
 23ffa30:	bd30      	pop	{r4, r5, pc}
 23ffa32:	bf00      	nop
 23ffa34:	1007aef4 	.word	0x1007aef4
 23ffa38:	1007aef8 	.word	0x1007aef8
 23ffa3c:	023ff9c3 	.word	0x023ff9c3

023ffa40 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffa40:	4770      	bx	lr
	...

023ffa44 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffa44:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ffa46:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffa48:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ffa4a:	462a      	mov	r2, r5
 23ffa4c:	2100      	movs	r1, #0
 23ffa4e:	f000 f8cf 	bl	23ffbf0 <memset>
 23ffa52:	8025      	strh	r5, [r4, #0]
 23ffa54:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffa56:	4907      	ldr	r1, [pc, #28]	; (23ffa74 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ffa58:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ffa5a:	8125      	strh	r5, [r4, #8]
 23ffa5c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffa5e:	f000 f8af 	bl	23ffbc0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffa62:	4904      	ldr	r1, [pc, #16]	; (23ffa74 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ffa64:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffa66:	4628      	mov	r0, r5
 23ffa68:	f000 f8aa 	bl	23ffbc0 <_ZnajRKSt9nothrow_t>
    };
 23ffa6c:	60e0      	str	r0, [r4, #12]
}
 23ffa6e:	4620      	mov	r0, r4
 23ffa70:	bd38      	pop	{r3, r4, r5, pc}
 23ffa72:	bf00      	nop
 23ffa74:	023fff64 	.word	0x023fff64

023ffa78 <__tcf_2>:
 23ffa78:	4770      	bx	lr

023ffa7a <__tcf_1>:
 23ffa7a:	4770      	bx	lr

023ffa7c <_Z20acquireSerial1Bufferv>:
{
 23ffa7c:	b510      	push	{r4, lr}
 23ffa7e:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ffa80:	f7ff ffe0 	bl	23ffa44 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ffa84:	4620      	mov	r0, r4
 23ffa86:	bd10      	pop	{r4, pc}

023ffa88 <_Z20acquireSerial2Bufferv>:
 23ffa88:	b510      	push	{r4, lr}
 23ffa8a:	4604      	mov	r4, r0
 23ffa8c:	f7ff ffda 	bl	23ffa44 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffa90:	4620      	mov	r0, r4
 23ffa92:	bd10      	pop	{r4, pc}

023ffa94 <_Z20acquireSerial3Bufferv>:
 23ffa94:	b510      	push	{r4, lr}
 23ffa96:	4604      	mov	r4, r0
 23ffa98:	f7ff ffd4 	bl	23ffa44 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffa9c:	4620      	mov	r0, r4
 23ffa9e:	bd10      	pop	{r4, pc}

023ffaa0 <_Z22__fetch_global_Serial1v>:
{
 23ffaa0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffaa2:	4d0e      	ldr	r5, [pc, #56]	; (23ffadc <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ffaa4:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffaa6:	e8d5 1f8f 	ldab	r1, [r5]
 23ffaaa:	f011 0401 	ands.w	r4, r1, #1
 23ffaae:	d111      	bne.n	23ffad4 <_Z22__fetch_global_Serial1v+0x34>
 23ffab0:	4628      	mov	r0, r5
 23ffab2:	f7fe f846 	bl	23fdb42 <__cxa_guard_acquire>
 23ffab6:	b168      	cbz	r0, 23ffad4 <_Z22__fetch_global_Serial1v+0x34>
 23ffab8:	a801      	add	r0, sp, #4
 23ffaba:	f7ff ffdf 	bl	23ffa7c <_Z20acquireSerial1Bufferv>
 23ffabe:	4621      	mov	r1, r4
 23ffac0:	aa01      	add	r2, sp, #4
 23ffac2:	4807      	ldr	r0, [pc, #28]	; (23ffae0 <_Z22__fetch_global_Serial1v+0x40>)
 23ffac4:	f7ff fd50 	bl	23ff568 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffac8:	4628      	mov	r0, r5
 23ffaca:	f7fe f83f 	bl	23fdb4c <__cxa_guard_release>
 23fface:	4805      	ldr	r0, [pc, #20]	; (23ffae4 <_Z22__fetch_global_Serial1v+0x44>)
 23ffad0:	f000 f87b 	bl	23ffbca <atexit>
    return serial1;
}
 23ffad4:	4802      	ldr	r0, [pc, #8]	; (23ffae0 <_Z22__fetch_global_Serial1v+0x40>)
 23ffad6:	b007      	add	sp, #28
 23ffad8:	bd30      	pop	{r4, r5, pc}
 23ffada:	bf00      	nop
 23ffadc:	1007af0c 	.word	0x1007af0c
 23ffae0:	1007af18 	.word	0x1007af18
 23ffae4:	023ffa41 	.word	0x023ffa41

023ffae8 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ffae8:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffaea:	4c0d      	ldr	r4, [pc, #52]	; (23ffb20 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ffaec:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffaee:	e8d4 3f8f 	ldab	r3, [r4]
 23ffaf2:	07db      	lsls	r3, r3, #31
 23ffaf4:	d411      	bmi.n	23ffb1a <_Z22__fetch_global_Serial2v+0x32>
 23ffaf6:	4620      	mov	r0, r4
 23ffaf8:	f7fe f823 	bl	23fdb42 <__cxa_guard_acquire>
 23ffafc:	b168      	cbz	r0, 23ffb1a <_Z22__fetch_global_Serial2v+0x32>
 23ffafe:	a801      	add	r0, sp, #4
 23ffb00:	f7ff ffc2 	bl	23ffa88 <_Z20acquireSerial2Bufferv>
 23ffb04:	2101      	movs	r1, #1
 23ffb06:	aa01      	add	r2, sp, #4
 23ffb08:	4806      	ldr	r0, [pc, #24]	; (23ffb24 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffb0a:	f7ff fd2d 	bl	23ff568 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb0e:	4620      	mov	r0, r4
 23ffb10:	f7fe f81c 	bl	23fdb4c <__cxa_guard_release>
 23ffb14:	4804      	ldr	r0, [pc, #16]	; (23ffb28 <_Z22__fetch_global_Serial2v+0x40>)
 23ffb16:	f000 f858 	bl	23ffbca <atexit>
	return serial2;
}
 23ffb1a:	4802      	ldr	r0, [pc, #8]	; (23ffb24 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffb1c:	b006      	add	sp, #24
 23ffb1e:	bd10      	pop	{r4, pc}
 23ffb20:	1007af10 	.word	0x1007af10
 23ffb24:	1007af2c 	.word	0x1007af2c
 23ffb28:	023ffa7b 	.word	0x023ffa7b

023ffb2c <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ffb2c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ffb2e:	f7ff ffdb 	bl	23ffae8 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffb32:	4b07      	ldr	r3, [pc, #28]	; (23ffb50 <_Z15serialEventRun2v+0x24>)
 23ffb34:	4604      	mov	r4, r0
 23ffb36:	b153      	cbz	r3, 23ffb4e <_Z15serialEventRun2v+0x22>
 23ffb38:	f7ff fd2a 	bl	23ff590 <_ZN11USARTSerial9isEnabledEv>
 23ffb3c:	b138      	cbz	r0, 23ffb4e <_Z15serialEventRun2v+0x22>
 23ffb3e:	6823      	ldr	r3, [r4, #0]
 23ffb40:	4620      	mov	r0, r4
 23ffb42:	691b      	ldr	r3, [r3, #16]
 23ffb44:	4798      	blx	r3
 23ffb46:	2800      	cmp	r0, #0
 23ffb48:	dd01      	ble.n	23ffb4e <_Z15serialEventRun2v+0x22>
        handler();
 23ffb4a:	e000      	b.n	23ffb4e <_Z15serialEventRun2v+0x22>
 23ffb4c:	bf00      	nop
}
 23ffb4e:	bd10      	pop	{r4, pc}
 23ffb50:	00000000 	.word	0x00000000

023ffb54 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ffb54:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffb56:	4c0d      	ldr	r4, [pc, #52]	; (23ffb8c <_Z22__fetch_global_Serial3v+0x38>)
{
 23ffb58:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffb5a:	e8d4 3f8f 	ldab	r3, [r4]
 23ffb5e:	07db      	lsls	r3, r3, #31
 23ffb60:	d411      	bmi.n	23ffb86 <_Z22__fetch_global_Serial3v+0x32>
 23ffb62:	4620      	mov	r0, r4
 23ffb64:	f7fd ffed 	bl	23fdb42 <__cxa_guard_acquire>
 23ffb68:	b168      	cbz	r0, 23ffb86 <_Z22__fetch_global_Serial3v+0x32>
 23ffb6a:	a801      	add	r0, sp, #4
 23ffb6c:	f7ff ff92 	bl	23ffa94 <_Z20acquireSerial3Bufferv>
 23ffb70:	2102      	movs	r1, #2
 23ffb72:	aa01      	add	r2, sp, #4
 23ffb74:	4806      	ldr	r0, [pc, #24]	; (23ffb90 <_Z22__fetch_global_Serial3v+0x3c>)
 23ffb76:	f7ff fcf7 	bl	23ff568 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb7a:	4620      	mov	r0, r4
 23ffb7c:	f7fd ffe6 	bl	23fdb4c <__cxa_guard_release>
 23ffb80:	4804      	ldr	r0, [pc, #16]	; (23ffb94 <_Z22__fetch_global_Serial3v+0x40>)
 23ffb82:	f000 f822 	bl	23ffbca <atexit>
	return serial3;
}
 23ffb86:	4802      	ldr	r0, [pc, #8]	; (23ffb90 <_Z22__fetch_global_Serial3v+0x3c>)
 23ffb88:	b006      	add	sp, #24
 23ffb8a:	bd10      	pop	{r4, pc}
 23ffb8c:	1007af14 	.word	0x1007af14
 23ffb90:	1007af40 	.word	0x1007af40
 23ffb94:	023ffa79 	.word	0x023ffa79

023ffb98 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ffb98:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ffb9a:	f7ff ffdb 	bl	23ffb54 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffb9e:	4b07      	ldr	r3, [pc, #28]	; (23ffbbc <_Z15serialEventRun3v+0x24>)
 23ffba0:	4604      	mov	r4, r0
 23ffba2:	b153      	cbz	r3, 23ffbba <_Z15serialEventRun3v+0x22>
 23ffba4:	f7ff fcf4 	bl	23ff590 <_ZN11USARTSerial9isEnabledEv>
 23ffba8:	b138      	cbz	r0, 23ffbba <_Z15serialEventRun3v+0x22>
 23ffbaa:	6823      	ldr	r3, [r4, #0]
 23ffbac:	4620      	mov	r0, r4
 23ffbae:	691b      	ldr	r3, [r3, #16]
 23ffbb0:	4798      	blx	r3
 23ffbb2:	2800      	cmp	r0, #0
 23ffbb4:	dd01      	ble.n	23ffbba <_Z15serialEventRun3v+0x22>
        handler();
 23ffbb6:	e000      	b.n	23ffbba <_Z15serialEventRun3v+0x22>
 23ffbb8:	bf00      	nop
}
 23ffbba:	bd10      	pop	{r4, pc}
 23ffbbc:	00000000 	.word	0x00000000

023ffbc0 <_ZnajRKSt9nothrow_t>:
 23ffbc0:	f7fd bfbb 	b.w	23fdb3a <_Znaj>

023ffbc4 <_ZSt25__throw_bad_function_callv>:
 23ffbc4:	b508      	push	{r3, lr}
 23ffbc6:	f7fe fd25 	bl	23fe614 <abort>

023ffbca <atexit>:
 23ffbca:	2300      	movs	r3, #0
 23ffbcc:	4601      	mov	r1, r0
 23ffbce:	461a      	mov	r2, r3
 23ffbd0:	4618      	mov	r0, r3
 23ffbd2:	f000 b869 	b.w	23ffca8 <__register_exitproc>

023ffbd6 <memcpy>:
 23ffbd6:	440a      	add	r2, r1
 23ffbd8:	1e43      	subs	r3, r0, #1
 23ffbda:	4291      	cmp	r1, r2
 23ffbdc:	d100      	bne.n	23ffbe0 <memcpy+0xa>
 23ffbde:	4770      	bx	lr
 23ffbe0:	b510      	push	{r4, lr}
 23ffbe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ffbe6:	4291      	cmp	r1, r2
 23ffbe8:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ffbec:	d1f9      	bne.n	23ffbe2 <memcpy+0xc>
 23ffbee:	bd10      	pop	{r4, pc}

023ffbf0 <memset>:
 23ffbf0:	4402      	add	r2, r0
 23ffbf2:	4603      	mov	r3, r0
 23ffbf4:	4293      	cmp	r3, r2
 23ffbf6:	d100      	bne.n	23ffbfa <memset+0xa>
 23ffbf8:	4770      	bx	lr
 23ffbfa:	f803 1b01 	strb.w	r1, [r3], #1
 23ffbfe:	e7f9      	b.n	23ffbf4 <memset+0x4>

023ffc00 <srand>:
 23ffc00:	b538      	push	{r3, r4, r5, lr}
 23ffc02:	4b10      	ldr	r3, [pc, #64]	; (23ffc44 <srand+0x44>)
 23ffc04:	4604      	mov	r4, r0
 23ffc06:	681d      	ldr	r5, [r3, #0]
 23ffc08:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffc0a:	b9b3      	cbnz	r3, 23ffc3a <srand+0x3a>
 23ffc0c:	2018      	movs	r0, #24
 23ffc0e:	f7fe fcd7 	bl	23fe5c0 <malloc>
 23ffc12:	4602      	mov	r2, r0
 23ffc14:	63a8      	str	r0, [r5, #56]	; 0x38
 23ffc16:	b920      	cbnz	r0, 23ffc22 <srand+0x22>
 23ffc18:	4b0b      	ldr	r3, [pc, #44]	; (23ffc48 <srand+0x48>)
 23ffc1a:	2142      	movs	r1, #66	; 0x42
 23ffc1c:	480b      	ldr	r0, [pc, #44]	; (23ffc4c <srand+0x4c>)
 23ffc1e:	f7fe fd15 	bl	23fe64c <__assert_func>
 23ffc22:	490b      	ldr	r1, [pc, #44]	; (23ffc50 <srand+0x50>)
 23ffc24:	4b0b      	ldr	r3, [pc, #44]	; (23ffc54 <srand+0x54>)
 23ffc26:	e9c0 1300 	strd	r1, r3, [r0]
 23ffc2a:	4b0b      	ldr	r3, [pc, #44]	; (23ffc58 <srand+0x58>)
 23ffc2c:	2100      	movs	r1, #0
 23ffc2e:	6083      	str	r3, [r0, #8]
 23ffc30:	230b      	movs	r3, #11
 23ffc32:	8183      	strh	r3, [r0, #12]
 23ffc34:	2001      	movs	r0, #1
 23ffc36:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ffc3a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffc3c:	2200      	movs	r2, #0
 23ffc3e:	611c      	str	r4, [r3, #16]
 23ffc40:	615a      	str	r2, [r3, #20]
 23ffc42:	bd38      	pop	{r3, r4, r5, pc}
 23ffc44:	1007ad00 	.word	0x1007ad00
 23ffc48:	023fff65 	.word	0x023fff65
 23ffc4c:	023fff7c 	.word	0x023fff7c
 23ffc50:	abcd330e 	.word	0xabcd330e
 23ffc54:	e66d1234 	.word	0xe66d1234
 23ffc58:	0005deec 	.word	0x0005deec

023ffc5c <strcpy>:
 23ffc5c:	4603      	mov	r3, r0
 23ffc5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ffc62:	f803 2b01 	strb.w	r2, [r3], #1
 23ffc66:	2a00      	cmp	r2, #0
 23ffc68:	d1f9      	bne.n	23ffc5e <strcpy+0x2>
 23ffc6a:	4770      	bx	lr

023ffc6c <strdup>:
 23ffc6c:	4b02      	ldr	r3, [pc, #8]	; (23ffc78 <strdup+0xc>)
 23ffc6e:	4601      	mov	r1, r0
 23ffc70:	6818      	ldr	r0, [r3, #0]
 23ffc72:	f000 b803 	b.w	23ffc7c <_strdup_r>
 23ffc76:	bf00      	nop
 23ffc78:	1007ad00 	.word	0x1007ad00

023ffc7c <_strdup_r>:
 23ffc7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ffc7e:	4604      	mov	r4, r0
 23ffc80:	4608      	mov	r0, r1
 23ffc82:	460d      	mov	r5, r1
 23ffc84:	f7fd ff32 	bl	23fdaec <strlen>
 23ffc88:	1c42      	adds	r2, r0, #1
 23ffc8a:	4620      	mov	r0, r4
 23ffc8c:	4611      	mov	r1, r2
 23ffc8e:	9201      	str	r2, [sp, #4]
 23ffc90:	f7fe fcce 	bl	23fe630 <_malloc_r>
 23ffc94:	4604      	mov	r4, r0
 23ffc96:	b118      	cbz	r0, 23ffca0 <_strdup_r+0x24>
 23ffc98:	9a01      	ldr	r2, [sp, #4]
 23ffc9a:	4629      	mov	r1, r5
 23ffc9c:	f7ff ff9b 	bl	23ffbd6 <memcpy>
 23ffca0:	4620      	mov	r0, r4
 23ffca2:	b003      	add	sp, #12
 23ffca4:	bd30      	pop	{r4, r5, pc}
	...

023ffca8 <__register_exitproc>:
 23ffca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffcac:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffd6c <__register_exitproc+0xc4>
 23ffcb0:	4606      	mov	r6, r0
 23ffcb2:	461f      	mov	r7, r3
 23ffcb4:	460d      	mov	r5, r1
 23ffcb6:	f8d8 0000 	ldr.w	r0, [r8]
 23ffcba:	4691      	mov	r9, r2
 23ffcbc:	f000 f858 	bl	23ffd70 <__retarget_lock_acquire_recursive>
 23ffcc0:	4b26      	ldr	r3, [pc, #152]	; (23ffd5c <__register_exitproc+0xb4>)
 23ffcc2:	681c      	ldr	r4, [r3, #0]
 23ffcc4:	b934      	cbnz	r4, 23ffcd4 <__register_exitproc+0x2c>
 23ffcc6:	4c26      	ldr	r4, [pc, #152]	; (23ffd60 <__register_exitproc+0xb8>)
 23ffcc8:	601c      	str	r4, [r3, #0]
 23ffcca:	4b26      	ldr	r3, [pc, #152]	; (23ffd64 <__register_exitproc+0xbc>)
 23ffccc:	b113      	cbz	r3, 23ffcd4 <__register_exitproc+0x2c>
 23ffcce:	681b      	ldr	r3, [r3, #0]
 23ffcd0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffcd4:	6863      	ldr	r3, [r4, #4]
 23ffcd6:	2b1f      	cmp	r3, #31
 23ffcd8:	dd07      	ble.n	23ffcea <__register_exitproc+0x42>
 23ffcda:	f8d8 0000 	ldr.w	r0, [r8]
 23ffcde:	f000 f849 	bl	23ffd74 <__retarget_lock_release_recursive>
 23ffce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffcea:	b35e      	cbz	r6, 23ffd44 <__register_exitproc+0x9c>
 23ffcec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffcf0:	b988      	cbnz	r0, 23ffd16 <__register_exitproc+0x6e>
 23ffcf2:	4b1d      	ldr	r3, [pc, #116]	; (23ffd68 <__register_exitproc+0xc0>)
 23ffcf4:	b923      	cbnz	r3, 23ffd00 <__register_exitproc+0x58>
 23ffcf6:	f8d8 0000 	ldr.w	r0, [r8]
 23ffcfa:	f000 f83a 	bl	23ffd72 <__retarget_lock_release>
 23ffcfe:	e7f0      	b.n	23ffce2 <__register_exitproc+0x3a>
 23ffd00:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffd04:	f7fe fc5c 	bl	23fe5c0 <malloc>
 23ffd08:	2800      	cmp	r0, #0
 23ffd0a:	d0f4      	beq.n	23ffcf6 <__register_exitproc+0x4e>
 23ffd0c:	2300      	movs	r3, #0
 23ffd0e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffd12:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffd16:	6863      	ldr	r3, [r4, #4]
 23ffd18:	2201      	movs	r2, #1
 23ffd1a:	2e02      	cmp	r6, #2
 23ffd1c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffd20:	fa02 f203 	lsl.w	r2, r2, r3
 23ffd24:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffd28:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffd2c:	ea43 0302 	orr.w	r3, r3, r2
 23ffd30:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffd34:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffd38:	bf02      	ittt	eq
 23ffd3a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffd3e:	4313      	orreq	r3, r2
 23ffd40:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffd44:	6863      	ldr	r3, [r4, #4]
 23ffd46:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd4a:	1c5a      	adds	r2, r3, #1
 23ffd4c:	3302      	adds	r3, #2
 23ffd4e:	6062      	str	r2, [r4, #4]
 23ffd50:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffd54:	f000 f80e 	bl	23ffd74 <__retarget_lock_release_recursive>
 23ffd58:	2000      	movs	r0, #0
 23ffd5a:	e7c4      	b.n	23ffce6 <__register_exitproc+0x3e>
 23ffd5c:	1007afe0 	.word	0x1007afe0
 23ffd60:	1007af54 	.word	0x1007af54
 23ffd64:	00000000 	.word	0x00000000
 23ffd68:	023fe5c1 	.word	0x023fe5c1
 23ffd6c:	1007ad64 	.word	0x1007ad64

023ffd70 <__retarget_lock_acquire_recursive>:
 23ffd70:	4770      	bx	lr

023ffd72 <__retarget_lock_release>:
 23ffd72:	4770      	bx	lr

023ffd74 <__retarget_lock_release_recursive>:
 23ffd74:	4770      	bx	lr
	...

023ffd78 <dynalib_user>:
 23ffd78:	dafd 023f db25 023f db29 023f 0000 0000     ..?.%.?.).?.....
 23ffd88:	4454 2053 6156 756c 3a65 7000 6d70 5400     TDS Value:.ppm.T
 23ffd98:	5344 003a 4345 003a 536d 6d2f 6900 7374     DS:.EC:.mS/m.its
 23ffda8:	4320 454c 5241 0020 7469 2073 4c43 556f      CLEAR .its CLoU
 23ffdb8:	5944 0020 7469 2073 6944 5452 2059 0000     DY .its DiRTY ..

023ffdc8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffdd0:	e711 023f e717 023f e755 023f e725 023f     ..?...?.U.?.%.?.
 23ffde0:	e713 023f                                   ..?.

023ffde4 <_ZTVN5spark13EthernetClassE>:
	...
 23ffdec:	ec9b 023f ec91 023f ec87 023f ec7d 023f     ..?...?...?.}.?.
 23ffdfc:	ec71 023f ec65 023f ee8d 023f ee95 023f     q.?.e.?...?...?.
 23ffe0c:	ec59 023f ec51 023f ec47 023f ec3d 023f     Y.?.Q.?.G.?.=.?.
 23ffe1c:	eec5 023f                                   ..?.

023ffe20 <_ZTV7TwoWire>:
	...
 23ffe28:	ecb9 023f ed03 023f ecdb 023f ecbb 023f     ..?...?...?...?.
 23ffe38:	ece3 023f eceb 023f ecf3 023f ecfb 023f     ..?...?...?...?.

023ffe48 <_ZTV9IPAddress>:
	...
 23ffe50:	ed5d 023f ed4d 023f ed4f 023f 7061 0070     ].?.M.?.O.?.app.

023ffe60 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe68:	ee4d 023f ee57 023f ee61 023f ee6b 023f     M.?.W.?.a.?.k.?.
 23ffe78:	ee75 023f ee81 023f ee8d 023f ee95 023f     u.?...?...?...?.
 23ffe88:	ee9d 023f eea9 023f eeb1 023f eebb 023f     ..?...?...?...?.
 23ffe98:	eec5 023f 616e 006e 6e69 0066 766f 0066     ..?.nan.inf.ovf.
 23ffea8:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
 23ffeb8:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

023ffec8 <_ZTV11USARTSerial>:
	...
 23ffed0:	f4ed 023f f559 023f f531 023f efb1 023f     ..?.Y.?.1.?...?.
 23ffee0:	f501 023f f51d 023f f50f 023f f52b 023f     ..?...?...?.+.?.
 23ffef0:	f4ef 023f f4f3 023f                         ..?...?.

023ffef8 <_ZTV9USBSerial>:
	...
 23fff00:	f59d 023f f605 023f f5db 023f efb1 023f     ..?...?...?...?.
 23fff10:	f5cd 023f f59f 023f f5af 023f f5ff 023f     ..?...?...?...?.
 23fff20:	f5bf 023f f597 023f                         ..?...?.

023fff28 <_ZTVN5spark9WiFiClassE>:
	...
 23fff30:	f6fb 023f f6f1 023f f6e7 023f f69d 023f     ..?...?...?...?.
 23fff40:	f6db 023f f6cf 023f ee8d 023f ee95 023f     ..?...?...?...?.
 23fff50:	f6c3 023f f6bb 023f f6b1 023f f6a7 023f     ..?...?...?...?.
 23fff60:	eec5 023f                                   ..?.

023fff64 <_ZSt7nothrow>:
 23fff64:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff74:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff84:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff94:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fffa4:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffb4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffc4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffd5 <link_const_data_end>:
 23fffd5:	00          	.byte	0x00
	...

023fffd8 <link_constructors_location>:
 23fffd8:	023fdfcd 	.word	0x023fdfcd
 23fffdc:	023fe701 	.word	0x023fe701
 23fffe0:	023feca5 	.word	0x023feca5
 23fffe4:	023fee3d 	.word	0x023fee3d
 23fffe8:	023fef9d 	.word	0x023fef9d
 23fffec:	023ff229 	.word	0x023ff229
 23ffff0:	023ff4b5 	.word	0x023ff4b5
 23ffff4:	023ff4d9 	.word	0x023ff4d9
 23ffff8:	023ff705 	.word	0x023ff705
